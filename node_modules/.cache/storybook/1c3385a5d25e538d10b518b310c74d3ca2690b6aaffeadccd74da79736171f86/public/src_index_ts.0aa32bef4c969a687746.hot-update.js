"use strict";
self["webpackHotUpdate_matthew_ngo_react_dynamic_form"]("src_index_ts",{

/***/ "./src/features/dynamic-form/utils/formUtils.ts":
/*!******************************************************!*\
  !*** ./src/features/dynamic-form/utils/formUtils.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debounce: () => (/* binding */ debounce),
/* harmony export */   flattenConfig: () => (/* binding */ flattenConfig),
/* harmony export */   flattenObject: () => (/* binding */ flattenObject),
/* harmony export */   loadFromLocalStorage: () => (/* binding */ loadFromLocalStorage),
/* harmony export */   mergeClassNames: () => (/* binding */ mergeClassNames),
/* harmony export */   saveToLocalStorage: () => (/* binding */ saveToLocalStorage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

/**
 * Flattens a nested object into a single-level object.
 *
 * @param obj - The object to flatten.
 * @param parentKey - The parent key (used for recursion).
 * @param result - The resulting flattened object.
 * @returns The flattened object.
 */
var flattenObject = function (obj, parentKey, result) {
    if (parentKey === void 0) { parentKey = ''; }
    if (result === void 0) { result = {}; }
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var newKey = parentKey ? "".concat(parentKey, ".").concat(key) : key;
            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {
                flattenObject(obj[key], newKey, result);
            }
            else {
                result[newKey] = obj[key];
            }
        }
    }
    return result;
};
/**
 * Flattens a nested config object into a single-level object.
 *
 * @param config - The config object to flatten.
 * @param parentKey - The parent key (used for recursion).
 * @param result - The resulting flattened config object.
 * @returns The flattened config object.
 */
var flattenConfig = function (config, parentKey, result) {
    if (parentKey === void 0) { parentKey = ''; }
    if (result === void 0) { result = {}; }
    for (var key in config) {
        if (Object.prototype.hasOwnProperty.call(config, key)) {
            var newKey = parentKey ? "".concat(parentKey, ".").concat(key) : key;
            var fieldConfig = config[key];
            if (fieldConfig.fields) {
                flattenConfig(fieldConfig.fields, newKey, result);
            }
            else {
                result[newKey] = fieldConfig;
            }
        }
    }
    return result;
};
/**
 * Debounces a function.
 *
 * @param func - The function to debounce.
 * @param wait - The debounce time in milliseconds.
 * @returns The debounced function.
 */
var debounce = function (func, wait) {
    var timeout;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var later = function () {
            timeout = null;
            func.apply(void 0, args);
        };
        if (timeout)
            clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};
/**
 * Saves data to localStorage.
 *
 * @param key - The key to store the data under.
 * @param data - The data to store.
 */
var saveToLocalStorage = function (key, data) {
    localStorage.setItem(key, JSON.stringify(data));
};
/**
 * Loads data from localStorage.
 *
 * @param key - The key to load the data from.
 * @returns The loaded data, or null if no data is found.
 */
var loadFromLocalStorage = function (key) {
    var data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
};
/**
 * Merges multiple classNameConfig objects into a single object.
 *
 * @param defaultClassNames - The default classNameConfig object.
 * @param formClassNames - The form-level classNameConfig object.
 * @param fieldClassNames - The field-level classNameConfig object.
 * @returns The merged classNameConfig object.
 */
var mergeClassNames = function (defaultClassNames, formClassNames, fieldClassNames) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, defaultClassNames), formClassNames), fieldClassNames);
};


/***/ })

});
//# sourceMappingURL=src_index_ts.0aa32bef4c969a687746.hot-update.js.map
"use strict";
self["webpackHotUpdate_matthew_ngo_react_dynamic_form"]("src_index_ts",{

/***/ "./src/DynamicForm.tsx":
/*!*****************************!*\
  !*** ./src/DynamicForm.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/dynamic-form */ "./src/features/dynamic-form/index.ts");
/* harmony import */ var _features_form_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./features/form-renderer */ "./src/features/form-renderer/index.ts");
/* harmony import */ var _theme_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./theme/ThemeProvider */ "./src/theme/ThemeProvider.tsx");
// Filepath: /src/DynamicForm.tsx




var DynamicForm = function (_a) {
    var _b = _a.config, config = _b === void 0 ? {} : _b, onChange = _a.onChange, onSubmit = _a.onSubmit, formOptions = _a.formOptions, header = _a.header, footer = _a.footer, _c = _a.readOnly, readOnly = _c === void 0 ? false : _c, _d = _a.disableForm, disableForm = _d === void 0 ? false : _d, _e = _a.showSubmitButton, showSubmitButton = _e === void 0 ? true : _e, autoSave = _a.autoSave, _f = _a.resetOnSubmit, resetOnSubmit = _f === void 0 ? false : _f, _g = _a.focusFirstError, focusFirstError = _g === void 0 ? false : _g, className = _a.className, _h = _a.formClassNameConfig, formClassNameConfig = _h === void 0 ? {} : _h, style = _a.style, _j = _a.layout, layout = _j === void 0 ? 'flex' : _j, _k = _a.layoutConfig, layoutConfig = _k === void 0 ? { gap: '10px', columns: 2 } : _k, _l = _a.horizontalLabel, horizontalLabel = _l === void 0 ? false : _l, labelWidth = _a.labelWidth, _m = _a.enableLocalStorage, enableLocalStorage = _m === void 0 ? false : _m, _o = _a.debounceOnChange, debounceOnChange = _o === void 0 ? 0 : _o, _p = _a.disableAutocomplete, disableAutocomplete = _p === void 0 ? false : _p, _q = _a.showInlineError, showInlineError = _q === void 0 ? true : _q, _r = _a.showErrorSummary, showErrorSummary = _r === void 0 ? false : _r, _s = _a.validateOnBlur, validateOnBlur = _s === void 0 ? false : _s, _t = _a.validateOnChange, validateOnChange = _t === void 0 ? true : _t, _u = _a.validateOnSubmit, validateOnSubmit = _u === void 0 ? true : _u, theme = _a.theme, customInputs = _a.customInputs, onFormReady = _a.onFormReady, renderSubmitButton = _a.renderSubmitButton;
    var mergedFormOptions = (0,_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.useRHFOptions)(config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur);
    var form = (0,_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.useDynamicForm)({
        config: config,
        formOptions: mergedFormOptions,
        autoSave: autoSave,
        enableLocalStorage: enableLocalStorage,
        resetOnSubmit: resetOnSubmit,
        focusFirstError: focusFirstError,
        debounceOnChange: debounceOnChange,
        onChange: onChange,
        onFormReady: onFormReady,
    });
    var formState = form.formState, control = form.control, handleSubmit = form.handleSubmit;
    var _v = (0,_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.useFormFields)(config, // Pass config instead of data
    formState, control), fields = _v.fields, fieldsToRender = _v.fieldsToRender, conditionalFieldsConfig = _v.conditionalFieldsConfig;
    var onSubmitHandler = function () {
        handleSubmit(function (data) {
            if (onSubmit) {
                onSubmit(data);
            }
        })();
    };
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_theme_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__["default"], { theme: theme || {} },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.DynamicFormProvider, { form: form },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_features_form_renderer__WEBPACK_IMPORTED_MODULE_2__.FormRenderer, { onSubmit: onSubmitHandler, className: className, formClassNameConfig: formClassNameConfig, style: style, layout: layout, layoutConfig: layoutConfig, horizontalLabel: horizontalLabel, theme: theme, header: header, fieldsToRender: fieldsToRender, fields: fields, config: config, footer: footer, readOnly: readOnly, disableForm: disableForm, showSubmitButton: showSubmitButton, renderSubmitButton: renderSubmitButton, formOptions: formOptions, showErrorSummary: showErrorSummary, labelWidth: labelWidth, disableAutocomplete: disableAutocomplete, showInlineError: showInlineError, conditionalFieldsConfig: conditionalFieldsConfig, customInputs: customInputs }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DynamicForm);
;
DynamicForm.__docgenInfo = { "description": "", "methods": [], "displayName": "DynamicForm", "props": { "config": { "required": false, "tsType": { "name": "FormConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "" }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "" }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "" }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "" }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "" }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "", "defaultValue": { "value": "'flex'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "", "defaultValue": { "value": "{ gap: '10px', columns: 2 }", "computed": false } }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "", "defaultValue": { "value": "0", "computed": false } }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "className": { "required": false, "tsType": { "name": "string" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "" }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "" }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "" }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "Partial", "elements": [{ "name": "Record", "elements": [{ "name": "string" }, { "name": "FieldError" }], "raw": "Record<string, FieldError>" }], "raw": "Partial<Record<string, FieldError>>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "" }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "" } } };
DynamicForm.__docgenInfo = { "description": "", "methods": [], "displayName": "DynamicForm", "props": { "config": { "required": false, "tsType": { "name": "FormConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "" }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "" }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "" }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "" }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "" }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "", "defaultValue": { "value": "'flex'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "", "defaultValue": { "value": "{ gap: '10px', columns: 2 }", "computed": false } }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "", "defaultValue": { "value": "0", "computed": false } }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "className": { "required": false, "tsType": { "name": "string" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "" }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "" }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "" }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "Partial", "elements": [{ "name": "Record", "elements": [{ "name": "string" }, { "name": "FieldError" }], "raw": "Record<string, FieldError>" }], "raw": "Partial<Record<string, FieldError>>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "" }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "" } } };


/***/ }),

/***/ "./src/components/ErrorRenderer.tsx":
/*!******************************************!*\
  !*** ./src/components/ErrorRenderer.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ "./node_modules/styled-components/dist/styled-components.browser.esm.js");



var ErrorMessage = styled_components__WEBPACK_IMPORTED_MODULE_1__["default"].div(templateObject_1 || (templateObject_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__makeTemplateObject)(["\n  color: ", ";\n  font-size: ", ";\n  margin-top: ", ";\n"], ["\n  color: ", ";\n  font-size: ", ";\n  margin-top: ", ";\n"])), function (_a) {
    var theme = _a.theme;
    return theme.colors.error;
}, function (_a) {
    var theme = _a.theme;
    return theme.fontSizes.small;
}, function (_a) {
    var theme = _a.theme;
    return theme.space.xs;
});
var ErrorRenderer = function (_a) {
    var error = _a.error, formClassNameConfig = _a.formClassNameConfig, fieldConfig = _a.fieldConfig;
    var message = error.message || '';
    // Use validationMessages from fieldConfig if available
    if (fieldConfig && fieldConfig.validationMessages) {
        var template = fieldConfig.validationMessages[error.type];
        var values = {
            label: fieldConfig.label,
            value: error,
            error: error,
            config: fieldConfig,
        };
        if (typeof template === 'function') {
            message = template(values);
        }
        else if (typeof template === 'string') {
            message = template;
        }
    }
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ErrorMessage, { className: formClassNameConfig === null || formClassNameConfig === void 0 ? void 0 : formClassNameConfig.errorMessage }, message));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ErrorRenderer);
;
ErrorRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "ErrorRenderer", "props": { "error": { "required": true, "tsType": { "name": "FieldError" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "any" }, "description": "" }, "fieldConfig": { "required": false, "tsType": { "name": "FieldConfig" }, "description": "" } } };
ErrorRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "ErrorRenderer", "props": { "error": { "required": true, "tsType": { "name": "FieldError" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "any" }, "description": "" }, "fieldConfig": { "required": false, "tsType": { "name": "FieldConfig" }, "description": "" } } };
var templateObject_1;


/***/ }),

/***/ "./src/features/dynamic-form/hooks/useDynamicForm.ts":
/*!***********************************************************!*\
  !*** ./src/features/dynamic-form/hooks/useDynamicForm.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "./node_modules/react-hook-form/dist/index.esm.mjs");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/features/dynamic-form/utils/formUtils.ts");

// Filepath: /src/features/dynamic-form/hooks/useDynamicForm.ts
// src/features/dynamic-form/hooks/useDynamicForm.ts



/**
 * Custom hook to manage form state and behavior.
 *
 * @param props - The hook props.
 * @returns The `react-hook-form` instance.
 */
var useDynamicForm = function (props) {
    var formOptions = props.formOptions, autoSave = props.autoSave, enableLocalStorage = props.enableLocalStorage, resetOnSubmit = props.resetOnSubmit, focusFirstError = props.focusFirstError, debounceOnChange = props.debounceOnChange, onChange = props.onChange, onFormReady = props.onFormReady, config = props.config;
    // Flatten the config to access default values and types easily
    var flattenedConfig = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.flattenConfig)(config);
    // Create defaultValues object from flattened config
    var defaultValues = Object.keys(flattenedConfig).reduce(function (acc, key) {
        if (flattenedConfig[key].defaultValue !== undefined) {
            acc[key] = flattenedConfig[key].defaultValue;
        }
        return acc;
    }, {});
    var form = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.useForm)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, formOptions), { defaultValues: defaultValues }));
    var formState = form.formState, reset = form.reset, setFocus = form.setFocus, watch = form.watch, control = form.control;
    var isSubmitSuccessful = formState.isSubmitSuccessful, errors = formState.errors;
    var _a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), isLocalStorageLoaded = _a[0], setIsLocalStorageLoaded = _a[1];
    // Auto-save
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        var intervalId = null;
        if (autoSave) {
            intervalId = setInterval(function () {
                autoSave.save(watch());
            }, autoSave.interval);
        }
        return function () {
            if (intervalId)
                clearInterval(intervalId);
        };
    }, [autoSave, watch]);
    // LocalStorage - Save data
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (enableLocalStorage) {
            var subscription_1 = watch(function (data) { return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.saveToLocalStorage)('form-data', data); });
            return function () { return subscription_1.unsubscribe(); };
        }
    }, [enableLocalStorage, watch]);
    // LocalStorage - Load data
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (enableLocalStorage) {
            var loadedData = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.loadFromLocalStorage)('form-data');
            if (loadedData) {
                var resetData = {};
                for (var key in flattenedConfig) {
                    var fieldConfig = flattenedConfig[key];
                    if (loadedData[key] !== undefined) {
                        if (fieldConfig.type === 'radio' ||
                            fieldConfig.type === 'checkbox' ||
                            fieldConfig.type === 'switch') {
                            // Convert string to boolean for radio, checkbox, and switch types
                            resetData[key] =
                                loadedData[key] === 'true'
                                    ? true
                                    : loadedData[key] === 'false'
                                        ? false
                                        : loadedData[key];
                            if (resetData[key] === undefined) {
                                resetData[key] = fieldConfig.defaultValue;
                            }
                        }
                        else if (fieldConfig.type === 'number') {
                            // Convert string to number
                            resetData[key] =
                                loadedData[key] !== ''
                                    ? parseFloat(loadedData[key])
                                    : fieldConfig.defaultValue;
                        }
                        else {
                            resetData[key] = loadedData[key];
                        }
                    }
                }
                reset(resetData);
            }
            setIsLocalStorageLoaded(true);
        }
    }, [enableLocalStorage, reset]);
    // Reset on submit
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (resetOnSubmit && isSubmitSuccessful) {
            reset();
        }
    }, [resetOnSubmit, isSubmitSuccessful, reset]);
    // Focus first error
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (focusFirstError) {
            var firstErrorKey = Object.keys(errors)[0];
            if (firstErrorKey) {
                setFocus(firstErrorKey);
            }
        }
    }, [errors, focusFirstError, setFocus]);
    // Debounce on change
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (onChange) {
            var debouncedOnChange_1 = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.debounce)(onChange, debounceOnChange || 0);
            var subscription_2 = watch(function (data) { return debouncedOnChange_1(data); });
            return function () { return subscription_2.unsubscribe(); };
        }
    }, [watch, onChange, debounceOnChange]);
    // onFormReady callback
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (onFormReady) {
            onFormReady(form);
        }
    }, [form, onFormReady]);
    return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, form), { control: control });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useDynamicForm);


/***/ }),

/***/ "./src/features/dynamic-form/hooks/useFormFields.ts":
/*!**********************************************************!*\
  !*** ./src/features/dynamic-form/hooks/useFormFields.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "./node_modules/react-hook-form/dist/index.esm.mjs");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./src/features/dynamic-form/utils/formUtils.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./src/features/dynamic-form/utils/conditionalRendering.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils */ "./src/features/dynamic-form/utils/fieldUtils.ts");
// Filepath: /src/features/dynamic-form/hooks/useFormFields.ts
// src/features/dynamic-form/hooks/useFormFields.ts



/**
 * Custom hook to generate form fields from data and config.
 *
 * @param config - The form configuration.
 * @param formState - The `react-hook-form` form state.
 * @param control - The `react-hook-form` control object.
 * @returns An object containing the form fields and the fields to render.
 */
function useFormFields(config, formState, control) {
    // Thêm state để force re-render
    var _a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), update = _a[0], setUpdate = _a[1];
    // Thêm useEffect để force re-render khi config thay đổi
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        setUpdate(function (prev) { return !prev; });
    }, [config]);
    var flattenedConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.flattenConfig)(config); }, [config]);
    var conditionalFieldsConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
        return Object.keys(config)
            .filter(function (fieldId) {
            var _a;
            return config[fieldId].conditional &&
                typeof ((_a = config[fieldId].conditional) === null || _a === void 0 ? void 0 : _a.when) === 'string';
        })
            .map(function (fieldId) {
            var _a, _b;
            return ({
                when: config[fieldId].conditional.when,
                operator: config[fieldId].conditional.operator || 'is',
                value: (_a = config[fieldId].conditional) === null || _a === void 0 ? void 0 : _a.value,
                comparator: (_b = config[fieldId].conditional) === null || _b === void 0 ? void 0 : _b.comparator,
                fields: config[fieldId].conditional.fields || [],
            });
        });
    }, [config]);
    var watchedValues = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.useWatch)({
        control: control,
        name: conditionalFieldsConfig.map(function (condition) { return condition.when; }),
    });
    var fieldsToRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
        return Object.keys(config).filter(function (fieldId) {
            return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.shouldRenderField)(fieldId, conditionalFieldsConfig, watchedValues);
        });
    }, [config, conditionalFieldsConfig, watchedValues]);
    var fields = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getFields)(flattenedConfig, formState); }, [
        flattenedConfig,
        formState,
    ]);
    return { fields: fields, fieldsToRender: fieldsToRender, conditionalFieldsConfig: conditionalFieldsConfig };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useFormFields);


/***/ }),

/***/ "./src/features/dynamic-form/hooks/useRHFOptions.ts":
/*!**********************************************************!*\
  !*** ./src/features/dynamic-form/hooks/useRHFOptions.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _hookform_resolvers_yup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @hookform/resolvers/yup */ "./node_modules/@hookform/resolvers/yup/dist/yup.mjs");
/* harmony import */ var _validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../validation */ "./src/features/validation/index.ts");

// src/features/dynamic-form/hooks/useRHFOptions.ts



var useRHFOptions = function (config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur) {
    // Specify the generic type here
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
        var schema = (0,_validation__WEBPACK_IMPORTED_MODULE_1__.createValidationSchema)(config);
        var resolver = (0,_hookform_resolvers_yup__WEBPACK_IMPORTED_MODULE_2__.yupResolver)(schema);
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, formOptions), { mode: validateOnSubmit
                ? 'onSubmit'
                : validateOnChange
                    ? 'onChange'
                    : validateOnBlur
                        ? 'onBlur'
                        : 'onSubmit', criteriaMode: 'all', resolver: resolver });
    }, [config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur]);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRHFOptions);


/***/ }),

/***/ "./src/features/dynamic-form/types.ts":
/*!********************************************!*\
  !*** ./src/features/dynamic-form/types.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FormContainerProps: () => (/* reexport safe */ _styles__WEBPACK_IMPORTED_MODULE_0__.FormContainerProps),
/* harmony export */   InputWrapperProps: () => (/* reexport safe */ _styles__WEBPACK_IMPORTED_MODULE_0__.InputWrapperProps),
/* harmony export */   LabelProps: () => (/* reexport safe */ _styles__WEBPACK_IMPORTED_MODULE_0__.LabelProps)
/* harmony export */ });
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../styles */ "./src/styles.ts");


/**
 * Extended DynamicFormProps with render props.
 */


/***/ }),

/***/ "./src/features/dynamic-form/utils/conditionalRendering.ts":
/*!*****************************************************************!*\
  !*** ./src/features/dynamic-form/utils/conditionalRendering.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   shouldRenderField: () => (/* binding */ shouldRenderField)
/* harmony export */ });
/**
 * Determines if a field should be rendered based on the conditional logic.
 *
 * @param fieldId - The ID of the field to check.
 * @param conditionalFieldsConfig - The conditional fields configuration.
 * @param watchedValues - The watched values from useWatch.
 * @returns True if the field should be rendered, false otherwise.
 */
var shouldRenderField = function (fieldId, conditionalFieldsConfig, watchedValues) {
    var isConditionalField = conditionalFieldsConfig.some(function (condition) {
        return condition.fields.includes(fieldId);
    });
    if (!isConditionalField) {
        return true;
    }
    return conditionalFieldsConfig.some(function (condition) {
        var conditionIndex = conditionalFieldsConfig.indexOf(condition);
        var watchedValue = watchedValues[conditionIndex];
        var conditionMet = false;
        switch (condition.operator) {
            case 'is':
                conditionMet = watchedValue === condition.value;
                break;
            case 'isNot':
                conditionMet = watchedValue !== condition.value;
                break;
            case 'greaterThan':
                conditionMet = watchedValue > condition.value;
                break;
            case 'lessThan':
                conditionMet = watchedValue < condition.value;
                break;
            case 'greaterThanOrEqual':
                conditionMet = watchedValue >= condition.value;
                break;
            case 'lessThanOrEqual':
                conditionMet = watchedValue <= condition.value;
                break;
            case 'contains':
                conditionMet =
                    typeof watchedValue === 'string' &&
                        typeof condition.value === 'string' &&
                        watchedValue.includes(condition.value);
                break;
            case 'startsWith':
                conditionMet =
                    typeof watchedValue === 'string' &&
                        typeof condition.value === 'string' &&
                        watchedValue.startsWith(condition.value);
                break;
            case 'endsWith':
                conditionMet =
                    typeof watchedValue === 'string' &&
                        typeof condition.value === 'string' &&
                        watchedValue.endsWith(condition.value);
                break;
            case 'custom':
                conditionMet = condition.comparator
                    ? condition.comparator(watchedValue)
                    : false;
                break;
            default:
                console.warn("Unknown operator: ".concat(condition.operator));
                conditionMet = false;
        }
        return condition.fields.includes(fieldId) && conditionMet;
    });
};


/***/ }),

/***/ "./src/features/dynamic-form/utils/fieldUtils.ts":
/*!*******************************************************!*\
  !*** ./src/features/dynamic-form/utils/fieldUtils.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFields: () => (/* binding */ getFields)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _inputs_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../inputs/utils */ "./src/features/inputs/utils.ts");
/* harmony import */ var _validationUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validationUtils */ "./src/features/dynamic-form/utils/validationUtils.ts");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-hook-form */ "./node_modules/react-hook-form/dist/index.esm.mjs");




/**
 * Generates the form fields array based on the flattened config and form state.
 *
 * @param flattenedConfig - The flattened form configuration.
 * @param formState - The `react-hook-form` form state.
 * @returns The form fields array.
 */
var getFields = function (flattenedConfig, formState) {
    return Object.entries(flattenedConfig).map(function (_a) {
        var key = _a[0], fieldConfig = _a[1];
        // Retrieve the default value from fieldConfig
        var defaultValue = fieldConfig.defaultValue;
        var inputType = fieldConfig.type || (0,_inputs_utils__WEBPACK_IMPORTED_MODULE_0__.getInputTypeFromValue)(defaultValue);
        var fieldError = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_1__.get)(formState.errors, key);
        var errorMessage = (0,_validationUtils__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(fieldConfig, fieldError, {});
        return {
            label: fieldConfig.label,
            id: key,
            type: inputType,
            error: errorMessage
                ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, fieldError), { message: errorMessage, type: (fieldError === null || fieldError === void 0 ? void 0 : fieldError.type) || '' }) : fieldError, // Use the unwrapped fieldError
        };
    });
};


/***/ })

});
//# sourceMappingURL=src_index_ts.9d2bd6397ff43f22205c.hot-update.js.map
"use strict";
self["webpackHotUpdate_matthew_ngo_react_dynamic_form"]("DynamicForm-stories",{

/***/ "./src/DynamicForm.stories.tsx":
/*!*************************************!*\
  !*** ./src/DynamicForm.stories.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdvancedFeatures: () => (/* binding */ AdvancedFeatures),
/* harmony export */   AdvancedInputTypes: () => (/* binding */ AdvancedInputTypes),
/* harmony export */   BasicInputTypes: () => (/* binding */ BasicInputTypes),
/* harmony export */   ComprehensiveForm: () => (/* binding */ ComprehensiveForm),
/* harmony export */   DynamicConfiguration: () => (/* binding */ DynamicConfiguration),
/* harmony export */   ValidationAndSubmission: () => (/* binding */ ValidationAndSubmission),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _storybook_test__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @storybook/test */ "./node_modules/@storybook/test/dist/index.mjs");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! . */ "./src/index.ts");
/* harmony import */ var _features_inputs_registry_components_FlexLayout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/inputs/registry/components/FlexLayout */ "./src/features/inputs/registry/components/FlexLayout.tsx");

// Filepath: /src/DynamicForm.stories.tsx



// import { useController, useFormContext } from 'react-hook-form';
// import { useTheme } from './theme/ThemeProvider';
 // Updated import

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'DynamicForm',
  component: ___WEBPACK_IMPORTED_MODULE_2__.DynamicForm,
  argTypes: {
    // Control for 'onSubmit'
    onSubmit: {
      action: 'onSubmit',
      control: false // Hide default control
    }
  }
});
var Template = function (args) {
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(___WEBPACK_IMPORTED_MODULE_2__.DynamicForm, (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, args));
};
// --- Examples ---
// Story 1: Basic Input Types
var BasicInputTypes = Template.bind({});
BasicInputTypes.args = {
  theme: ___WEBPACK_IMPORTED_MODULE_2__.defaultTheme,
  config: {
    firstName: {
      label: 'First Name',
      type: 'text',
      defaultValue: 'John'
    },
    lastName: {
      label: 'Last Name',
      type: 'text',
      defaultValue: 'Doe'
    },
    email: {
      label: 'Email',
      type: 'email',
      defaultValue: 'john.doe@example.com'
    },
    age: {
      label: 'Age',
      type: 'number',
      defaultValue: 30
    },
    subscribe: {
      label: 'Subscribe to newsletter?',
      type: 'checkbox',
      defaultValue: true
    }
  },
  onSubmit: function (data) {
    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);
  },
  onFormReady: (0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.fn)()
};
BasicInputTypes.storyName = 'Basic Input Types';
// Story 2: Advanced Input Types
var AdvancedInputTypes = Template.bind({});
AdvancedInputTypes.args = {
  theme: ___WEBPACK_IMPORTED_MODULE_2__.defaultTheme,
  config: {
    startDate: {
      label: 'Start Date',
      type: 'date',
      defaultValue: '2023-11-20'
    },
    startTime: {
      label: 'Start Time',
      type: 'time',
      defaultValue: '09:00'
    },
    dateTime: {
      label: 'Date and Time',
      type: 'datetime-local',
      defaultValue: '2023-11-20T09:00'
    },
    notes: {
      label: 'Notes',
      type: 'textarea',
      defaultValue: 'Some notes...'
    },
    country: {
      label: 'Country',
      type: 'select',
      defaultValue: 'US',
      options: [{
        value: 'US',
        label: 'United States'
      }, {
        value: 'CA',
        label: 'Canada'
      }, {
        value: 'UK',
        label: 'United Kingdom'
      }]
    },
    gender: {
      label: 'Gender',
      type: 'radio',
      defaultValue: 'male',
      options: [{
        value: 'male',
        label: 'Male'
      }, {
        value: 'female',
        label: 'Female'
      }, {
        value: 'other',
        label: 'Other'
      }]
    },
    notification: {
      label: 'Enable Notifications',
      type: 'switch',
      defaultValue: true
    },
    favoriteFruit: {
      label: 'Favorite Fruit',
      type: 'combobox',
      defaultValue: 'Apple',
      options: [{
        value: 'Apple',
        label: 'Apple'
      }, {
        value: 'Banana',
        label: 'Banana'
      }, {
        value: 'Orange',
        label: 'Orange'
      }]
    }
  },
  onSubmit: function (data) {
    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);
  },
  onFormReady: (0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.fn)()
};
AdvancedInputTypes.storyName = 'Advanced Input Types';
// Story 3: Validation and Form Submission
var ValidationAndSubmission = Template.bind({});
ValidationAndSubmission.args = {
  theme: ___WEBPACK_IMPORTED_MODULE_2__.defaultTheme,
  config: {
    requiredField: {
      label: 'Required Field',
      type: 'text',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        }
      }
    },
    minLengthField: {
      label: 'Min Length (3)',
      type: 'text',
      validation: {
        minLength: {
          value: 3,
          message: 'Minimum length is 3'
        }
      }
    },
    maxLengthField: {
      label: 'Max Length (5)',
      type: 'text',
      validation: {
        maxLength: {
          value: 5,
          message: 'Maximum length is 5'
        }
      }
    },
    email: {
      label: 'Email',
      type: 'email',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        },
        pattern: {
          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
          message: 'Invalid email address'
        }
      }
    },
    age: {
      label: 'Age',
      type: 'number',
      validation: {
        min: {
          value: 18,
          message: 'Must be 18 or older'
        },
        max: {
          value: 100,
          message: 'Must be 100 or younger'
        }
      }
    },
    password: {
      label: 'Password',
      type: 'text',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        },
        minLength: {
          value: 8,
          message: 'Password must be at least 8 characters long'
        },
        validate: function (value) {
          if (!/[A-Z]/.test(value)) {
            return 'Password must contain at least one uppercase letter';
          }
          if (!/[a-z]/.test(value)) {
            return 'Password must contain at least one lowercase letter';
          }
          if (!/[0-9]/.test(value)) {
            return 'Password must contain at least one number';
          }
          if (!/[^A-Za-z0-9]/.test(value)) {
            return 'Password must contain at least one special character';
          }
          return undefined;
        }
      }
    }
  },
  onSubmit: function (data) {
    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);
  },
  onFormReady: (0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.fn)()
};
ValidationAndSubmission.storyName = 'Validation and Form Submission';
// Story 4: Dynamic Form Configuration
var DynamicConfiguration = Template.bind({});
DynamicConfiguration.args = {
  theme: ___WEBPACK_IMPORTED_MODULE_2__.defaultTheme,
  config: {
    firstName: {
      label: 'First Name',
      type: 'text',
      defaultValue: 'John',
      classNameConfig: {
        label: 'custom-label',
        input: 'custom-input'
      }
    },
    dynamicField: {
      label: 'Dynamic Field',
      type: 'text',
      defaultValue: '',
      conditional: {
        when: 'firstName',
        operator: 'is',
        value: 'Show',
        fields: ['dynamicField']
      }
    }
  },
  onSubmit: function (data) {
    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);
  },
  onFormReady: (0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.fn)()
};
DynamicConfiguration.storyName = 'Dynamic Form Configuration';
// Story 5: Advanced Features (Auto-save, Local Storage, Reset, Focus Error, Debounce)
var AdvancedFeatures = Template.bind({});
AdvancedFeatures.args = {
  theme: ___WEBPACK_IMPORTED_MODULE_2__.defaultTheme,
  config: {
    autoSaveField: {
      label: 'Auto-save Field',
      type: 'text',
      defaultValue: ''
    },
    localStorageField: {
      label: 'Local Storage Field',
      type: 'text',
      defaultValue: ''
    },
    resetField: {
      label: 'Reset Field',
      type: 'text',
      defaultValue: 'Initial Value'
    },
    errorField: {
      label: 'Error Field',
      type: 'text',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        }
      }
    },
    debounceField: {
      label: 'Debounce Field',
      type: 'text',
      defaultValue: ''
    }
  },
  autoSave: {
    interval: 5000,
    save: function (data) {
      return console.log('Auto-saving:', data);
    }
  },
  enableLocalStorage: true,
  resetOnSubmit: true,
  focusFirstError: true,
  debounceOnChange: 500,
  onSubmit: function (data) {
    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);
  },
  onChange: function (data) {
    return console.log('Debounced change:', data);
  },
  onFormReady: function (form) {
    // Reset button
    var resetButton = document.createElement('button');
    resetButton.textContent = 'Reset Form';
    resetButton.onclick = function () {
      return form.reset();
    };
    document.body.appendChild(resetButton);
  }
};
AdvancedFeatures.storyName = 'Advanced Features (Auto-save, Local Storage, Reset, Focus Error, Debounce)';
// Interactions for AdvancedFeatures Story
AdvancedFeatures.play = function (_a) {
  return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, [_a], void 0, function (_b) {
    var canvas;
    var canvasElement = _b.canvasElement,
      step = _b.step;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_c) {
      switch (_c.label) {
        case 0:
          canvas = (0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.within)(canvasElement);
          return [4 /*yield*/, step('Simulate Auto-save', function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function () {
              return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    return [4 /*yield*/, _storybook_test__WEBPACK_IMPORTED_MODULE_1__.userEvent.type(canvas.getByLabelText('Auto-save Field'), 'Auto-save Test')];
                  case 1:
                    _a.sent();
                    // Wait for auto-save to trigger (5 seconds)
                    return [4 /*yield*/, new Promise(function (resolve) {
                      return setTimeout(resolve, 5100);
                    })];
                  case 2:
                    // Wait for auto-save to trigger (5 seconds)
                    _a.sent();
                    return [2 /*return*/];
                }
              });
            });
          })];
        case 1:
          _c.sent();
          return [4 /*yield*/, step('Simulate Local Storage', function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function () {
              return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    return [4 /*yield*/, _storybook_test__WEBPACK_IMPORTED_MODULE_1__.userEvent.type(canvas.getByLabelText('Local Storage Field'), 'Local Storage Test')];
                  case 1:
                    _a.sent();
                    // Manually trigger saving to local storage (for demonstration)
                    window.localStorage.setItem('form-data', JSON.stringify({
                      localStorageField: 'Local Storage Test'
                    }));
                    // Reload the page to simulate reading from local storage
                    window.location.reload();
                    return [2 /*return*/];
                }
              });
            });
          })];
        case 2:
          _c.sent();
          return [4 /*yield*/, step('Simulate Reset on Submit', function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function () {
              return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    return [4 /*yield*/, _storybook_test__WEBPACK_IMPORTED_MODULE_1__.userEvent.type(canvas.getByLabelText('Reset Field'), 'New Value')];
                  case 1:
                    _a.sent();
                    return [4 /*yield*/, _storybook_test__WEBPACK_IMPORTED_MODULE_1__.userEvent.click(canvas.getByRole('button', {
                      name: 'Submit'
                    }))];
                  case 2:
                    _a.sent();
                    // Expect the field to be reset to 'Initial Value'
                    return [4 /*yield*/, (0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.expect)(canvas.getByLabelText('Reset Field')).toHaveValue('Initial Value')];
                  case 3:
                    // Expect the field to be reset to 'Initial Value'
                    _a.sent();
                    return [2 /*return*/];
                }
              });
            });
          })];
        case 3:
          _c.sent();
          return [4 /*yield*/, step('Simulate Focus First Error on Submit', function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function () {
              return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    // Clear the required field to trigger an error
                    return [4 /*yield*/, _storybook_test__WEBPACK_IMPORTED_MODULE_1__.userEvent.clear(canvas.getByLabelText('Error Field'))];
                  case 1:
                    // Clear the required field to trigger an error
                    _a.sent();
                    return [4 /*yield*/, _storybook_test__WEBPACK_IMPORTED_MODULE_1__.userEvent.click(canvas.getByRole('button', {
                      name: 'Submit'
                    }))];
                  case 2:
                    _a.sent();
                    // Expect the focus to be on the Error Field
                    return [4 /*yield*/, (0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.expect)(canvas.getByLabelText('Error Field')).toHaveFocus()];
                  case 3:
                    // Expect the focus to be on the Error Field
                    _a.sent();
                    return [2 /*return*/];
                }
              });
            });
          })];
        case 4:
          _c.sent();
          return [4 /*yield*/, step('Simulate Debounce on Change', function () {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function () {
              return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    return [4 /*yield*/, _storybook_test__WEBPACK_IMPORTED_MODULE_1__.userEvent.type(canvas.getByLabelText('Debounce Field'), 'Debounce Test')];
                  case 1:
                    _a.sent();
                    // Wait for debounce to trigger (0.5 seconds)
                    return [4 /*yield*/, new Promise(function (resolve) {
                      return setTimeout(resolve, 600);
                    })];
                  case 2:
                    // Wait for debounce to trigger (0.5 seconds)
                    _a.sent();
                    return [2 /*return*/];
                }
              });
            });
          })];
        case 5:
          _c.sent();
          return [2 /*return*/];
      }
    });
  });
};
// Story 6: Comprehensive Form
// --- Comprehensive Form Story ---
var ComprehensiveForm = Template.bind({});
ComprehensiveForm.args = {
  theme: ___WEBPACK_IMPORTED_MODULE_2__.defaultTheme,
  renderLayout: function (_a) {
    var children = _a.children,
      rest = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, ["children"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_features_inputs_registry_components_FlexLayout__WEBPACK_IMPORTED_MODULE_3__.FlexLayout, (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, rest), children);
  },
  onError: function (errors) {
    console.log('Form validation errors:', errors);
  },
  renderErrorSummary: function (errors, formClassNameConfig) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
      className: formClassNameConfig === null || formClassNameConfig === void 0 ? void 0 : formClassNameConfig.formContainer
    }, react__WEBPACK_IMPORTED_MODULE_0___default().createElement("h3", {
      className: formClassNameConfig === null || formClassNameConfig === void 0 ? void 0 : formClassNameConfig.label
    }, "Validation Errors:"), react__WEBPACK_IMPORTED_MODULE_0___default().createElement("ul", null, Object.entries(errors).map(function (_a) {
      var key = _a[0],
        error = _a[1];
      return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("li", {
        key: key,
        className: formClassNameConfig === null || formClassNameConfig === void 0 ? void 0 : formClassNameConfig.errorMessage
      }, key, ": ", error === null || error === void 0 ? void 0 : error.message);
    })));
  },
  config: {
    // --- Basic Inputs ---
    firstName: {
      label: 'First Name',
      type: 'text',
      defaultValue: 'John',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        }
      },
      classNameConfig: {
        input: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    lastName: {
      label: 'Last Name',
      type: 'text',
      defaultValue: 'Doe',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        }
      },
      classNameConfig: {
        input: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    email: {
      label: 'Email',
      type: 'email',
      defaultValue: 'john.doe@example.com',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        },
        pattern: {
          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
          message: 'Invalid email address'
        }
      },
      classNameConfig: {
        input: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2',
        errorMessage: 'text-red-500 text-xs italic'
      }
    },
    age: {
      label: 'Age',
      type: 'number',
      defaultValue: 30,
      validation: {
        min: {
          value: 18,
          message: 'Must be 18 or older'
        },
        max: {
          value: 99,
          message: 'Must be 99 or younger'
        }
      },
      classNameConfig: {
        input: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    subscribe: {
      label: 'Subscribe to newsletter?',
      type: 'checkbox',
      defaultValue: true,
      classNameConfig: {
        checkboxInput: 'mr-2 leading-tight',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    // --- Advanced Inputs ---
    startDate: {
      label: 'Start Date',
      type: 'date',
      defaultValue: '2023-11-20',
      classNameConfig: {
        date: 'border border-gray-400 p-2 rounded w-full',
        // Apply the 'date' class here
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    startTime: {
      label: 'Start Time',
      type: 'time',
      defaultValue: '09:00',
      classNameConfig: {
        time: 'border border-gray-400 p-2 rounded w-full',
        // Apply the 'time' class here
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    dateTime: {
      label: 'Date and Time',
      type: 'datetime-local',
      defaultValue: '2023-11-20T09:00',
      classNameConfig: {
        dateTime: 'border border-gray-400 p-2 rounded w-full',
        // Apply the 'dateTime' class here
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    notes: {
      label: 'Notes',
      type: 'textarea',
      defaultValue: 'Some notes...',
      classNameConfig: {
        textarea: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    country: {
      label: 'Country',
      type: 'select',
      defaultValue: 'US',
      options: [{
        value: 'US',
        label: 'United States'
      }, {
        value: 'CA',
        label: 'Canada'
      }, {
        value: 'UK',
        label: 'United Kingdom'
      }],
      classNameConfig: {
        select: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    gender: {
      label: 'Gender',
      type: 'radio',
      defaultValue: 'male',
      options: [{
        value: 'male',
        label: 'Male'
      }, {
        value: 'female',
        label: 'Female'
      }, {
        value: 'other',
        label: 'Other'
      }],
      classNameConfig: {
        radioGroup: 'flex items-center',
        radioLabel: 'mr-4',
        radioButton: 'mr-1',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    notification: {
      label: 'Enable Notifications',
      type: 'switch',
      defaultValue: true,
      classNameConfig: {
        switchContainer: 'relative inline-block w-10 mr-2 align-middle select-none',
        switch: 'absolute block w-5 h-5 rounded-full bg-white border-4 appearance-none cursor-pointer',
        switchSlider: 'absolute cursor-pointer top-0 left-0 right-0 bottom-0 bg-gray-400 transition-all duration-300 rounded-full',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    favoriteFruit: {
      label: 'Favorite Fruit',
      type: 'combobox',
      defaultValue: 'Apple',
      options: [{
        value: 'Apple',
        label: 'Apple'
      }, {
        value: 'Banana',
        label: 'Banana'
      }, {
        value: 'Orange',
        label: 'Orange'
      }],
      classNameConfig: {
        comboBoxContainer: 'relative',
        comboBox: 'border border-gray-400 p-2 rounded w-full',
        comboBoxDropdownList: 'absolute z-10 w-full bg-white border border-gray-400 rounded mt-1',
        comboBoxDropdownItem: 'p-2 hover:bg-gray-200',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    // --- Conditional Field ---
    dynamicField: {
      label: 'Dynamic Field',
      type: 'text',
      defaultValue: '',
      conditional: {
        when: 'firstName',
        operator: 'is',
        value: 'ShowDynamic',
        fields: ['dynamicField']
      },
      classNameConfig: {
        input: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2'
      }
    },
    // --- Validation ---
    password: {
      label: 'Password',
      type: 'password',
      validation: {
        required: {
          value: true,
          message: 'This field is required'
        },
        minLength: {
          value: 8,
          message: 'Password must be at least 8 characters long'
        },
        validate: function (value) {
          if (!/[A-Z]/.test(value)) {
            return 'Password must contain at least one uppercase letter';
          }
          if (!/[a-z]/.test(value)) {
            return 'Password must contain at least one lowercase letter';
          }
          if (!/[0-9]/.test(value)) {
            return 'Password must contain at least one number';
          }
          if (!/[^A-Za-z0-9]/.test(value)) {
            return 'Password must contain at least one special character';
          }
          return undefined;
        }
      },
      classNameConfig: {
        input: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2',
        errorMessage: 'text-red-500 text-xs italic'
      }
    },
    // --- Custom Error Message ---
    customErrorField: {
      label: 'Custom Error Message',
      type: 'text',
      validation: {
        required: {
          value: true,
          message: 'This is a required field.'
        },
        minLength: {
          value: 5,
          message: 'This field must be at least 5 characters long.'
        }
      },
      validationMessages: {
        required: 'You must fill in this field.',
        minLength: function (_a) {
          var minLength = _a.minLength;
          return "Please enter at least ".concat(minLength, " characters.");
        }
      },
      classNameConfig: {
        input: 'border border-gray-400 p-2 rounded w-full',
        label: 'block text-gray-700 text-sm font-bold mb-2',
        errorMessage: 'text-red-500 text-xs italic'
      }
    },
    // --- Number Input with validation ---
    quantity: {
      label: 'Quantity',
      type: 'number',
      defaultValue: 1,
      validation: {
        required: {
          value: true,
          message: 'Quantity is required'
        },
        min: {
          value: 1,
          message: 'Quantity must be at least 1'
        },
        max: {
          value: 10,
          message: 'Quantity must be no more than 10'
        }
      },
      classNameConfig: {
        label: 'block text-gray-700 text-sm font-bold mb-2',
        numberInputContainer: 'flex items-center',
        numberInputButton: 'bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded-md',
        number: 'border border-gray-400 p-2 rounded w-20 text-center mx-2'
      }
    }
  },
  formClassNameConfig: {
    formContainer: 'p-6 border border-gray-300 rounded-md',
    // ThÃªm rounded-md
    inputWrapper: 'mb-4',
    errorMessage: 'text-red-600',
    button: 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full' // ThÃªm w-full
  },
  validationMessages: {
    required: 'This is a globally defined required message'
  },
  autoSave: {
    interval: 3000,
    save: function (data) {
      return console.log('Auto-saving:', data);
    }
  },
  enableLocalStorage: true,
  resetOnSubmit: true,
  focusFirstError: true,
  debounceOnChange: 300,
  onSubmit: function (data) {
    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);
    alert(JSON.stringify(data));
  },
  onChange: function (data) {
    return console.log('Debounced change:', data);
  },
  onFormReady: function (form) {
    console.log('Form is ready:', form);
  },
  showSubmitButton: true,
  showInlineError: true,
  showErrorSummary: true
};
ComprehensiveForm.storyName = 'Comprehensive Form';
// --- Interactions for ComprehensiveForm Story ---
// ComprehensiveForm.play = async ({ canvasElement, step }) => {
//   const canvas = within(canvasElement);
//   await step('Test Basic Interactions', async () => {
//     await userEvent.type(
//       canvas.getByLabelText('First Name'),
//       ' - Updated'
//     );
//     await userEvent.type(
//       canvas.getByLabelText('Last Name'),
//       ' - Updated'
//     );
//     await userEvent.type(
//       canvas.getByLabelText('Email'),
//       ' - Updated'
//     );
//     await userEvent.type(
//       canvas.getByLabelText('Age'),
//       '1'
//     );
//     await userEvent.click(canvas.getByLabelText('Subscribe to newsletter?'));
//   });
//   await step('Test Conditional Field', async () => {
//     await userEvent.clear(canvas.getByLabelText('First Name'));
//     await userEvent.type(canvas.getByLabelText('First Name'), 'ShowDynamic');
//     await expect(canvas.getByLabelText('Dynamic Field')).toBeVisible();
//   });
//   await step('Simulate Auto-save', async () => {
//     await userEvent.type(canvas.getByLabelText('First Name'), ' - Autosaved');
//     // Wait for auto-save to trigger (3 seconds)
//     await new Promise((resolve) => setTimeout(resolve, 3100));
//   });
//   await step('Simulate Local Storage', async () => {
//     await userEvent.type(canvas.getByLabelText('Email'), ' - Local Storage');
//     // Manually trigger saving to local storage
//     window.localStorage.setItem(
//       'form-data',
//       JSON.stringify({
//         email: 'john.doe@example.com - Updated - Local Storage',
//         firstName: 'ShowDynamic - Autosaved',
//       })
//     );
//     // Reload the page to simulate reading from local storage
//     window.location.reload();
//   });
//   await step('Simulate Reset on Submit', async () => {
//     await userEvent.type(canvas.getByLabelText('Notes'), ' - Updated');
//     await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
//     // Expect the notes field to be reset to default value
//     await expect(canvas.getByLabelText('Notes')).toHaveValue(
//       'Some notes...'
//     );
//   });
//   await step('Simulate Focus First Error on Submit', async () => {
//     await userEvent.clear(canvas.getByLabelText('Password'));
//     await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));
//     // Expect the focus to be on the Password field
//     await expect(canvas.getByLabelText('Password')).toHaveFocus();
//   });
//   await step('Simulate Debounce on Change', async () => {
//     await userEvent.type(canvas.getByLabelText('Age'), '1');
//     // Wait for debounce to trigger (0.3 seconds)
//     await new Promise((resolve) => setTimeout(resolve, 400));
//   });
// };
;
const __namedExportsOrder = ["BasicInputTypes", "AdvancedInputTypes", "ValidationAndSubmission", "DynamicConfiguration", "AdvancedFeatures", "ComprehensiveForm"];
BasicInputTypes.parameters = {
  ...BasicInputTypes.parameters,
  docs: {
    ...BasicInputTypes.parameters?.docs,
    source: {
      originalSource: "args => <DynamicForm {...args} />",
      ...BasicInputTypes.parameters?.docs?.source
    }
  }
};
AdvancedInputTypes.parameters = {
  ...AdvancedInputTypes.parameters,
  docs: {
    ...AdvancedInputTypes.parameters?.docs,
    source: {
      originalSource: "args => <DynamicForm {...args} />",
      ...AdvancedInputTypes.parameters?.docs?.source
    }
  }
};
ValidationAndSubmission.parameters = {
  ...ValidationAndSubmission.parameters,
  docs: {
    ...ValidationAndSubmission.parameters?.docs,
    source: {
      originalSource: "args => <DynamicForm {...args} />",
      ...ValidationAndSubmission.parameters?.docs?.source
    }
  }
};
DynamicConfiguration.parameters = {
  ...DynamicConfiguration.parameters,
  docs: {
    ...DynamicConfiguration.parameters?.docs,
    source: {
      originalSource: "args => <DynamicForm {...args} />",
      ...DynamicConfiguration.parameters?.docs?.source
    }
  }
};
AdvancedFeatures.parameters = {
  ...AdvancedFeatures.parameters,
  docs: {
    ...AdvancedFeatures.parameters?.docs,
    source: {
      originalSource: "args => <DynamicForm {...args} />",
      ...AdvancedFeatures.parameters?.docs?.source
    }
  }
};
ComprehensiveForm.parameters = {
  ...ComprehensiveForm.parameters,
  docs: {
    ...ComprehensiveForm.parameters?.docs,
    source: {
      originalSource: "args => <DynamicForm {...args} />",
      ...ComprehensiveForm.parameters?.docs?.source
    }
  }
};

/***/ })

});
//# sourceMappingURL=DynamicForm-stories.7413f9e7795603816faa.hot-update.js.map
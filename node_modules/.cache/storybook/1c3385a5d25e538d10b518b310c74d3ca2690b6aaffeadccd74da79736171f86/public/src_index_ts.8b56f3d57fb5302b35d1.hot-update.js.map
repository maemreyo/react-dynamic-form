{"version":3,"file":"src_index_ts.8b56f3d57fb5302b35d1.hot-update.js","mappings":";;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AAgBA;;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAaA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/components/GridFormContainer/index.ts"],"sourcesContent":["// Filepath: /src/components/GridFormContainer/index.ts\n\nimport styled, { css } from 'styled-components';\nimport { FormContainer } from '../FormContainer';\n\n/**\n * Props for the GridFormContainer component.\n */\nexport type GridFormContainerProps = Pick<\n  FormLayoutProps,\n  'children' | 'className' | 'formClassNameConfig' | 'style' | 'horizontalLabel'\n> & {\n  $minWidth?: string;\n  $gap?: string;\n  $breakpoints?: { [key: string]: number }; // Define breakpoints type\n  $layoutConfig?: any;\n  $horizontalLabel?: boolean;\n};\n\n/**\n * Styled grid form container.\n */\nexport const GridFormContainer = styled(FormContainer)<GridFormContainerProps>`\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(${(props) => props.$minWidth || '250px'}, 1fr)\n  );\n  gap: ${({ $gap, theme }) => $gap || theme.space.md};\n  ${(props) => {\n    const { $breakpoints = props.theme.breakpoints } = props;\n    return Object.entries($breakpoints)\n      .sort(([, a], [, b]) => a as number - b as number) // Sort breakpoints in ascending order\n      .map(\n        ([key, value]) => css`\n          @media (min-width: ${value}px) {\n            grid-template-columns: repeat(\n              auto-fit,\n              minmax(\n                ${(props) => props.$minWidth || '250px'},\n                // Use prop or default minWidth\n                1fr\n              )\n            );\n          }\n        `\n      );\n  }}\n`;\n"],"names":[],"sourceRoot":""}
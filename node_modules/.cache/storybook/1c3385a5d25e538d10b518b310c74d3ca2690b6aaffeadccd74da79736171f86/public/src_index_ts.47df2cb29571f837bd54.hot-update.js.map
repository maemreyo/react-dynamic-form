{"version":3,"file":"src_index_ts.47df2cb29571f837bd54.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAkBA;AACA;AACA;AAAA;AAiBA;AAOA;AAIA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AASA;AA4BA;AACA;AAeA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.tsx?fcfb"],"sourcesContent":["// Filepath: /src/DynamicForm.tsx\nimport React, { useMemo } from 'react';\nimport {\n  useDynamicForm,\n  useRHFOptions,\n  useFormFields,\n  DynamicFormProvider,\n  DynamicFormProps,\n  FormClassNameConfig,\n} from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nimport { DefaultTheme } from 'styled-components';\nimport { SubmitButton } from './styles';\nimport { FlexLayout } from './features/inputs/registry/components/FlexLayout';\nimport { GridLayout } from './features/inputs/registry/components/GridLayout';\nimport { FieldErrors } from 'react-hook-form';\nimport { ErrorSummary } from './components';\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  config = {},\n  onChange,\n  onSubmit,\n  formOptions,\n  header,\n  footer,\n  readOnly = false,\n  disableForm = false,\n  showSubmitButton = true,\n  autoSave,\n  resetOnSubmit = false,\n  focusFirstError = false,\n  className,\n  formClassNameConfig = {},\n  style,\n  renderLayout,\n  layout = 'grid',\n  layoutConfig = {\n    minWidth: '300px',\n  }, // Default layoutConfig\n  horizontalLabel = false,\n  labelWidth,\n  enableLocalStorage = false,\n  debounceOnChange = 0,\n  disableAutocomplete = false,\n  showInlineError = true,\n  showErrorSummary = false,\n  validateOnBlur = false,\n  validateOnChange = true,\n  validateOnSubmit = true,\n  theme,\n  customInputs,\n  onFormReady,\n  renderSubmitButton,\n  onError,\n  renderErrorSummary,\n}) => {\n  const mergedFormOptions = useRHFOptions(\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur\n  );\n  const { formState, control, handleSubmit } = form({\n    ...formOptions,\n    defaultValues: defaultValues,\n  } as UseFormProps<FormValues>);\n  const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(\n    config, // Pass config instead of data\n    formState,\n    control,\n    validationMessages\n  );\n  \n  const onSubmitHandler = (): any => {\n    handleSubmit(\n      data => {\n        if (onSubmit) {\n          onSubmit(data);\n        }\n      },\n      (errors: FieldErrors) => {\n        if (onError) {\n          onError(errors);\n        }\n      }\n    )();\n  };\n\n  const defaultRenderErrorSummary = (\n    errors: FieldErrors,\n    formClassNameConfig: FormClassNameConfig | undefined\n  ) => {\n    return (\n      <ErrorSummary errors={errors} formClassNameConfig={formClassNameConfig} />\n    );\n  };\n\n  const LayoutComponent = useMemo(() => {\n    if (renderLayout) {\n      return renderLayout;\n    }\n    if (layout === 'flex') {\n      return FlexLayout;\n    }\n    return GridLayout;\n  }, [renderLayout, layout]);\n\n  return (\n    <ThemeProvider theme={theme || ({} as DefaultTheme)}>\n      <DynamicFormProvider form={form}>\n        <LayoutComponent\n          onSubmit={onSubmitHandler}\n          className={className}\n          formClassNameConfig={formClassNameConfig}\n          style={style}\n          layout={layout}\n          layoutConfig={layoutConfig}\n          horizontalLabel={horizontalLabel}\n        >\n          <FormRenderer\n            onSubmit={onSubmitHandler}\n            className={className}\n            formClassNameConfig={formClassNameConfig}\n            style={style}\n            layout={layout}\n            layoutConfig={layoutConfig}\n            horizontalLabel={horizontalLabel}\n            theme={theme}\n            header={header}\n            fieldsToRender={fieldsToRender}\n            fields={fields}\n            config={config}\n            footer={footer}\n            readOnly={readOnly}\n            disableForm={disableForm}\n            showSubmitButton={showSubmitButton}\n            renderSubmitButton={renderSubmitButton}\n            formOptions={formOptions}\n            showErrorSummary={showErrorSummary}\n            labelWidth={labelWidth}\n            disableAutocomplete={disableAutocomplete}\n            showInlineError={showInlineError}\n            conditionalFieldsConfig={conditionalFieldsConfig}\n            customInputs={customInputs}\n            renderErrorSummary={renderErrorSummary || defaultRenderErrorSummary}\n          />\n        </LayoutComponent>\n        {showSubmitButton &&\n          (renderSubmitButton ? (\n            renderSubmitButton(onSubmitHandler, formState.isSubmitting)\n          ) : (\n            <SubmitButton\n              type=\"submit\"\n              onClick={onSubmitHandler}\n              disabled={formState.isSubmitting}\n              className={formClassNameConfig?.button}\n            >\n              Submit\n            </SubmitButton>\n          ))}\n      </DynamicFormProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default DynamicForm;\n","// Filepath: /src/DynamicForm.tsx\nimport React, { useMemo } from 'react';\nimport {\n  useDynamicForm,\n  useRHFOptions,\n  useFormFields,\n  DynamicFormProvider,\n  DynamicFormProps,\n  FormClassNameConfig,\n} from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nimport { DefaultTheme } from 'styled-components';\nimport { SubmitButton } from './styles';\nimport { FlexLayout } from './features/inputs/registry/components/FlexLayout';\nimport { GridLayout } from './features/inputs/registry/components/GridLayout';\nimport { FieldErrors } from 'react-hook-form';\nimport { ErrorSummary } from './components';\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  config = {},\n  onChange,\n  onSubmit,\n  formOptions,\n  header,\n  footer,\n  readOnly = false,\n  disableForm = false,\n  showSubmitButton = true,\n  autoSave,\n  resetOnSubmit = false,\n  focusFirstError = false,\n  className,\n  formClassNameConfig = {},\n  style,\n  renderLayout,\n  layout = 'grid',\n  layoutConfig = {\n    minWidth: '300px',\n  }, // Default layoutConfig\n  horizontalLabel = false,\n  labelWidth,\n  enableLocalStorage = false,\n  debounceOnChange = 0,\n  disableAutocomplete = false,\n  showInlineError = true,\n  showErrorSummary = false,\n  validateOnBlur = false,\n  validateOnChange = true,\n  validateOnSubmit = true,\n  theme,\n  customInputs,\n  onFormReady,\n  renderSubmitButton,\n  onError,\n  renderErrorSummary,\n}) => {\n  const mergedFormOptions = useRHFOptions(\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur\n  );\n  const { formState, control, handleSubmit } = form({\n    ...formOptions,\n    defaultValues: defaultValues,\n  } as UseFormProps<FormValues>);\n  const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(\n    config, // Pass config instead of data\n    formState,\n    control,\n    validationMessages\n  );\n  \n  const onSubmitHandler = (): any => {\n    handleSubmit(\n      data => {\n        if (onSubmit) {\n          onSubmit(data);\n        }\n      },\n      (errors: FieldErrors) => {\n        if (onError) {\n          onError(errors);\n        }\n      }\n    )();\n  };\n\n  const defaultRenderErrorSummary = (\n    errors: FieldErrors,\n    formClassNameConfig: FormClassNameConfig | undefined\n  ) => {\n    return (\n      <ErrorSummary errors={errors} formClassNameConfig={formClassNameConfig} />\n    );\n  };\n\n  const LayoutComponent = useMemo(() => {\n    if (renderLayout) {\n      return renderLayout;\n    }\n    if (layout === 'flex') {\n      return FlexLayout;\n    }\n    return GridLayout;\n  }, [renderLayout, layout]);\n\n  return (\n    <ThemeProvider theme={theme || ({} as DefaultTheme)}>\n      <DynamicFormProvider form={form}>\n        <LayoutComponent\n          onSubmit={onSubmitHandler}\n          className={className}\n          formClassNameConfig={formClassNameConfig}\n          style={style}\n          layout={layout}\n          layoutConfig={layoutConfig}\n          horizontalLabel={horizontalLabel}\n        >\n          <FormRenderer\n            onSubmit={onSubmitHandler}\n            className={className}\n            formClassNameConfig={formClassNameConfig}\n            style={style}\n            layout={layout}\n            layoutConfig={layoutConfig}\n            horizontalLabel={horizontalLabel}\n            theme={theme}\n            header={header}\n            fieldsToRender={fieldsToRender}\n            fields={fields}\n            config={config}\n            footer={footer}\n            readOnly={readOnly}\n            disableForm={disableForm}\n            showSubmitButton={showSubmitButton}\n            renderSubmitButton={renderSubmitButton}\n            formOptions={formOptions}\n            showErrorSummary={showErrorSummary}\n            labelWidth={labelWidth}\n            disableAutocomplete={disableAutocomplete}\n            showInlineError={showInlineError}\n            conditionalFieldsConfig={conditionalFieldsConfig}\n            customInputs={customInputs}\n            renderErrorSummary={renderErrorSummary || defaultRenderErrorSummary}\n          />\n        </LayoutComponent>\n        {showSubmitButton &&\n          (renderSubmitButton ? (\n            renderSubmitButton(onSubmitHandler, formState.isSubmitting)\n          ) : (\n            <SubmitButton\n              type=\"submit\"\n              onClick={onSubmitHandler}\n              disabled={formState.isSubmitting}\n              className={formClassNameConfig?.button}\n            >\n              Submit\n            </SubmitButton>\n          ))}\n      </DynamicFormProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default DynamicForm;\n;DynamicForm.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicForm\",\"props\":{\"config\":{\"required\":false,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"The form configuration.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form data changes.\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"Optional callback function to be called when the form is submitted.\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"Optional options for react-hook-form's useForm hook.\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"Optional Yup schema for form validation.\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional header element for the form.\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element for the form.\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is read-only.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is disabled.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"Optional auto-save configuration.\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to reset the form on submit.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to focus on the first error field on submit.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"The layout type for the form.\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional layout configuration.\",\"defaultValue\":{\"value\":\"{\\n  minWidth: '300px',\\n}\",\"computed\":false}},\"renderLayout\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}\",\"signature\":{\"properties\":[{\"key\":\"children\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":true}},{\"key\":\"onSubmit\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}},\"required\":true}},{\"key\":\"className\",\"value\":{\"name\":\"string\",\"required\":false}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}},{\"key\":\"style\",\"value\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\",\"required\":false}},{\"key\":\"layout\",\"value\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}],\"required\":true}},{\"key\":\"layoutConfig\",\"value\":{\"name\":\"any\",\"required\":false}},{\"key\":\"horizontalLabel\",\"value\":{\"name\":\"boolean\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom layout renderer.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use horizontal labels.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to enable local storage for the form data.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"Optional debounce time (in ms) for the onChange callback.\",\"defaultValue\":{\"value\":\"0\",\"computed\":false}},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the form.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on blur.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on change.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on submit.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"Optional CSS class name for the form container.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"Optional inline styles for the form container.\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional theme object.\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form is ready.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form content renderer.\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form footer renderer.\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"Optional custom validators.\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"Optional custom input components.\"},\"onError\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(errors: FieldErrors) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\"},\"name\":\"errors\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional error handler function.\"},\"renderErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(errors: FieldErrors, formClassNameConfig: FormClassNameConfig | undefined) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\"},\"name\":\"errors\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom error summary renderer.\"}}};DynamicForm.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicForm\",\"props\":{\"config\":{\"required\":false,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"The form configuration.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form data changes.\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"Optional callback function to be called when the form is submitted.\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"Optional options for react-hook-form's useForm hook.\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"Optional Yup schema for form validation.\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional header element for the form.\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element for the form.\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is read-only.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is disabled.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"Optional auto-save configuration.\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to reset the form on submit.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to focus on the first error field on submit.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"The layout type for the form.\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional layout configuration.\",\"defaultValue\":{\"value\":\"{\\n  minWidth: '300px',\\n}\",\"computed\":false}},\"renderLayout\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}\",\"signature\":{\"properties\":[{\"key\":\"children\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":true}},{\"key\":\"onSubmit\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}},\"required\":true}},{\"key\":\"className\",\"value\":{\"name\":\"string\",\"required\":false}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}},{\"key\":\"style\",\"value\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\",\"required\":false}},{\"key\":\"layout\",\"value\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}],\"required\":true}},{\"key\":\"layoutConfig\",\"value\":{\"name\":\"any\",\"required\":false}},{\"key\":\"horizontalLabel\",\"value\":{\"name\":\"boolean\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom layout renderer.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use horizontal labels.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to enable local storage for the form data.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"Optional debounce time (in ms) for the onChange callback.\",\"defaultValue\":{\"value\":\"0\",\"computed\":false}},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the form.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on blur.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on change.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on submit.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"Optional CSS class name for the form container.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"Optional inline styles for the form container.\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional theme object.\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form is ready.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form content renderer.\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form footer renderer.\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"Optional custom validators.\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"Optional custom input components.\"},\"onError\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(errors: FieldErrors) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\"},\"name\":\"errors\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional error handler function.\"},\"renderErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(errors: FieldErrors, formClassNameConfig: FormClassNameConfig | undefined) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\"},\"name\":\"errors\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom error summary renderer.\"}}}"],"names":[],"sourceRoot":""}
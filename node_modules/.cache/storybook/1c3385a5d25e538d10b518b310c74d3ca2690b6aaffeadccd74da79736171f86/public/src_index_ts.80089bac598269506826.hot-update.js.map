{"version":3,"file":"src_index_ts.80089bac598269506826.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AAMA;AACA;AACA;AAEA;AAKA;AAKA;AAAA;AAAA;AAcA;AAIA;AAAA;AAAA;AAGA;AAAA;AAAA;AAeA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAIA;AAUA;AAwBA;AAOA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx?a3ac"],"sourcesContent":["// Filepath: /src/features/inputs/components/ComboBox.tsx\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  FieldConfig,\n  FormClassNameConfig,\n  FieldError,\n} from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst ComboBoxContainer = styled.div<{ className?: string | undefined }>`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul<{ className?: string | undefined }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 8px; /* Bo tròn */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n`;\n\nconst DropdownItem = styled.li<{ className?: string | u }>`\n  padding: 8px 12px; /* Giảm padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.info};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n  const filteredOptions = options\n    ? options.filter((option) =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer\n        ref={containerRef}\n        className={formClassNameConfig.comboBoxContainer}\n      >\n        <Input\n          {...field}\n          className={formClassNameConfig.comboBox}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList className={formClassNameConfig.comboBoxDropdownList}>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={`${\n                    index === highlightedIndex ? 'selected' : ''\n                  } ${formClassNameConfig.comboBoxDropdownItem}`}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem\n                className={formClassNameConfig.comboBoxDropdownItem}\n              >\n                No results found\n              </DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n","// Filepath: /src/features/inputs/components/ComboBox.tsx\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  FieldConfig,\n  FormClassNameConfig,\n  FieldError,\n} from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst ComboBoxContainer = styled.div<{ className?: string | undefined }>`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul<{ className?: string | undefined }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 8px; /* Bo tròn */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n`;\n\nconst DropdownItem = styled.li<{ className?: string | u }>`\n  padding: 8px 12px; /* Giảm padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.info};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n  const filteredOptions = options\n    ? options.filter((option) =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer\n        ref={containerRef}\n        className={formClassNameConfig.comboBoxContainer}\n      >\n        <Input\n          {...field}\n          className={formClassNameConfig.comboBox}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList className={formClassNameConfig.comboBoxDropdownList}>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={`${\n                    index === highlightedIndex ? 'selected' : ''\n                  } ${formClassNameConfig.comboBoxDropdownItem}`}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem\n                className={formClassNameConfig.comboBoxDropdownItem}\n              >\n                No results found\n              </DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n;ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}};ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}}"],"names":[],"sourceRoot":""}
{"version":3,"file":"DynamicForm-stories.9d2bd6397ff43f22205c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;;AAAA;AAAA;;;;AACA;AAEA;AAAA;;;;AACA;;AAAA;AAIA;AACA;AAAA;AAAA;;AADA;AACA;;;;;AACA;;AAPA;AASA;AAAA;;;;AACA;;AAAA;AAIA;AACA;AAEA;AAAA;AAEA;AACA;;;;;AACA;;AAZA;AAcA;AAAA;;;;AACA;;AAAA;AACA;AAAA;AAAA;;AAAA;AACA;AACA;;AADA;AACA;;;;;AAGA;;AAPA;AASA;AAAA;;;;AACA;AACA;;AADA;AACA;AACA;AAAA;AAAA;;AAAA;AACA;AACA;;AADA;AACA;;;;;AACA;;AANA;AAQA;AAAA;;;;AACA;;AAAA;AAIA;AACA;AAAA;AAAA;;AADA;AACA;;;;;AACA;;AAPA;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.stories.tsx"],"sourcesContent":["// Filepath: /src/DynamicForm.stories.tsx\nimport React from 'react';\nimport { Meta, StoryFn } from '@storybook/react';\nimport { fn } from '@storybook/test';\nimport { defaultTheme, DynamicForm } from '.';\nimport { useController, useFormContext } from 'react-hook-form';\nimport { useTheme } from './theme/ThemeProvider';\nimport { userEvent, within, expect } from '@storybook/test'; // Updated import\n\nexport default {\n  title: 'DynamicForm',\n  component: DynamicForm,\n  argTypes: {\n    // Control for 'onSubmit'\n    onSubmit: {\n      action: 'onSubmit',\n      control: false, // Hide default control\n    },\n  },\n} as Meta<typeof DynamicForm>;\n\nconst Template: StoryFn<typeof DynamicForm> = args => <DynamicForm {...args} />;\n\n// --- Examples ---\n\n// Story 1: Basic Input Types\nexport const BasicInputTypes = Template.bind({});\nBasicInputTypes.args = {\n  theme: defaultTheme,\n  config: {\n    firstName: {\n      label: 'First Name',\n      type: 'text',\n      defaultValue: 'John',\n    },\n    lastName: {\n      label: 'Last Name',\n      type: 'text',\n      defaultValue: 'Doe',\n    },\n    email: {\n      label: 'Email',\n      type: 'email',\n      defaultValue: 'john.doe@example.com',\n    },\n    age: {\n      label: 'Age',\n      type: 'number',\n      defaultValue: 30,\n    },\n    subscribe: {\n      label: 'Subscribe to newsletter?',\n      type: 'checkbox',\n      defaultValue: true,\n    },\n  },\n  onSubmit: data => {\n    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);\n  },\n  onFormReady: fn(),\n};\nBasicInputTypes.storyName = 'Basic Input Types';\n\n// Story 2: Advanced Input Types\nexport const AdvancedInputTypes = Template.bind({});\nAdvancedInputTypes.args = {\n  theme: defaultTheme,\n  config: {\n    startDate: {\n      label: 'Start Date',\n      type: 'date',\n      defaultValue: '2023-11-20',\n    },\n    startTime: {\n      label: 'Start Time',\n      type: 'time',\n      defaultValue: '09:00',\n    },\n    dateTime: {\n      label: 'Date and Time',\n      type: 'datetime-local',\n      defaultValue: '2023-11-20T09:00',\n    },\n    notes: {\n      label: 'Notes',\n      type: 'textarea',\n      defaultValue: 'Some notes...',\n    },\n    country: {\n      label: 'Country',\n      type: 'select',\n      defaultValue: 'US',\n      options: [\n        { value: 'US', label: 'United States' },\n        { value: 'CA', label: 'Canada' },\n        { value: 'UK', label: 'United Kingdom' },\n      ],\n    },\n    gender: {\n      label: 'Gender',\n      type: 'radio',\n      defaultValue: 'male',\n      options: [\n        { value: 'male', label: 'Male' },\n        { value: 'female', label: 'Female' },\n        { value: 'other', label: 'Other' },\n      ],\n    },\n    notification: {\n      label: 'Enable Notifications',\n      type: 'switch',\n      defaultValue: true,\n    },\n    favoriteFruit: {\n      label: 'Favorite Fruit',\n      type: 'combobox',\n      defaultValue: 'Apple',\n      options: [\n        { value: 'Apple', label: 'Apple' },\n        { value: 'Banana', label: 'Banana' },\n        { value: 'Orange', label: 'Orange' },\n      ],\n    },\n  },\n  onSubmit: data => {\n    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);\n  },\n  onFormReady: fn(),\n};\nAdvancedInputTypes.storyName = 'Advanced Input Types';\n\n// Story 3: Validation and Form Submission\nexport const ValidationAndSubmission = Template.bind({});\nValidationAndSubmission.args = {\n  theme: defaultTheme,\n  config: {\n    requiredField: {\n      label: 'Required Field',\n      type: 'text',\n      validation: {\n        required: { value: true, message: 'This field is required' },\n      },\n    },\n    minLengthField: {\n      label: 'Min Length (3)',\n      type: 'text',\n      validation: {\n        minLength: { value: 3, message: 'Minimum length is 3' },\n      },\n    },\n    maxLengthField: {\n      label: 'Max Length (5)',\n      type: 'text',\n      validation: {\n        maxLength: { value: 5, message: 'Maximum length is 5' },\n      },\n    },\n    email: {\n      label: 'Email',\n      type: 'email',\n      validation: {\n        required: { value: true, message: 'This field is required' },\n        pattern: {\n          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n          message: 'Invalid email address',\n        },\n      },\n    },\n    age: {\n      label: 'Age',\n      type: 'number',\n      validation: {\n        min: { value: 18, message: 'Must be 18 or older' },\n        max: { value: 100, message: 'Must be 100 or younger' },\n      },\n    },\n    password: {\n      label: 'Password',\n      type: 'text',\n      validation: {\n        required: {\n          value: true,\n          message: 'This field is required',\n        },\n        minLength: {\n          value: 8,\n          message: 'Password must be at least 8 characters long',\n        },\n        validate: (value: string) => {\n          if (!/[A-Z]/.test(value)) {\n            return 'Password must contain at least one uppercase letter';\n          }\n          if (!/[a-z]/.test(value)) {\n            return 'Password must contain at least one lowercase letter';\n          }\n          if (!/[0-9]/.test(value)) {\n            return 'Password must contain at least one number';\n          }\n          if (!/[^A-Za-z0-9]/.test(value)) {\n            return 'Password must contain at least one special character';\n          }\n          return undefined;\n        },\n      },\n    },\n  },\n  onSubmit: data => {\n    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);\n  },\n  onFormReady: fn(),\n};\nValidationAndSubmission.storyName = 'Validation and Form Submission';\n\n// Story 4: Dynamic Form Configuration\nexport const DynamicConfiguration = Template.bind({});\nDynamicConfiguration.args = {\n  theme: defaultTheme,\n  config: {\n    firstName: {\n      label: 'First Name',\n      type: 'text',\n      defaultValue: 'John',\n      classNameConfig: {\n        label: 'custom-label',\n        input: 'custom-input',\n      },\n    },\n    dynamicField: {\n      label: 'Dynamic Field',\n      type: 'text',\n      defaultValue: '',\n      conditional: {\n        when: 'firstName',\n        operator: 'is',\n        value: 'Show',\n        fields: ['dynamicField'],\n      },\n    },\n  },\n  onSubmit: data => {\n    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);\n  },\n  onFormReady: fn(),\n};\nDynamicConfiguration.storyName = 'Dynamic Form Configuration';\n\n// Story 5: Advanced Features (Auto-save, Local Storage, Reset, Focus Error, Debounce)\nexport const AdvancedFeatures = Template.bind({});\nAdvancedFeatures.args = {\n  theme: defaultTheme,\n  config: {\n    autoSaveField: {\n      label: 'Auto-save Field',\n      type: 'text',\n      defaultValue: '',\n    },\n    localStorageField: {\n      label: 'Local Storage Field',\n      type: 'text',\n      defaultValue: '',\n    },\n    resetField: {\n      label: 'Reset Field',\n      type: 'text',\n      defaultValue: 'Initial Value',\n    },\n    errorField: {\n      label: 'Error Field',\n      type: 'text',\n      validation: {\n        required: { value: true, message: 'This field is required' },\n      },\n    },\n    debounceField: {\n      label: 'Debounce Field',\n      type: 'text',\n      defaultValue: '',\n    },\n  },\n  autoSave: {\n    interval: 5000,\n    save: data => console.log('Auto-saving:', data),\n  },\n  enableLocalStorage: true,\n  resetOnSubmit: true,\n  focusFirstError: true,\n  debounceOnChange: 500,\n  onSubmit: data => {\n    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);\n  },\n  onChange: data => console.log('Debounced change:', data),\n  onFormReady: form => {\n    // Reset button\n    const resetButton = document.createElement('button');\n    resetButton.textContent = 'Reset Form';\n    resetButton.onclick = () => form.reset();\n    document.body.appendChild(resetButton);\n  },\n};\nAdvancedFeatures.storyName =\n  'Advanced Features (Auto-save, Local Storage, Reset, Focus Error, Debounce)';\n\n// Interactions for AdvancedFeatures Story\nAdvancedFeatures.play = async ({ canvasElement, step }) => {\n  const canvas = within(canvasElement);\n\n  await step('Simulate Auto-save', async () => {\n    await userEvent.type(\n      canvas.getByLabelText('Auto-save Field'),\n      'Auto-save Test'\n    );\n    // Wait for auto-save to trigger (5 seconds)\n    await new Promise(resolve => setTimeout(resolve, 5100));\n  });\n\n  await step('Simulate Local Storage', async () => {\n    await userEvent.type(\n      canvas.getByLabelText('Local Storage Field'),\n      'Local Storage Test'\n    );\n    // Manually trigger saving to local storage (for demonstration)\n    window.localStorage.setItem(\n      'form-data',\n      JSON.stringify({ localStorageField: 'Local Storage Test' })\n    );\n    // Reload the page to simulate reading from local storage\n    window.location.reload();\n  });\n\n  await step('Simulate Reset on Submit', async () => {\n    await userEvent.type(canvas.getByLabelText('Reset Field'), 'New Value');\n    await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));\n    // Expect the field to be reset to 'Initial Value'\n    await expect(canvas.getByLabelText('Reset Field')).toHaveValue(\n      'Initial Value'\n    );\n  });\n\n  await step('Simulate Focus First Error on Submit', async () => {\n    // Clear the required field to trigger an error\n    await userEvent.clear(canvas.getByLabelText('Error Field'));\n    await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));\n    // Expect the focus to be on the Error Field\n    await expect(canvas.getByLabelText('Error Field')).toHaveFocus();\n  });\n\n  await step('Simulate Debounce on Change', async () => {\n    await userEvent.type(\n      canvas.getByLabelText('Debounce Field'),\n      'Debounce Test'\n    );\n    // Wait for debounce to trigger (0.5 seconds)\n    await new Promise(resolve => setTimeout(resolve, 600));\n  });\n};\n// Story 6: Comprehensive Form\nexport const ComprehensiveForm = Template.bind({});\nComprehensiveForm.args = {\n  theme: defaultTheme,\n  config: {\n    // Basic Inputs\n    firstName: {\n      label: 'First Name',\n      type: 'text',\n      defaultValue: 'Comprehensive',\n      validation: {\n        required: { value: true, message: 'This field is required' },\n      },\n    },\n    lastName: {\n      label: 'Last Name',\n      type: 'text',\n      defaultValue: 'Test',\n      validation: {\n        required: { value: true, message: 'This field is required' },\n      },\n    },\n    email: {\n      label: 'Email',\n      type: 'email',\n      defaultValue: 'comprehensive@test.com',\n      validation: {\n        required: { value: true, message: 'This field is required' },\n        pattern: {\n          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n          message: 'Invalid email address',\n        },\n      },\n    },\n    age: {\n      label: 'Age',\n      type: 'number',\n      defaultValue: 25,\n      validation: {\n        required: { value: true, message: 'This field is required' },\n        min: { value: 18, message: 'You must be at least 18 years old' },\n        max: { value: 99, message: 'You must be at most 99 years old' },\n      },\n    },\n    // Advanced Inputs\n    startDate: {\n      label: 'Start Date',\n      type: 'date',\n      defaultValue: '2023-11-21',\n    },\n    startTime: {\n      label: 'Start Time',\n      type: 'time',\n      defaultValue: '10:00',\n    },\n    notes: {\n      label: 'Notes',\n      type: 'textarea',\n      defaultValue: 'Comprehensive test notes',\n    },\n    country: {\n      label: 'Country',\n      type: 'select',\n      defaultValue: 'CA',\n      options: [\n        { value: 'US', label: 'United States' },\n        { value: 'CA', label: 'Canada' },\n        { value: 'UK', label: 'United Kingdom' },\n      ],\n    },\n    gender: {\n      label: 'Gender',\n      type: 'radio',\n      defaultValue: 'female',\n      options: [\n        { value: 'male', label: 'Male' },\n        { value: 'female', label: 'Female' },\n        { value: 'other', label: 'Other' },\n      ],\n    },\n    // Conditional Field\n    dynamicField: {\n      label: 'Dynamic Field',\n      type: 'text',\n      defaultValue: '',\n      conditional: {\n        when: 'firstName',\n        operator: 'is',\n        value: 'ShowDynamic',\n        fields: ['dynamicField'],\n      },\n    },\n    // Validation\n    password: {\n      label: 'Password',\n      type: 'text',\n      validation: {\n        required: {\n          value: true,\n          message: 'This field is required',\n        },\n        minLength: {\n          value: 8,\n          message: 'Password must be at least 8 characters long',\n        },\n        validate: (value: string) => {\n          if (!/[A-Z]/.test(value)) {\n            return 'Password must contain at least one uppercase letter';\n          }\n          if (!/[a-z]/.test(value)) {\n            return 'Password must contain at least one lowercase letter';\n          }\n          if (!/[0-9]/.test(value)) {\n            return 'Password must contain at least one number';\n          }\n          if (!/[^A-Za-z0-9]/.test(value)) {\n            return 'Password must contain at least one special character';\n          }\n          return undefined;\n        },\n      },\n    },\n  },\n  autoSave: {\n    interval: 3000,\n    save: data => console.log('Auto-saving:', data),\n  },\n  enableLocalStorage: true,\n  resetOnSubmit: true,\n  focusFirstError: true,\n  debounceOnChange: 300,\n  onSubmit: data => {\n    console.log('ðŸš€ ~ file: DynamicForm.stories.tsx ~ data:', data);\n  },\n  onChange: data => console.log('Debounced change:', data),\n  onFormReady: fn(),\n};\nComprehensiveForm.storyName = 'Comprehensive Form';\n\n// // Interactions for ComprehensiveForm Story\n// ComprehensiveForm.play = async ({ canvasElement, step }) => {\n//   const canvas = within(canvasElement);\n\n//   await step('Fill and Submit Form', async () => {\n//     await userEvent.type(canvas.getByLabelText('First Name'), 'John');\n//     await userEvent.type(canvas.getByLabelText('Last Name'), 'Doe');\n//     await userEvent.type(\n//       canvas.getByLabelText('Email'),\n//       'john.doe@example.com'\n//     );\n//     await userEvent.type(canvas.getByLabelText('Age'), '30');\n//     await userEvent.click(canvas.getByLabelText('Start Date'));\n//     await userEvent.type(canvas.getByLabelText('Start Date'), '2023-11-22');\n//     await userEvent.click(canvas.getByLabelText('Start Time'));\n//     await userEvent.type(canvas.getByLabelText('Start Time'), '10:00');\n//     await userEvent.type(\n//       canvas.getByLabelText('Notes'),\n//       'Comprehensive form test notes'\n//     );\n//     await userEvent.selectOptions(canvas.getByLabelText('Country'), 'US');\n//     await userEvent.click(canvas.getByLabelText('Male'));\n//     await userEvent.type(canvas.getByLabelText('Password'), 'Pass123!');\n\n//     await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));\n//   });\n\n//   await step('Trigger Conditional Field', async () => {\n//     await userEvent.clear(canvas.getByLabelText('First Name'));\n//     await userEvent.type(canvas.getByLabelText('First Name'), 'ShowDynamic');\n//     await expect(canvas.getByLabelText('Dynamic Field')).toBeVisible();\n//   });\n\n//   await step('Simulate Auto-save', async () => {\n//     await userEvent.type(canvas.getByLabelText('First Name'), ' - Autosaved');\n//     // Wait for auto-save to trigger (3 seconds)\n//     await new Promise(resolve => setTimeout(resolve, 3100));\n//   });\n\n//   await step('Simulate Local Storage', async () => {\n//     await userEvent.type(canvas.getByLabelText('Email'), ' - Local Storage');\n//     // Manually trigger saving to local storage\n//     window.localStorage.setItem(\n//       'form-data',\n//       JSON.stringify({\n//         email: 'john.doe@example.com - Local Storage',\n//         firstName: 'ShowDynamic - Autosaved',\n//       })\n//     );\n//     // Reload the page to simulate reading from local storage\n//     window.location.reload();\n//   });\n\n//   await step('Simulate Reset on Submit', async () => {\n//     await userEvent.type(canvas.getByLabelText('Notes'), ' - Updated');\n//     await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));\n//     // Expect the notes field to be reset to default value\n//     await expect(canvas.getByLabelText('Notes')).toHaveValue(\n//       'Comprehensive test notes'\n//     );\n//   });\n\n//   await step('Simulate Focus First Error on Submit', async () => {\n//     await userEvent.clear(canvas.getByLabelText('Password'));\n//     await userEvent.click(canvas.getByRole('button', { name: 'Submit' }));\n//     // Expect the focus to be on the Password field\n//     await expect(canvas.getByLabelText('Password')).toHaveFocus();\n//   });\n\n//   await step('Simulate Debounce on Change', async () => {\n//     await userEvent.type(canvas.getByLabelText('Age'), '1');\n//     // Wait for debounce to trigger (0.3 seconds)\n//     await new Promise(resolve => setTimeout(resolve, 400));\n//   });\n// };\n"],"names":[],"sourceRoot":""}
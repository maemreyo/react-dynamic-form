{"version":3,"file":"src_index_ts.0c42b8a3a12690b32547.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAQA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AAKA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/fieldUtils.ts"],"sourcesContent":["// src/features/dynamic-form/utils/fieldUtils.ts\nimport {\n  FormField,\n  FieldError,\n  FormValues,\n  FieldConfig,\n  ValidationMessages,\n} from '../types';\nimport { getInputTypeFromValue } from '../../inputs/utils';\nimport { getErrorMessage } from './validationUtils';\nimport { get } from 'react-hook-form';\nimport { FormState } from 'react-hook-form';\n\n/**\n * Generates the form fields array based on the flattened config and form state.\n *\n * @param flattenedConfig - The flattened form configuration.\n * @param formState - The `react-hook-form` form state.\n * @param globalValidationMessages - Optional global validation messages.\n * @returns The form fields array.\n */\nexport const getFields = (\n  flattenedConfig: any,\n  formState: FormState<FormValues>,\n  globalValidationMessages: ValidationMessages | undefined\n): FormField[] => {\n  return Object.entries(flattenedConfig).map(([key, fieldConfig]) => {\n    // Retrieve the default value from fieldConfig\n    const defaultValue = (fieldConfig as FieldConfig).defaultValue;\n\n    const inputType =\n      (fieldConfig as FieldConfig).type || getInputTypeFromValue(defaultValue);\n\n    const fieldError = get(formState.errors, key) as FieldError | undefined;\n    const errorMessage = getErrorMessage(\n      fieldConfig as FieldConfig,\n      fieldError,\n      {},\n      globalValidationMessages\n    );\n\n    return {\n      label: (fieldConfig as FieldConfig).label,\n      id: key,\n      type: inputType,\n      error: errorMessage\n        ? {\n            ...fieldError,\n            message: errorMessage,\n            type: fieldError?.type || '',\n          } // Merge errorMessage into fieldError and ensure type is always defined\n        : fieldError, // Use the unwrapped fieldError\n    };\n  });\n};\n"],"names":[],"sourceRoot":""}
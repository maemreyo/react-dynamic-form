{"version":3,"file":"src_index_tsx.1e9c884cb04b19e0d6b1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAGA;;;;;;;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AAGA;AACA;AAuBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAWA;AACA;AACA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAYA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAeA;AAYA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAWA;AAQA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AAKA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAOA;AAOA;AAOA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AAEA;AACA;AAEA;AAKA;AAKA;AAAA;AAAA;AAWA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAeA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAOA;AACA;AAKA;AACA;AAUA;AAkBA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACjOA;AACA;AASA;AAEA;AACA;AAeA;;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AAIA;AACA;AAGA;AAYA;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAkBA;;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AASA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AAMA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACtLA;AACA;AACA;AAEA;AACA;AAGA;AAKA;AAOA;AAIA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAeA;AAAA;AAAA;AAKA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAMA;AACA;AAKA;AAGA;AAQA;AAIA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAQA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAOA;AACA;AAKA;AAWA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AAIA;AACA;AAGA;AAQA;AAMA;AAAA;AAAA;AAIA;AAAA;AAAA;AAQA;AAwBA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AASA;AACA;AACA;AAEA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAIA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;AC3DA;AAGA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAIA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;ACvCA;AAEA;AACA;AAYA;AACA;AAQA;AAIA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AC1CA;AAEA;AACA;AAYA;AACA;AAQA;AAIA;AAWA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAIA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AASA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AAIA;AAEA;;AAEA;AACA;AAEA;;;;AAIA;AACA;AAUA;AAAA;AACA;AAEA;AAEA;AAGA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/formUtils.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx?4b39","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormContent.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormContent.tsx?5473","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormFooter.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormFooter.tsx?3af5","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/CheckboxInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/CheckboxInput.tsx?866a","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx?a3ac","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/InputRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/InputRenderer.tsx?0fdf","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/NumberInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/NumberInput.tsx?2428","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/RadioInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/RadioInput.tsx?efea","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SelectInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SelectInput.tsx?bc00","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SwitchInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SwitchInput.tsx?0a0e","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/InputRegistry.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/LayoutRegistry.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/FlexLayout.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/FlexLayout.tsx?870e","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/GridLayout.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/GridLayout.tsx?2c2f","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/validation/ValidationSchemaRegistry.ts","webpack://@matthew.ngo/react-dynamic-form/./src/index.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/index.tsx?2631","webpack://@matthew.ngo/react-dynamic-form/./src/theme/ThemeProvider.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/theme/ThemeProvider.tsx?e6b7"],"sourcesContent":["// src/features/dynamic-form/utils/formUtils.ts\nimport { FormConfig } from '../types';\n\n/**\n * Flattens a nested object into a single-level object.\n *\n * @param obj - The object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened object.\n * @returns The flattened object.\n */\nexport const flattenObject = (\n  obj: Record<string, any>,\n  parentKey = '',\n  result: Record<string, any> = {}\n): Record<string, any> => {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n        flattenObject(obj[key], newKey, result);\n      } else {\n        result[newKey] = obj[key];\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Flattens a nested config object into a single-level object.\n *\n * @param config - The config object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened config object.\n * @returns The flattened config object.\n */\nexport const flattenConfig = (\n  config: FormConfig,\n  parentKey = '',\n  result: FormConfig = {}\n): FormConfig => {\n  for (const key in config) {\n    if (Object.prototype.hasOwnProperty.call(config, key)) {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      const fieldConfig = config[key];\n      if (fieldConfig.fields) {\n        flattenConfig(fieldConfig.fields, newKey, result);\n      } else {\n        result[newKey] = fieldConfig;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Debounces a function.\n *\n * @param func - The function to debounce.\n * @param wait - The debounce time in milliseconds.\n * @returns The debounced function.\n */\nexport const debounce = (func: Function, wait: number) => {\n  let timeout: NodeJS.Timeout | null;\n  return function(...args: any[]) {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n/**\n * Saves data to localStorage.\n *\n * @param key - The key to store the data under.\n * @param data - The data to store.\n */\nexport const saveToLocalStorage = (key: string, data: any) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\n/**\n * Loads data from localStorage.\n *\n * @param key - The key to load the data from.\n * @returns The loaded data, or null if no data is found.\n */\nexport const loadFromLocalStorage = (key: string): any | null => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : null;\n};\n","// src/features/dynamic-form/utils/index.ts\nexport * from './formUtils';\nexport * from './validationUtils';\nexport * from './fieldUtils';\nexport * from './conditionalRendering';","// Filepath: /src/features/form-renderer/FormRenderer.tsx\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\n\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs} // Pass customInputs to FormContent\n    />\n  );\n\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n\n  return (\n    <FormLayout\n      onSubmit={handleSubmit(onSubmit)}\n      className={className}\n      formClassNameConfig={formClassNameConfig}\n      style={style}\n      layout={layout}\n      layoutConfig={layoutConfig}\n      horizontalLabel={horizontalLabel}\n      theme={theme}\n    >\n      {header}\n      {content}\n      {footerContent}\n    </FormLayout>\n  );\n};\n\nexport default FormRenderer;\n","// Filepath: /src/features/form-renderer/FormRenderer.tsx\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\n\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs} // Pass customInputs to FormContent\n    />\n  );\n\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n\n  return (\n    <FormLayout\n      onSubmit={handleSubmit(onSubmit)}\n      className={className}\n      formClassNameConfig={formClassNameConfig}\n      style={style}\n      layout={layout}\n      layoutConfig={layoutConfig}\n      horizontalLabel={horizontalLabel}\n      theme={theme}\n    >\n      {header}\n      {content}\n      {footerContent}\n    </FormLayout>\n  );\n};\n\nexport default FormRenderer;\n;FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"}}};FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"}}}","// Filepath: /src/features/form-renderer/components/FormContent.tsx\nimport React, { useEffect } from 'react';\nimport { FormValues, FieldError } from '../../dynamic-form/types'; // Import FieldError\nimport { useFormContext } from 'react-hook-form';\nimport { InputWrapper } from '../../../styles';\nimport { InputRenderer } from '../../inputs/components';\nimport { FormContentProps } from '../types';\nimport { CommonInputProps } from '../../inputs';\n\nconst FormContent: React.FC<FormContentProps> = ({\n  fieldsToRender,\n  fields,\n  config,\n  formClassNameConfig,\n  horizontalLabel,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderInput,\n  conditionalFieldsConfig,\n  customInputs,\n}) => {\n  const {\n    register,\n    unregister,\n    formState: { errors },\n  } = useFormContext<FormValues>();\n\n  useEffect(() => {\n    fields.forEach(field => {\n      const fieldConfig = config[field.id] || {};\n      if (fieldsToRender.includes(field.id)) {\n        register(field.id, fieldConfig.validation);\n      } else {\n        unregister(field.id);\n      }\n    });\n  }, [register, unregister, config]);\n\n  return (\n    <>\n      {fields\n        .filter(field => fieldsToRender.includes(field.id))\n        .map(field => {\n          // Access the nested error object correctly\n          const fieldError = errors[field.id] as FieldError | undefined;\n\n          const fieldConfig = config[field.id] || {};\n          const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n          const formClassName = formClassNameConfig || {};\n\n          const commonInputProps: CommonInputProps = {\n            id: field.id,\n            fieldConfig,\n            formClassNameConfig,\n            showInlineError,\n            horizontalLabel,\n            labelWidth,\n            error: fieldError,\n            disableAutocomplete,\n          };\n\n          const inputElement = renderInput ? (\n            renderInput(field, fieldConfig, commonInputProps)\n          ) : (\n            <InputRenderer\n              field={field}\n              config={config}\n              formClassNameConfig={formClassNameConfig}\n              disableAutocomplete={disableAutocomplete}\n              showInlineError={showInlineError}\n              horizontalLabel={horizontalLabel}\n              labelWidth={labelWidth}\n              customInputs={customInputs} // Pass customInputs here\n            />\n          );\n\n          return (\n            <InputWrapper\n              key={field.id}\n              $horizontalLabel={horizontalLabel}\n              $labelWidth={labelWidth}\n              className={\n                fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n              }\n            >\n              {inputElement}\n            </InputWrapper>\n          );\n        })}\n    </>\n  );\n};\n\nexport default FormContent;\n","// Filepath: /src/features/form-renderer/components/FormContent.tsx\nimport React, { useEffect } from 'react';\nimport { FormValues, FieldError } from '../../dynamic-form/types'; // Import FieldError\nimport { useFormContext } from 'react-hook-form';\nimport { InputWrapper } from '../../../styles';\nimport { InputRenderer } from '../../inputs/components';\nimport { FormContentProps } from '../types';\nimport { CommonInputProps } from '../../inputs';\n\nconst FormContent: React.FC<FormContentProps> = ({\n  fieldsToRender,\n  fields,\n  config,\n  formClassNameConfig,\n  horizontalLabel,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderInput,\n  conditionalFieldsConfig,\n  customInputs,\n}) => {\n  const {\n    register,\n    unregister,\n    formState: { errors },\n  } = useFormContext<FormValues>();\n\n  useEffect(() => {\n    fields.forEach(field => {\n      const fieldConfig = config[field.id] || {};\n      if (fieldsToRender.includes(field.id)) {\n        register(field.id, fieldConfig.validation);\n      } else {\n        unregister(field.id);\n      }\n    });\n  }, [register, unregister, config]);\n\n  return (\n    <>\n      {fields\n        .filter(field => fieldsToRender.includes(field.id))\n        .map(field => {\n          // Access the nested error object correctly\n          const fieldError = errors[field.id] as FieldError | undefined;\n\n          const fieldConfig = config[field.id] || {};\n          const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n          const formClassName = formClassNameConfig || {};\n\n          const commonInputProps: CommonInputProps = {\n            id: field.id,\n            fieldConfig,\n            formClassNameConfig,\n            showInlineError,\n            horizontalLabel,\n            labelWidth,\n            error: fieldError,\n            disableAutocomplete,\n          };\n\n          const inputElement = renderInput ? (\n            renderInput(field, fieldConfig, commonInputProps)\n          ) : (\n            <InputRenderer\n              field={field}\n              config={config}\n              formClassNameConfig={formClassNameConfig}\n              disableAutocomplete={disableAutocomplete}\n              showInlineError={showInlineError}\n              horizontalLabel={horizontalLabel}\n              labelWidth={labelWidth}\n              customInputs={customInputs} // Pass customInputs here\n            />\n          );\n\n          return (\n            <InputWrapper\n              key={field.id}\n              $horizontalLabel={horizontalLabel}\n              $labelWidth={labelWidth}\n              className={\n                fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n              }\n            >\n              {inputElement}\n            </InputWrapper>\n          );\n        })}\n    </>\n  );\n};\n\nexport default FormContent;\n;FormContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormContent\",\"props\":{\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"},\"renderInput\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"register\":{\"required\":true,\"tsType\":{\"name\":\"UseFormRegister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormRegister<FormValues>\"},\"description\":\"\"},\"unregister\":{\"required\":true,\"tsType\":{\"name\":\"UseFormUnregister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormUnregister<FormValues>\"},\"description\":\"\"}}};FormContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormContent\",\"props\":{\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"},\"renderInput\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"register\":{\"required\":true,\"tsType\":{\"name\":\"UseFormRegister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormRegister<FormValues>\"},\"description\":\"\"},\"unregister\":{\"required\":true,\"tsType\":{\"name\":\"UseFormUnregister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormUnregister<FormValues>\"},\"description\":\"\"}}}","// src/features/form-renderer/components/FormFooter.tsx\nimport React from 'react';\nimport { SubmitButton } from '../../../styles';\nimport { ErrorSummary } from '../../../components';\nimport { FormFooterProps } from '../types';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst FormFooter: React.FC<FormFooterProps> = ({\n  footer,\n  showSubmitButton,\n  renderSubmitButton,\n  isSubmitting,\n  showErrorSummary,\n  errors,\n  formClassNameConfig,\n}) => {\n  const theme = useTheme();\n  return (\n    <>\n      {footer}\n      {showSubmitButton &&\n        (renderSubmitButton ? (\n          renderSubmitButton(() => {}, isSubmitting)\n        ) : (\n          <SubmitButton\n            type=\"submit\"\n            disabled={isSubmitting}\n            className={formClassNameConfig?.button}\n          >\n            Submit\n          </SubmitButton>\n        ))}\n      {showErrorSummary && Object.keys(errors).length > 0 && (\n        <ErrorSummary\n          errors={errors}\n          formClassNameConfig={formClassNameConfig}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FormFooter;\n","// src/features/form-renderer/components/FormFooter.tsx\nimport React from 'react';\nimport { SubmitButton } from '../../../styles';\nimport { ErrorSummary } from '../../../components';\nimport { FormFooterProps } from '../types';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst FormFooter: React.FC<FormFooterProps> = ({\n  footer,\n  showSubmitButton,\n  renderSubmitButton,\n  isSubmitting,\n  showErrorSummary,\n  errors,\n  formClassNameConfig,\n}) => {\n  const theme = useTheme();\n  return (\n    <>\n      {footer}\n      {showSubmitButton &&\n        (renderSubmitButton ? (\n          renderSubmitButton(() => {}, isSubmitting)\n        ) : (\n          <SubmitButton\n            type=\"submit\"\n            disabled={isSubmitting}\n            className={formClassNameConfig?.button}\n          >\n            Submit\n          </SubmitButton>\n        ))}\n      {showErrorSummary && Object.keys(errors).length > 0 && (\n        <ErrorSummary\n          errors={errors}\n          formClassNameConfig={formClassNameConfig}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FormFooter;\n;FormFooter.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormFooter\",\"props\":{\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: () => void,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"() => void\",\"signature\":{\"arguments\":[],\"return\":{\"name\":\"void\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"isSubmitting\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"errors\":{\"required\":true,\"tsType\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"}}};FormFooter.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormFooter\",\"props\":{\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: () => void,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"() => void\",\"signature\":{\"arguments\":[],\"return\":{\"name\":\"void\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"isSubmitting\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"errors\":{\"required\":true,\"tsType\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"}}}","// src/features/inputs/components/CheckboxInput.tsx\nimport React from 'react';\nimport { Input, Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst CheckboxInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation as any,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          <Input\n            {...field}\n            className={fieldClassNameConfig.input || formClassName.input}\n            type=\"checkbox\"\n            id={id}\n            checked={!!field.value}\n          />\n          {label}\n          {/* This is handled in InputRenderer now:\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )} */}\n        </Label>\n      )}\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default CheckboxInput;\n","// src/features/inputs/components/CheckboxInput.tsx\nimport React from 'react';\nimport { Input, Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst CheckboxInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation as any,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          <Input\n            {...field}\n            className={fieldClassNameConfig.input || formClassName.input}\n            type=\"checkbox\"\n            id={id}\n            checked={!!field.value}\n          />\n          {label}\n          {/* This is handled in InputRenderer now:\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )} */}\n        </Label>\n      )}\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default CheckboxInput;\n;CheckboxInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"CheckboxInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};CheckboxInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"CheckboxInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { FieldConfig, FormClassNameConfig, FieldError } from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\n\nconst ComboBoxContainer = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 4px;\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst DropdownItem = styled.li`\n  padding: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n  }\n\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.primary};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig?: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n\n  const filteredOptions = options\n    ? options.filter(option =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex(prevIndex =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex(prevIndex =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer ref={containerRef}>\n        <Input\n          {...field}\n          className={fieldClassNameConfig.input || formClassName.input}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={index === highlightedIndex ? 'selected' : ''}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem>No results found</DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { FieldConfig, FormClassNameConfig, FieldError } from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\n\nconst ComboBoxContainer = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 4px;\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst DropdownItem = styled.li`\n  padding: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n  }\n\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.primary};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig?: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n\n  const filteredOptions = options\n    ? options.filter(option =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex(prevIndex =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex(prevIndex =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer ref={containerRef}>\n        <Input\n          {...field}\n          className={fieldClassNameConfig.input || formClassName.input}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={index === highlightedIndex ? 'selected' : ''}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem>No results found</DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n;ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}};ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}}","// Filepath: /src/features/inputs/components/InputRenderer.tsx\nimport React from 'react';\nimport {\n  FormField,\n  FormConfig,\n  FormClassNameConfig,\n  RenderLabelProps,\n  RenderErrorMessageProps,\n  InputComponentMap,\n} from '../../dynamic-form/types';\nimport { getInputComponent } from '../registry/InputRegistry';\nimport { CommonInputProps, CustomInputProps } from '../types';\nimport { ErrorMessage } from '../../../styles';\nimport { useFormContext } from 'react-hook-form';\n\ninterface InputRendererProps {\n  field: FormField;\n  config: FormConfig;\n  formClassNameConfig: FormClassNameConfig;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  renderLabel?: RenderLabelProps;\n  renderErrorMessage?: RenderErrorMessageProps;\n  customInputs?: InputComponentMap;\n}\n\nconst InputRenderer: React.FC<InputRendererProps> = ({\n  field,\n  config,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  renderErrorMessage,\n  customInputs,\n}) => {\n  const { id, type, error } = field;\n  const fieldConfig = config[id] || {};\n  const { getValues } = useFormContext();\n  // Prioritize custom input components\n  const CustomInputComponent = customInputs?.[type];\n  const RegisteredInputComponent = getInputComponent(type);\n  const InputComponent = CustomInputComponent || RegisteredInputComponent;\n\n  const commonInputProps: CommonInputProps = {\n    id,\n    fieldConfig,\n    formClassNameConfig,\n    showInlineError,\n    horizontalLabel,\n    labelWidth,\n    error,\n    disableAutocomplete,\n  };\n\n  // Render error message using renderErrorMessage prop or default\n  const errorMessageElement =\n    showInlineError && error && renderErrorMessage\n      ? renderErrorMessage(error, formClassNameConfig)\n      : showInlineError && error\n      ? React.createElement(ErrorMessage, {\n          className:\n            fieldConfig.classNameConfig?.errorMessage ||\n            formClassNameConfig?.errorMessage,\n          children: error.message,\n        })\n      : null;\n\n  if (!InputComponent) {\n    console.warn(`No input component found for type: ${type}`);\n    return null;\n  }\n\n  return (\n    <>\n      {/* Cast to CustomInputProps for custom components */}\n      <InputComponent {...(commonInputProps as CustomInputProps)} />\n      {errorMessageElement}\n    </>\n  );\n};\n\nexport default InputRenderer;\n","// Filepath: /src/features/inputs/components/InputRenderer.tsx\nimport React from 'react';\nimport {\n  FormField,\n  FormConfig,\n  FormClassNameConfig,\n  RenderLabelProps,\n  RenderErrorMessageProps,\n  InputComponentMap,\n} from '../../dynamic-form/types';\nimport { getInputComponent } from '../registry/InputRegistry';\nimport { CommonInputProps, CustomInputProps } from '../types';\nimport { ErrorMessage } from '../../../styles';\nimport { useFormContext } from 'react-hook-form';\n\ninterface InputRendererProps {\n  field: FormField;\n  config: FormConfig;\n  formClassNameConfig: FormClassNameConfig;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  renderLabel?: RenderLabelProps;\n  renderErrorMessage?: RenderErrorMessageProps;\n  customInputs?: InputComponentMap;\n}\n\nconst InputRenderer: React.FC<InputRendererProps> = ({\n  field,\n  config,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  renderErrorMessage,\n  customInputs,\n}) => {\n  const { id, type, error } = field;\n  const fieldConfig = config[id] || {};\n  const { getValues } = useFormContext();\n  // Prioritize custom input components\n  const CustomInputComponent = customInputs?.[type];\n  const RegisteredInputComponent = getInputComponent(type);\n  const InputComponent = CustomInputComponent || RegisteredInputComponent;\n\n  const commonInputProps: CommonInputProps = {\n    id,\n    fieldConfig,\n    formClassNameConfig,\n    showInlineError,\n    horizontalLabel,\n    labelWidth,\n    error,\n    disableAutocomplete,\n  };\n\n  // Render error message using renderErrorMessage prop or default\n  const errorMessageElement =\n    showInlineError && error && renderErrorMessage\n      ? renderErrorMessage(error, formClassNameConfig)\n      : showInlineError && error\n      ? React.createElement(ErrorMessage, {\n          className:\n            fieldConfig.classNameConfig?.errorMessage ||\n            formClassNameConfig?.errorMessage,\n          children: error.message,\n        })\n      : null;\n\n  if (!InputComponent) {\n    console.warn(`No input component found for type: ${type}`);\n    return null;\n  }\n\n  return (\n    <>\n      {/* Cast to CustomInputProps for custom components */}\n      <InputComponent {...(commonInputProps as CustomInputProps)} />\n      {errorMessageElement}\n    </>\n  );\n};\n\nexport default InputRenderer;\n;InputRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"InputRenderer\",\"props\":{\"field\":{\"required\":true,\"tsType\":{\"name\":\"FormField\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":true,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"renderLabel\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderErrorMessage\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  error: FieldError | undefined,\\n  formClassNameConfig: FormClassNameConfig | undefined\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"union\",\"raw\":\"FieldError | undefined\",\"elements\":[{\"name\":\"FieldError\"},{\"name\":\"undefined\"}]},\"name\":\"error\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}};InputRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"InputRenderer\",\"props\":{\"field\":{\"required\":true,\"tsType\":{\"name\":\"FormField\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":true,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"renderLabel\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderErrorMessage\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  error: FieldError | undefined,\\n  formClassNameConfig: FormClassNameConfig | undefined\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"union\",\"raw\":\"FieldError | undefined\",\"elements\":[{\"name\":\"FieldError\"},{\"name\":\"undefined\"}]},\"name\":\"error\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}}","// src/features/inputs/components/NumberInput.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport {\n  FormValues,\n} from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst NumberInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n\n  input {\n    text-align: center;\n    padding-right: 0;\n    width: 100px;\n  }\n`;\n\nconst SpinButton = styled.button`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 0 8px;\n  height: 100%;\n  font-size: 1rem;\n  line-height: 0;\n  color: ${({ theme }) => theme.colors.text};\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n  }\n  &:disabled {\n    cursor: default;\n    background-color: #efefef;\n  }\n  &:first-of-type {\n    border-radius: 4px 0 0 4px;\n    border-right: none;\n  }\n\n  &:last-of-type {\n    border-radius: 0 4px 4px 0;\n    border-left: none;\n  }\n`;\ninterface NumberInputProps extends CommonInputProps {}\n\nconst NumberInput: React.FC<NumberInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  const [internalValue, setInternalValue] = useState<number>(+field.value || 0);\n\n  const clampValue = useCallback(\n    (value: number) => {\n      const { min, max } = fieldConfig.validation || {};\n      let clampedValue = value;\n      if (min !== undefined && typeof min === 'object' && value < +min.value) {\n        clampedValue = +min.value;\n      }\n      if (max !== undefined && typeof max === 'object' && value > +max.value) {\n        clampedValue = +max.value;\n      }\n      return clampedValue;\n    },\n    [fieldConfig.validation]\n  );\n\n  useEffect(() => {\n    setInternalValue(+field.value || 0);\n  }, [field.value]);\n\n  const handleIncrement = () => {\n    const newValue = clampValue(internalValue + 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n\n  const handleDecrement = () => {\n    const newValue = clampValue(internalValue - 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <NumberInputContainer>\n        <SpinButton\n          type=\"button\"\n          onClick={handleDecrement}\n          disabled={\n            fieldConfig.validation?.min !== undefined &&\n            typeof fieldConfig.validation.min === 'object' &&\n            internalValue <= +fieldConfig.validation.min.value\n          }\n        >\n          -\n        </SpinButton>\n        <Input\n          {...field}\n          className={fieldClassNameConfig.input || formClassName.input}\n          type=\"number\"\n          id={id}\n          onChange={e => {\n            field.onChange(e);\n            setInternalValue(+e.target.value);\n          }}\n          onBlur={e => {\n            field.onBlur();\n            const clampedValue = clampValue(+e.target.value);\n            setInternalValue(clampedValue);\n            field.onChange(clampedValue);\n          }}\n          value={internalValue}\n          autoComplete={disableAutocomplete ? 'off' : undefined}\n        />\n        <SpinButton\n          type=\"button\"\n          onClick={handleIncrement}\n          disabled={\n            fieldConfig.validation?.max !== undefined &&\n            typeof fieldConfig.validation.max === 'object' &&\n            internalValue >= +fieldConfig.validation.max.value\n          }\n        >\n          +\n        </SpinButton>\n      </NumberInputContainer>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default NumberInput;\n","// src/features/inputs/components/NumberInput.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport {\n  FormValues,\n} from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst NumberInputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n\n  input {\n    text-align: center;\n    padding-right: 0;\n    width: 100px;\n  }\n`;\n\nconst SpinButton = styled.button`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 0 8px;\n  height: 100%;\n  font-size: 1rem;\n  line-height: 0;\n  color: ${({ theme }) => theme.colors.text};\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n  }\n  &:disabled {\n    cursor: default;\n    background-color: #efefef;\n  }\n  &:first-of-type {\n    border-radius: 4px 0 0 4px;\n    border-right: none;\n  }\n\n  &:last-of-type {\n    border-radius: 0 4px 4px 0;\n    border-left: none;\n  }\n`;\ninterface NumberInputProps extends CommonInputProps {}\n\nconst NumberInput: React.FC<NumberInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  const [internalValue, setInternalValue] = useState<number>(+field.value || 0);\n\n  const clampValue = useCallback(\n    (value: number) => {\n      const { min, max } = fieldConfig.validation || {};\n      let clampedValue = value;\n      if (min !== undefined && typeof min === 'object' && value < +min.value) {\n        clampedValue = +min.value;\n      }\n      if (max !== undefined && typeof max === 'object' && value > +max.value) {\n        clampedValue = +max.value;\n      }\n      return clampedValue;\n    },\n    [fieldConfig.validation]\n  );\n\n  useEffect(() => {\n    setInternalValue(+field.value || 0);\n  }, [field.value]);\n\n  const handleIncrement = () => {\n    const newValue = clampValue(internalValue + 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n\n  const handleDecrement = () => {\n    const newValue = clampValue(internalValue - 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <NumberInputContainer>\n        <SpinButton\n          type=\"button\"\n          onClick={handleDecrement}\n          disabled={\n            fieldConfig.validation?.min !== undefined &&\n            typeof fieldConfig.validation.min === 'object' &&\n            internalValue <= +fieldConfig.validation.min.value\n          }\n        >\n          -\n        </SpinButton>\n        <Input\n          {...field}\n          className={fieldClassNameConfig.input || formClassName.input}\n          type=\"number\"\n          id={id}\n          onChange={e => {\n            field.onChange(e);\n            setInternalValue(+e.target.value);\n          }}\n          onBlur={e => {\n            field.onBlur();\n            const clampedValue = clampValue(+e.target.value);\n            setInternalValue(clampedValue);\n            field.onChange(clampedValue);\n          }}\n          value={internalValue}\n          autoComplete={disableAutocomplete ? 'off' : undefined}\n        />\n        <SpinButton\n          type=\"button\"\n          onClick={handleIncrement}\n          disabled={\n            fieldConfig.validation?.max !== undefined &&\n            typeof fieldConfig.validation.max === 'object' &&\n            internalValue >= +fieldConfig.validation.max.value\n          }\n        >\n          +\n        </SpinButton>\n      </NumberInputContainer>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default NumberInput;\n;NumberInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"NumberInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};NumberInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"NumberInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// Filepath: /src/features/inputs/components/RadioInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { FormValues } from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst RadioGroup = styled.div`\n  display: flex;\n  gap: 16px;\n`;\n\nconst RadioLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  cursor: pointer;\n`;\n\nconst RadioInputStyled = styled.input`\n  appearance: none;\n  width: 16px;\n  height: 16px;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.primary};\n    border-color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:checked::after {\n    content: '';\n    display: block;\n    width: 8px;\n    height: 8px;\n    background-color: white;\n    border-radius: 50%;\n    margin: 3px auto;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.primary};\n  }\n`;\ninterface RadioInputProps extends CommonInputProps {}\n\nconst RadioInput: React.FC<RadioInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <RadioGroup>\n        {options?.map(option => (\n          <RadioLabel key={option.value} htmlFor={`${id}-${option.value}`}>\n            <RadioInputStyled\n              {...field}\n              type=\"radio\"\n              id={`${id}-${option.value}`}\n              name={id}\n              value={option.value}\n              checked={field.value === option.value}\n            />\n            {option.label}\n          </RadioLabel>\n        ))}\n      </RadioGroup>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default RadioInput;\n","// Filepath: /src/features/inputs/components/RadioInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { FormValues } from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst RadioGroup = styled.div`\n  display: flex;\n  gap: 16px;\n`;\n\nconst RadioLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  cursor: pointer;\n`;\n\nconst RadioInputStyled = styled.input`\n  appearance: none;\n  width: 16px;\n  height: 16px;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.primary};\n    border-color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:checked::after {\n    content: '';\n    display: block;\n    width: 8px;\n    height: 8px;\n    background-color: white;\n    border-radius: 50%;\n    margin: 3px auto;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.primary};\n  }\n`;\ninterface RadioInputProps extends CommonInputProps {}\n\nconst RadioInput: React.FC<RadioInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <RadioGroup>\n        {options?.map(option => (\n          <RadioLabel key={option.value} htmlFor={`${id}-${option.value}`}>\n            <RadioInputStyled\n              {...field}\n              type=\"radio\"\n              id={`${id}-${option.value}`}\n              name={id}\n              value={option.value}\n              checked={field.value === option.value}\n            />\n            {option.label}\n          </RadioLabel>\n        ))}\n      </RadioGroup>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default RadioInput;\n;RadioInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"RadioInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};RadioInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"RadioInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/inputs/components/SelectInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport {\n  FormValues,\n} from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst StyledSelect = styled.select`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px;\n  border-radius: 4px;\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  appearance: auto; /* Reset default styles */\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.primary};\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n  width: 100%;\n`;\n\ninterface SelectInputProps extends CommonInputProps {}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledSelect\n        {...field}\n        className={fieldClassNameConfig.input || formClassName.input}\n        id={id}\n      >\n        {options?.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </StyledSelect>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SelectInput;\n","// src/features/inputs/components/SelectInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport {\n  FormValues,\n} from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst StyledSelect = styled.select`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px;\n  border-radius: 4px;\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  appearance: auto; /* Reset default styles */\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.primary};\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n  width: 100%;\n`;\n\ninterface SelectInputProps extends CommonInputProps {}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledSelect\n        {...field}\n        className={fieldClassNameConfig.input || formClassName.input}\n        id={id}\n      >\n        {options?.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </StyledSelect>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SelectInput;\n;SelectInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SelectInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};SelectInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SelectInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/inputs/components/SwitchInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport {\n  FormValues,\n} from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst SwitchContainer = styled.label`\n  position: relative;\n  display: inline-block;\n  width: 48px;\n  height: 24px;\n  cursor: pointer;\n`;\n\nconst SwitchInputStyled = styled.input`\n  opacity: 0;\n  width: 0;\n  height: 0;\n\n  &:checked + .slider {\n    background-color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:focus + .slider {\n    box-shadow: 0 0 1px ${({ theme }) => theme.colors.primary};\n  }\n\n  &:checked + .slider:before {\n    transform: translateX(24px);\n  }\n`;\n\nconst Slider = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.4s;\n  border-radius: 24px;\n\n  &:before {\n    position: absolute;\n    content: '';\n    height: 20px;\n    width: 20px;\n    left: 2px;\n    bottom: 2px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n`;\ninterface SwitchInputProps extends CommonInputProps {}\n\nconst SwitchInput: React.FC<SwitchInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n        </Label>\n      )}\n      <SwitchContainer htmlFor={id}>\n        <SwitchInputStyled {...field} type=\"checkbox\" id={id} />\n        <Slider className=\"slider\" />\n      </SwitchContainer>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SwitchInput;\n","// src/features/inputs/components/SwitchInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport {\n  FormValues,\n} from '../../dynamic-form';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\n\nconst SwitchContainer = styled.label`\n  position: relative;\n  display: inline-block;\n  width: 48px;\n  height: 24px;\n  cursor: pointer;\n`;\n\nconst SwitchInputStyled = styled.input`\n  opacity: 0;\n  width: 0;\n  height: 0;\n\n  &:checked + .slider {\n    background-color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:focus + .slider {\n    box-shadow: 0 0 1px ${({ theme }) => theme.colors.primary};\n  }\n\n  &:checked + .slider:before {\n    transform: translateX(24px);\n  }\n`;\n\nconst Slider = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.4s;\n  border-radius: 24px;\n\n  &:before {\n    position: absolute;\n    content: '';\n    height: 20px;\n    width: 20px;\n    left: 2px;\n    bottom: 2px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n`;\ninterface SwitchInputProps extends CommonInputProps {}\n\nconst SwitchInput: React.FC<SwitchInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n  const formClassName = formClassNameConfig || {};\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={\n        fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n      }\n    >\n      {/* Render label here */}\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={fieldClassNameConfig.label || formClassName.label}\n        >\n          {label}\n        </Label>\n      )}\n      <SwitchContainer htmlFor={id}>\n        <SwitchInputStyled {...field} type=\"checkbox\" id={id} />\n        <Slider className=\"slider\" />\n      </SwitchContainer>\n      {showInlineError && error && (\n        <ErrorMessage\n          className={\n            fieldClassNameConfig.errorMessage || formClassName.errorMessage\n          }\n        >\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SwitchInput;\n;SwitchInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SwitchInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};SwitchInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SwitchInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/inputs/components/index.ts\nexport { default as TextInput } from './TextInput';\nexport { default as TextareaInput } from './TextareaInput';\nexport { default as CheckboxInput } from './CheckboxInput';\nexport { default as SelectInput } from './SelectInput';\nexport { default as RadioInput } from './RadioInput';\nexport { default as DateInput } from './DateInput';\nexport { default as NumberInput } from './NumberInput';\nexport { default as SwitchInput } from './SwitchInput';\nexport { default as TimePicker } from './TimePicker';\nexport { default as DateTimePicker } from './DateTimePicker';\nexport { default as ComboBox } from './ComboBox';\nexport { default as InputRenderer } from './InputRenderer';\n","// src/features/inputs/index.ts\nexport * from './components';\nexport * from './utils';\nexport * from './registry';\nexport * from './types';\n","// src/features/inputs/registry/InputRegistry.ts\nimport React from 'react';\nimport {\n  TextInput,\n  CheckboxInput,\n  TextareaInput,\n  SelectInput,\n  RadioInput,\n  DateInput,\n  NumberInput,\n  SwitchInput,\n  TimePicker,\n  DateTimePicker,\n  ComboBox,\n} from '../components';\nimport { InputType } from '../../dynamic-form/types';\n\n// Create a map of input types to components\nconst inputRegistry: Record<InputType, React.ComponentType<any> | undefined> = {\n  text: TextInput,\n  email: TextInput,\n  password: TextInput,\n  tel: TextInput,\n  url: TextInput,\n  checkbox: CheckboxInput,\n  textarea: TextareaInput,\n  select: SelectInput,\n  radio: RadioInput,\n  date: DateInput,\n  number: NumberInput,\n  switch: SwitchInput,\n  time: TimePicker,\n  'datetime-local': DateTimePicker,\n  combobox: ComboBox,\n};\n\n/**\n * Registers a new input component for a given type.\n *\n * @param type - The input type to register.\n * @param component - The component to register.\n */\nexport const registerInput = (\n  type: InputType,\n  component: React.ComponentType<any>\n) => {\n  inputRegistry[type] = component;\n};\n\n/**\n * Retrieves the component registered for a given input type.\n *\n * @param type - The input type to retrieve the component for.\n * @returns The registered component, or undefined if no component is registered for the type.\n */\nexport const getInputComponent = (\n  type: InputType\n): React.ComponentType<any> | undefined => {\n  return inputRegistry[type];\n};\n","// Filepath: /src/features/core/LayoutRegistry.ts\n\nimport React from 'react';\nimport { FlexLayout } from './components/FlexLayout';\nimport { GridLayout } from './components/GridLayout';\nimport { LayoutType } from '../../dynamic-form';\n\n// Create a map of layout types to components\nconst layoutRegistry: Record<\n  LayoutType,\n  React.ComponentType<any> | undefined\n> = {\n  flex: FlexLayout,\n  grid: GridLayout,\n};\n\n/**\n * Registers a new layout component for a given type.\n *\n * @param type - The layout type to register.\n * @param component - The component to register.\n */\nexport const registerLayout = (\n  type: LayoutType,\n  component: React.ComponentType<any>\n) => {\n  layoutRegistry[type] = component;\n};\n\n/**\n * Retrieves the component registered for a given layout type.\n *\n * @param type - The layout type to retrieve the component for.\n * @returns The registered component, or undefined if no component is registered for the type.\n */\nexport const getLayoutComponent = (\n  type: LayoutType\n): React.ComponentType<any> | undefined => {\n  return layoutRegistry[type];\n};\n","// Filepath: /src/features/core/components/FlexLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface FlexLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst FlexLayout: React.FC<FlexLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${formClassNameConfig?.formContainer ||\n        ''}`}\n      $layout=\"flex\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { FlexLayout };\n","// Filepath: /src/features/core/components/FlexLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface FlexLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst FlexLayout: React.FC<FlexLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${formClassNameConfig?.formContainer ||\n        ''}`}\n      $layout=\"flex\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { FlexLayout };\n;FlexLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FlexLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};FlexLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FlexLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// Filepath: /src/features/core/components/GridLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface GridLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst GridLayout: React.FC<GridLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${formClassNameConfig?.formContainer ||\n        ''}`}\n      $layout=\"grid\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { GridLayout };\n","// Filepath: /src/features/core/components/GridLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface GridLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst GridLayout: React.FC<GridLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${formClassNameConfig?.formContainer ||\n        ''}`}\n      $layout=\"grid\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { GridLayout };\n;GridLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"GridLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};GridLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"GridLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/inputs/registry/index.ts\nexport * from './InputRegistry';\nexport * from './LayoutRegistry';","// Filepath: /src/features/validation/ValidationSchemaRegistry.ts\n\nimport * as yup from 'yup';\nimport { InputType } from '../dynamic-form';\n\n// Create a map of input types to Yup schema\nconst validationSchemaRegistry: Record<InputType, yup.AnySchema | undefined> = {\n  text: yup.string(),\n  email: yup.string().email('Invalid email format'),\n  password: yup.string(),\n  tel: yup.string(),\n  url: yup.string().url('Invalid URL format'),\n  checkbox: yup.boolean(),\n  textarea: yup.string(),\n  select: yup.string(),\n  radio: yup.boolean(),\n  date: yup.date(),\n  number: yup.number(),\n  switch: yup.boolean(),\n  time: yup.string(),\n  'datetime-local': yup.string(),\n  combobox: yup.string(),\n};\n\n/**\n * Registers a new validation schema for a given type.\n *\n * @param type - The input type to register.\n * @param schema - The Yup schema to register.\n */\nexport const registerValidationSchema = (\n  type: InputType,\n  schema: yup.AnySchema\n) => {\n  validationSchemaRegistry[type] = schema;\n};\n\n/**\n * Retrieves the validation schema registered for a given input type.\n *\n * @param type - The input type to retrieve the schema for.\n * @returns The registered schema, or undefined if no schema is registered for the type.\n */\nexport const getValidationSchema = (\n  type: InputType\n): yup.AnySchema | undefined => {\n  return validationSchemaRegistry[type];\n};\n","// src/index.tsx\nimport React, { FC, HTMLAttributes } from 'react';\nimport ThemeProvider from './theme/ThemeProvider';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  /** custom content, defaults to 'the snozzberries taste like snozzberries' */\n  children?: any;\n  /** optional theme */\n  theme?: any;\n}\n\n// Please do not use types off of a default export module or else Storybook Docs will suffer.\n// see: https://github.com/storybookjs/storybook/issues/9556\n/**\n * A custom Thing component. Neat!\n */\nexport const Thing: FC<Props> = ({ children, theme }) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div>{children || `the snozzberries taste like snozzberries`}</div>\n    </ThemeProvider>\n  );\n};\n\n// src/index.tsx\nexport * from './features/dynamic-form';\nexport * from './features/form-renderer';\nexport * from './features/inputs';\nexport * from './components';\nexport * from './theme';\nexport { default as DynamicForm } from './DynamicForm';\n","// src/index.tsx\nimport React, { FC, HTMLAttributes } from 'react';\nimport ThemeProvider from './theme/ThemeProvider';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  /** custom content, defaults to 'the snozzberries taste like snozzberries' */\n  children?: any;\n  /** optional theme */\n  theme?: any;\n}\n\n// Please do not use types off of a default export module or else Storybook Docs will suffer.\n// see: https://github.com/storybookjs/storybook/issues/9556\n/**\n * A custom Thing component. Neat!\n */\nexport const Thing: FC<Props> = ({ children, theme }) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div>{children || `the snozzberries taste like snozzberries`}</div>\n    </ThemeProvider>\n  );\n};\n\n// src/index.tsx\nexport * from './features/dynamic-form';\nexport * from './features/form-renderer';\nexport * from './features/inputs';\nexport * from './components';\nexport * from './theme';\nexport { default as DynamicForm } from './DynamicForm';\n;Thing.__docgenInfo={\"description\":\"A custom Thing component. Neat!\",\"methods\":[],\"displayName\":\"Thing\",\"props\":{\"children\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"custom content, defaults to 'the snozzberries taste like snozzberries'\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"optional theme\"}},\"composes\":[\"HTMLAttributes\"]};Thing.__docgenInfo={\"description\":\"A custom Thing component. Neat!\",\"methods\":[],\"displayName\":\"Thing\",\"props\":{\"children\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"custom content, defaults to 'the snozzberries taste like snozzberries'\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"optional theme\"}},\"composes\":[\"HTMLAttributes\"]}","// src/theme/ThemeProvider.tsx\nimport React, { FC, createContext, useContext } from 'react';\nimport {\n  ThemeProvider as StyledThemeProvider,\n  ThemeContext,\n} from 'styled-components';\nimport { defaultTheme } from './index';\n\n/**\n * The theme context.\n */\nexport const AppThemeContext = createContext(defaultTheme);\n\n/**\n * Custom hook to access the theme context.\n *\n * @returns The theme object.\n */\nexport const useTheme = () => useContext(AppThemeContext);\n\n/**\n * Theme provider component.\n */\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  theme?: any;\n}\n\nconst ThemeProvider: FC<ThemeProviderProps> = ({ children, theme }) => {\n  const mergedTheme = theme ? { ...defaultTheme, ...theme } : defaultTheme;\n\n  return (\n    <AppThemeContext.Provider value={mergedTheme}>\n      <StyledThemeProvider theme={mergedTheme}>{children}</StyledThemeProvider>\n    </AppThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","// src/theme/ThemeProvider.tsx\nimport React, { FC, createContext, useContext } from 'react';\nimport {\n  ThemeProvider as StyledThemeProvider,\n  ThemeContext,\n} from 'styled-components';\nimport { defaultTheme } from './index';\n\n/**\n * The theme context.\n */\nexport const AppThemeContext = createContext(defaultTheme);\n\n/**\n * Custom hook to access the theme context.\n *\n * @returns The theme object.\n */\nexport const useTheme = () => useContext(AppThemeContext);\n\n/**\n * Theme provider component.\n */\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  theme?: any;\n}\n\nconst ThemeProvider: FC<ThemeProviderProps> = ({ children, theme }) => {\n  const mergedTheme = theme ? { ...defaultTheme, ...theme } : defaultTheme;\n\n  return (\n    <AppThemeContext.Provider value={mergedTheme}>\n      <StyledThemeProvider theme={mergedTheme}>{children}</StyledThemeProvider>\n    </AppThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n;ThemeProvider.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ThemeProvider\",\"props\":{\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"}}};ThemeProvider.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ThemeProvider\",\"props\":{\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"}}}"],"names":[],"sourceRoot":""}
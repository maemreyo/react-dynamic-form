"use strict";
self["webpackHotUpdate_matthew_ngo_react_dynamic_form"]("src_index_ts",{

/***/ "./src/features/form-renderer/FormRenderer.tsx":
/*!*****************************************************!*\
  !*** ./src/features/form-renderer/FormRenderer.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "./node_modules/react-hook-form/dist/index.esm.mjs");
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components */ "./src/features/form-renderer/components/index.ts");
// Filepath: /src/features/form-renderer/FormRenderer.tsx



var FormRenderer = function (_a) {
    var onSubmit = _a.onSubmit, className = _a.className, _b = _a.formClassNameConfig, formClassNameConfig = _b === void 0 ? {} : _b, style = _a.style, _c = _a.layout, layout = _c === void 0 ? 'grid' : _c, layoutConfig = _a.layoutConfig, horizontalLabel = _a.horizontalLabel, theme = _a.theme, header = _a.header, fieldsToRender = _a.fieldsToRender, fields = _a.fields, config = _a.config, footer = _a.footer, _d = _a.showSubmitButton, showSubmitButton = _d === void 0 ? true : _d, renderSubmitButton = _a.renderSubmitButton, _e = _a.showErrorSummary, showErrorSummary = _e === void 0 ? false : _e, labelWidth = _a.labelWidth, disableAutocomplete = _a.disableAutocomplete, showInlineError = _a.showInlineError, renderFormContent = _a.renderFormContent, renderFormFooter = _a.renderFormFooter, customInputs = _a.customInputs;
    var form = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.useFormContext)();
    var formState = form.formState, handleSubmit = form.handleSubmit;
    var content = renderFormContent ? (renderFormContent({
        fieldsToRender: fieldsToRender,
        fields: fields,
        config: config,
        formClassNameConfig: formClassNameConfig,
        horizontalLabel: horizontalLabel,
        labelWidth: labelWidth,
        disableAutocomplete: disableAutocomplete,
        showInlineError: showInlineError,
        conditionalFieldsConfig: [],
        renderInput: function (field, fieldConfig, commonInputProps) { return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null); },
    })) : (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_1__.FormContent, { fieldsToRender: fieldsToRender, fields: fields, config: config, formClassNameConfig: formClassNameConfig, horizontalLabel: horizontalLabel, labelWidth: labelWidth, disableAutocomplete: disableAutocomplete, showInlineError: showInlineError, conditionalFieldsConfig: [], customInputs: customInputs }));
    var footerContent = renderFormFooter ? (renderFormFooter({
        footer: footer,
        showSubmitButton: showSubmitButton,
        renderSubmitButton: renderSubmitButton,
        isSubmitting: formState.isSubmitting,
        showErrorSummary: showErrorSummary,
        errors: formState.errors,
        formClassNameConfig: formClassNameConfig,
    })) : (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_1__.FormFooter, { footer: footer, formClassNameConfig: formClassNameConfig, showSubmitButton: showSubmitButton, renderSubmitButton: renderSubmitButton, isSubmitting: formState.isSubmitting, showErrorSummary: showErrorSummary, errors: formState.errors }));
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null,
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_1__.FormLayout, { onSubmit: handleSubmit(onSubmit), className: className, formClassNameConfig: formClassNameConfig, style: style, layout: layout, layoutConfig: layoutConfig, horizontalLabel: horizontalLabel, theme: theme },
            header,
            content),
        footerContent));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormRenderer);
;
FormRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "FormRenderer", "props": { "config": { "required": true, "tsType": { "name": "FormConfig" }, "description": "" }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "" }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "" }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "" }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "" }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "" }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "", "defaultValue": { "value": "'grid'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "" }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "className": { "required": false, "tsType": { "name": "string" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "" }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "" }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "" }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "Partial", "elements": [{ "name": "Record", "elements": [{ "name": "string" }, { "name": "FieldError" }], "raw": "Record<string, FieldError>" }], "raw": "Partial<Record<string, FieldError>>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "" }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "" }, "fieldsToRender": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "string" }], "raw": "string[]" }, "description": "" }, "fields": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "FormField" }], "raw": "FormField[]" }, "description": "" }, "conditionalFieldsConfig": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "Condition" }], "raw": "Condition[]" }, "description": "" } } };
FormRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "FormRenderer", "props": { "config": { "required": true, "tsType": { "name": "FormConfig" }, "description": "" }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "" }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "" }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "" }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "" }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "" }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "", "defaultValue": { "value": "'grid'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "" }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "className": { "required": false, "tsType": { "name": "string" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "" }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "" }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "" }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "Partial", "elements": [{ "name": "Record", "elements": [{ "name": "string" }, { "name": "FieldError" }], "raw": "Record<string, FieldError>" }], "raw": "Partial<Record<string, FieldError>>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "" }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "" }, "fieldsToRender": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "string" }], "raw": "string[]" }, "description": "" }, "fields": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "FormField" }], "raw": "FormField[]" }, "description": "" }, "conditionalFieldsConfig": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "Condition" }], "raw": "Condition[]" }, "description": "" } } };


/***/ })

});
//# sourceMappingURL=src_index_ts.e25f1070ed1a00a90a98.hot-update.js.map
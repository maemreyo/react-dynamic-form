{"version":3,"file":"src_index_ts.689525ac601e4595a587.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAQA;AAAA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AAAA;AAQA;;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAMA;AAOA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TextareaInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TextareaInput.tsx?c197"],"sourcesContent":["// Filepath: /src/features/inputs/components/TextareaInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst StyledTextarea = styled.textarea<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: ${({ theme }) => theme.space.xl};\n  border-radius: ${({ theme }) => theme.radii.md};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  width: 100%; /* Set default width to 100% */\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out; /* Add transition */\n  line-height: 1.5;\n  &:hover {\n    border-color: ${({ theme }) =>\n      theme.colors['info-700']}; /* Change border color on hover */\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) =>\n      theme.colors.info}; /* Change border color on focus */\n  }\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n  min-height: 120px;\n`;\n\ninterface TextareaInputProps extends CommonInputProps {}\n\nconst TextareaInput: React.FC<TextareaInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledTextarea\n        {...field}\n        className={formClassNameConfig.textarea}\n        id={id}\n        autoComplete={disableAutocomplete ? 'off' : undefined}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default TextareaInput;\n","// Filepath: /src/features/inputs/components/TextareaInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst StyledTextarea = styled.textarea<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: ${({ theme }) => theme.space.xl};\n  border-radius: ${({ theme }) => theme.radii.md};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  width: 100%; /* Set default width to 100% */\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out; /* Add transition */\n  line-height: 1.5;\n  &:hover {\n    border-color: ${({ theme }) =>\n      theme.colors['info-700']}; /* Change border color on hover */\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) =>\n      theme.colors.info}; /* Change border color on focus */\n  }\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n  min-height: 120px;\n`;\n\ninterface TextareaInputProps extends CommonInputProps {}\n\nconst TextareaInput: React.FC<TextareaInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledTextarea\n        {...field}\n        className={formClassNameConfig.textarea}\n        id={id}\n        autoComplete={disableAutocomplete ? 'off' : undefined}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default TextareaInput;\n;TextareaInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TextareaInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};TextareaInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TextareaInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}"],"names":[],"sourceRoot":""}
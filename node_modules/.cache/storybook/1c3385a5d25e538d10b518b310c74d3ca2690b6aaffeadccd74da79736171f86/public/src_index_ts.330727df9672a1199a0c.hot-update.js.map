{"version":3,"file":"src_index_ts.330727df9672a1199a0c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAGA;AAQA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/useRHFOptions.ts"],"sourcesContent":["// src/features/dynamic-form/hooks/useRHFOptions.ts\nimport { useMemo } from 'react';\nimport { UseFormProps } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createValidationSchema } from '../../validation';\nimport { FormConfig, FormValues, ValidationMessages } from '../types';\n\nconst useRHFOptions = (\n  config: FormConfig,\n  formOptions: UseFormProps<FormValues> | undefined,\n  validateOnSubmit: boolean,\n  validateOnChange: boolean,\n  validateOnBlur: boolean,\n  globalValidationMessages: ValidationMessages | undefined\n): UseFormProps<FormValues> => {\n  return useMemo(() => {\n    const schema = createValidationSchema(config, globalValidationMessages);\n    const resolver = yupResolver(schema);\n\n    return {\n      ...formOptions,\n      mode: validateOnSubmit\n        ? 'onSubmit'\n        : validateOnChange\n        ? 'onChange'\n        : validateOnBlur\n        ? 'onBlur'\n        : 'onSubmit',\n      criteriaMode: 'all',\n      resolver,\n    } as UseFormProps<FormValues>;\n  }, [\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur,\n    globalValidationMessages,\n  ]);\n};\n\nexport default useRHFOptions;\n"],"names":[],"sourceRoot":""}
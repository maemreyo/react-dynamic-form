{"version":3,"file":"src_index_ts.f8420f56a0f72237f6bd.hot-update.js","mappings":";;;;;;;;;;;;;;;AAGA;;;;;;;;AAQA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/validationUtils.ts"],"sourcesContent":["// src/features/dynamic-form/utils/validationUtils.ts\nimport { FieldConfig, FieldError, ValidationMessages } from '../types';\n\n/**\n * Retrieves the error message for a field based on its validation messages and error type.\n *\n * @param fieldConfig - The field configuration.\n * @param fieldError - The field error object.\n * @param values - form values\n * @param globalValidationMessages - Optional global validation messages.\n * @returns The error message string or undefined if no error message is found.\n */\nexport const getErrorMessage = (\n  fieldConfig: FieldConfig,\n  fieldError: FieldError | undefined,\n  values: any,\n  globalValidationMessages?: ValidationMessages\n): string | undefined => {\n  if (!fieldError) {\n    return undefined;\n  }\n\n  const { type } = fieldError;\n  const fieldValidationMessages = fieldConfig.validationMessages;\n\n  // Merge global and field-level validation messages\n  const mergedValidationMessages = {\n    ...globalValidationMessages,\n    ...fieldValidationMessages,\n  };\n\n  if (mergedValidationMessages && mergedValidationMessages[type]) {\n    const template = mergedValidationMessages[type];\n    return typeof template === 'function'\n      ? (template({\n          ...values,\n          error: fieldError,\n          config: fieldConfig,\n        }) as string)\n      : (template as string);\n  }\n\n  return fieldError.message;\n};\n"],"names":[],"sourceRoot":""}
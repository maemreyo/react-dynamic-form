{"version":3,"file":"src_index_ts.6c6932d893e8a981209c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAwBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAEA;AACA;AACA;AAGA;AAEA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx"],"sourcesContent":["// Filepath: /src/features/form-renderer/FormRenderer.tsx\n// @ts-nocheck\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\n\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  \n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  customInputs,\n  onSubmit\n  renderSubmitButton,\n  renderFormContent,\n  renderFormFooter,\n  renderErrorSummary\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs}\n    />\n  );\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n  return (\n    <>\n      {header}\n      {content}\n      {footerContent}\n    </>\n  );\n};\n\nexport default FormRenderer;\n"],"names":[],"sourceRoot":""}
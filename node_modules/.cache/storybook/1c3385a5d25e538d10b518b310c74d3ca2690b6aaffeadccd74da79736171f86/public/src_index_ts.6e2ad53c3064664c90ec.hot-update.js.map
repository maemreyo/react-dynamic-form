{"version":3,"file":"src_index_ts.6e2ad53c3064664c90ec.hot-update.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AASA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAKA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AAWA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAIA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAMA;AAAA;AAAA;AAOA;AAAA;AAAA;AAUA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AC1BA;AAkbA;AAEA;AAEA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorMessage/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/Input/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/Label/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/SubmitButton/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/types.ts"],"sourcesContent":["// Filepath: /src/components/ErrorMessage/index.ts\nimport styled from 'styled-components';\n\n/**\n * Styled error message.\n */\nexport const ErrorMessage = styled.div<{ className?: string }>`\n  color: ${({ theme }) => theme.colors.danger};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  margin-top: ${({ theme }) => theme.space.xs};\n  display: block; /* Thêm display block */\n`;\n","// Filepath: /src/components/Input/index.ts\nimport styled, { css } from 'styled-components';\n\n/**\n * Base styles for form elements.\n */\nconst baseFormElementStyles = css`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px 12px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-size: ${({ theme }) => theme.fontSizes.small}; /* Giảm font-size */\n  width: 100%;\n  transition:\n    border-color 0.2s ease-in-out,\n    box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n`;\n\n/**\n * Styled input.\n */\nexport const Input = styled.input<{ className?: string }>`\n  ${baseFormElementStyles}\n\n  &[type='number'] {\n    -moz-appearance: textfield; /* Firefox */\n  }\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none; /* Chrome, Safari, Edge */\n    margin: 0;\n  }\n`;\n","// Filepath: /src/components/Label/index.ts\nimport styled, { css } from 'styled-components';\n\n/**\n * Props for the Label component.\n */\nexport interface LabelProps {\n  $horizontalLabel?: boolean;\n  $labelWidth?: string | number;\n  className?: string;\n}\n\n/**\n * Common styles for labels.\n */\nconst labelCommonStyles = css<LabelProps>`\n  margin-bottom: ${({ theme, $horizontalLabel }) =>\n    $horizontalLabel ? '0' : theme.space.sm};\n  margin-right: ${({ theme, $horizontalLabel }) =>\n    $horizontalLabel ? theme.space.md : '0'};\n  color: ${({ theme }) => theme.colors.text};\n  font-weight: ${({ theme }) => theme.fontWeights.semibold};\n  width: ${({ $labelWidth }) =>\n    $labelWidth\n      ? typeof $labelWidth === 'number'\n        ? `${$labelWidth}px`\n        : $labelWidth\n      : 'auto'};\n  flex-shrink: 0;\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  display: block; /* Thêm display block */\n`;\n\n/**\n * Styled label.\n */\nexport const Label = styled.label<LabelProps>`\n  ${labelCommonStyles}\n`;\n","// Filepath: /src/components/SubmitButton/index.ts\nimport styled from 'styled-components';\n\n/**\n * Styled submit button.\n */\nexport const SubmitButton = styled.button`\n  background-color: ${({ theme }) => theme.colors.info};\n  color: ${({ theme }) => theme.colors.white};\n  border: none;\n  padding: 10px 20px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-weight: ${({ theme }) => theme.fontWeights.semibold};\n  cursor: pointer;\n  transition:\n    background-color 0.2s ease-in-out,\n    opacity 0.2s ease-in-out;\n  width: auto;\n  font-size: ${({ theme }) => theme.fontSizes.medium}; /* Giảm font-size */\n  box-shadow:\n    0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n    0px 1px 10px 0px rgba(0, 0, 0, 0.12); /* Thêm đổ bóng */\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n`;\n","// src/features/dynamic-form/types.ts\nimport {\n  UseFormProps,\n  UseFormReturn,\n  FieldValues,\n  SubmitHandler,\n  FieldErrors as RHFFieldErrors,\n} from 'react-hook-form';\nimport { Message, Schema } from 'yup';\nimport {\n  FormContainerProps,\n  InputWrapperProps,\n  LabelProps,\n} from '../../styles';\nimport { CommonInputProps, CustomInputProps } from '../inputs/types';\nimport { FormContentProps } from '../form-renderer';\n\n// --- Layout ---\n\n/**\n * Type alias for layout types.\n */\nexport type LayoutType = 'flex' | 'grid';\n\n// --- Form Config ---\n\n/**\n * Type alias for a map of input component types to their corresponding React component types.\n */\nexport type InputComponentMap = {\n  [key: string]: React.ComponentType<CustomInputProps>;\n};\n\n/**\n * Interface for the main DynamicForm component props.\n */\nexport interface DynamicFormProps {\n  /** The form configuration. */\n  config: FormConfig;\n  /** Optional callback function to be called when the form data changes. */\n  onChange?: (formData: FormValues) => void;\n  /** Optional callback function to be called when the form is submitted. */\n  onSubmit?: SubmitHandler<FieldValues>;\n  /** Optional options for react-hook-form's useForm hook. */\n  formOptions?: UseFormProps;\n  /** Optional Yup schema for form validation. */\n  validationSchema?: Schema<any>;\n  /** Optional header element for the form. */\n  header?: React.ReactNode;\n  /** Optional footer element for the form. */\n  footer?: React.ReactNode;\n  /** Whether the form is read-only. */\n  readOnly?: boolean;\n  /** Whether the form is disabled. */\n  disableForm?: boolean;\n  /** Whether to show the submit button. */\n  showSubmitButton?: boolean;\n  /** Optional auto-save configuration. */\n  autoSave?: {\n    interval: number;\n    save: (data: Record<string, any>) => void;\n  };\n  /** Whether to reset the form on submit. */\n  resetOnSubmit?: boolean;\n  /** Whether to focus on the first error field on submit. */\n  focusFirstError?: boolean;\n  /** The layout type for the form. */\n  layout?: LayoutType;\n  /** Optional layout configuration. */\n  layoutConfig?: any;\n  /** Whether to use horizontal labels. */\n  horizontalLabel?: boolean;\n  /** Optional label width (for horizontal labels). */\n  labelWidth?: string | number;\n  /** Whether to enable local storage for the form data. */\n  enableLocalStorage?: boolean;\n  /** Optional debounce time (in ms) for the onChange callback. */\n  debounceOnChange?: number;\n  /** Whether to disable autocomplete for the form. */\n  disableAutocomplete?: boolean;\n  /** Whether to show inline error messages. */\n  showInlineError?: boolean;\n  /** Whether to show an error summary. */\n  showErrorSummary?: boolean;\n  /** Whether to validate on blur. */\n  validateOnBlur?: boolean;\n  /** Whether to validate on change. */\n  validateOnChange?: boolean;\n  /** Whether to validate on submit. */\n  validateOnSubmit?: boolean;\n  /** Optional CSS class name for the form container. */\n  className?: string;\n  /** Optional CSS class names for form elements. */\n  formClassNameConfig?: FormClassNameConfig;\n  /** Optional inline styles for the form container. */\n  style?: React.CSSProperties;\n  /** Optional theme object. */\n  theme?: any;\n  /** Optional callback function to be called when the form is ready. */\n  onFormReady?: (form: UseFormReturn<any>) => void;\n  /** Optional custom submit button renderer. */\n  renderSubmitButton?: RenderSubmitButtonProps;\n  /** Optional custom form content renderer. */\n  renderFormContent?: RenderFormContentProps;\n  /** Optional custom form footer renderer. */\n  renderFormFooter?: RenderFormFooterProps;\n  /** Optional custom validators. */\n  customValidators?: {\n    [key: string]: (value: any, context: any) => string | undefined;\n  };\n  /** Optional custom input components. */\n  customInputs?: InputComponentMap;\n}\n\n/**\n * Type alias for form values.\n */\nexport type FormValues = Record<string, any>;\n\n/**\n * Interface for form configuration.\n */\nexport interface FormConfig {\n  [key: string]: FieldConfig;\n}\n\n/**\n * Interface for field configuration.\n */\nexport interface FieldConfig {\n  /** The input type. */\n  type?: InputType;\n  /** The label text. */\n  label?: string;\n  /** The placeholder text. */\n  placeholder?: string;\n  /** The validation configuration. */\n  validation?: ValidationConfig;\n  /** Optional custom component for the input. */\n  component?: React.ComponentType<any>;\n  /** Optional inline styles for the input. */\n  style?: React.CSSProperties;\n  /** Whether the input is read-only. */\n  readOnly?: boolean;\n  /** Whether the input is clearable. */\n  clearable?: boolean;\n  /** Whether to show a character counter for the input. */\n  showCounter?: boolean;\n  /** Whether to enable copy-to-clipboard functionality for the input. */\n  copyToClipboard?: boolean;\n  /** Optional tooltip text for the input. */\n  tooltip?: string;\n  /** Optional CSS class names for the input and its elements. */\n  classNameConfig?: FieldClassNameConfig;\n  /** Optional options for select, radio, or combobox inputs. */\n  options?: { value: string; label: string }[];\n  /** Optional conditional logic for the input. */\n  conditional?: Condition;\n  /** Nested fields (for complex inputs). */\n  fields?: FormConfig;\n  /** Optional custom validation messages. */\n  validationMessages?: ValidationMessages;\n  /** Optional default value for the input. */\n  defaultValue?: any;\n}\n\n// --- Input Types ---\n\n/**\n * Type alias for supported input types.\n */\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'checkbox'\n  | 'select'\n  | 'textarea'\n  | 'email'\n  | 'password'\n  | 'tel'\n  | 'url'\n  | 'radio'\n  | 'date'\n  | 'switch'\n  | 'time'\n  | 'datetime-local'\n  | 'combobox'\n  | 'custom';\n\n// --- Validation ---\n\n/**\n * Type alias for a custom validation function.\n *\n * @template TFieldValue - The type of the field value.\n * @template TFormValues - The type of the form values.\n *\n * @param value - The value of the field being validated.\n * @param formValues - The values of all fields in the form.\n * @returns - A string representing the error message if validation fails, or `undefined` if validation passes.\n */\nexport type CustomValidator<\n  TFieldValue = any,\n  TFormValues extends FieldValues = FormValues\n> = (\n  value: TFieldValue,\n  formValues: TFormValues\n) => string | undefined | Promise<string | undefined>;\n\n/**\n * Type alias for a validation value, which can be either a value of type T or an object with a value and a message.\n */\nexport type ValidationValue<T> =\n  | T\n  | {\n      value: T;\n      message: string;\n    };\n\n/**\n * Interface for validation configuration for a field.\n */\nexport interface ValidationConfig {\n  required?: ValidationValue<boolean>;\n  minLength?: ValidationValue<number>;\n  maxLength?: ValidationValue<number>;\n  min?: ValidationValue<number | string>;\n  max?: ValidationValue<number | string>;\n  pattern?: ValidationValue<RegExp>;\n  validate?: (\n    value: any,\n    formValues: FormValues\n  ) => string | undefined | Promise<string | undefined>;\n  requiredMessage?: string;\n}\n\n/**\n * Type alias for a custom error message template function.\n */\nexport type ErrorMessageTemplate =\n  | Message\n  | ((values: {\n      label?: string;\n      value: any;\n      error: FieldError;\n      config: FieldConfig;\n    }) => string);\n\n/**\n * Interface for validation messages for a field.\n */\nexport interface ValidationMessages {\n  [key: string]: ErrorMessageTemplate;\n}\n\n// --- Conditional Rendering ---\n\n/**\n * Type alias for comparison operators used in conditional rendering.\n */\nexport type ComparisonOperator =\n  | 'is'\n  | 'isNot'\n  | 'greaterThan'\n  | 'lessThan'\n  | 'greaterThanOrEqual'\n  | 'lessThanOrEqual'\n  | 'contains'\n  | 'startsWith'\n  | 'endsWith'\n  | 'custom';\n\n/**\n * Type alias for a comparator function used in conditional rendering.\n */\nexport type ComparatorFunction = (value: any) => boolean;\n\n/**\n * Interface for a condition used in conditional rendering.\n */\nexport interface Condition {\n  /** The field to watch for changes. */\n  when: string;\n  /** The comparison operator to use. */\n  operator: ComparisonOperator;\n  /** The value to compare against. */\n  value?: any;\n  /** Optional custom comparator function. */\n  comparator?: ComparatorFunction;\n  /** The fields to show or hide based on the condition. */\n  fields: string[];\n}\n\n// --- Field ---\n\n/**\n * Interface for a form field.\n */\nexport interface FormField {\n  label?: string;\n  id: string;\n  type: InputType;\n  error?: FieldError;\n}\n\n// --- Errors ---\n\n/**\n * Interface for a field error.\n */\nexport interface FieldError {\n  type: string;\n  message?: string;\n}\n\n/**\n * Type alias for react-hook-form field errors.\n */\nexport type FieldErrors = RHFFieldErrors<FieldValues>;\n\n// --- Class Names ---\n\n/**\n * Interface for form-level CSS class name configuration.\n */\nexport interface FormClassNameConfig {\n  formContainer?: string;\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  button?: string;\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string;\n  radioButton?: string;\n  radioLabel?: string;\n  checkboxInput?: string;\n  switchContainer?: string;\n  switchSlider?: string;\n  numberInputContainer?: string;\n  numberInputButton?: string;\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n\n/**\n * Interface for field-level CSS class name configuration.\n */\nexport interface FieldClassNameConfig {\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string;\n  radioButton?: string;\n  radioLabel?: string;\n  checkboxInput?: string;\n  switchContainer?: string;\n  switchSlider?: string;\n  numberInputContainer?: string;\n  numberInputButton?: string;\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n\n// --- Render Props ---\n\n/**\n * Type alias for the renderSubmitButton prop in DynamicFormProps.\n */\nexport type RenderSubmitButtonProps = (\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode;\n\n/**\n * Type alias for the renderFormContent prop in FormRendererProps.\n */\nexport type RenderFormContentProps = (\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode;\n\n/**\n * Type alias for the renderInput prop in FormContentProps.\n */\nexport type RenderInputProps = (\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Type alias for the renderLabel prop in InputWrapperProps.\n */\nexport type RenderLabelProps = (\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Type alias for the renderErrorMessage prop in InputWrapperProps.\n */\nexport type RenderErrorMessageProps = (\n  error: FieldError | undefined,\n  formClassNameConfig: FormClassNameConfig | undefined\n) => React.ReactNode;\n\n/**\n * Type alias for the renderFormFooter prop in FormRendererProps.\n */\nexport type RenderFormFooterProps = (props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode;\n\n// --- Re-exported types ---\n\nexport { FormContainerProps, InputWrapperProps, LabelProps };\n\n// --- Deprecated ---\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"src_index_ts.18f0908de9d06c43c9ac.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAWA;AAEA;AAAA;AAAA;AAMA;AAAA;AAAA;AAMA;AAAA;AAAA;AAkBA;;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAGA;AAMA;AACA;AAKA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAMA;AACA;AAMA;AAOA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/NumberInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/NumberInput.tsx?2428"],"sourcesContent":["// Filepath: /src/features/inputs/components/NumberInput.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Input, Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\n\nconst NumberInputContainer = styled.div<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  input {\n    text-align: center;\n    padding-right: 0;\n    width: 65px; /* Giảm chiều rộng */\n  }\n`;\n\nconst SpinButton = styled.button<{ className?: string }>`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 0;\n  height: 32px; /* Giảm kích thước */\n  width: 32px; /* Giảm kích thước */\n  font-size: 18px; /* Giảm kích thước */\n  line-height: 0;\n  color: ${({ theme }) => theme.colors.text};\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &:disabled {\n    cursor: default;\n    background-color: #efefef;\n  }\n  &:first-of-type {\n    border-radius: 8px 0 0 8px; /* Bo tròn */\n    border-right: none;\n  }\n  &:last-of-type {\n    border-radius: 0 8px 8px 0; /* Bo tròn */\n    border-left: none;\n  }\n`;\n\ninterface NumberInputProps extends CommonInputProps {}\n\nconst NumberInput: React.FC<NumberInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  const [internalValue, setInternalValue] = useState<number>(+field.value || 0);\n  const clampValue = useCallback(\n    (value: number) => {\n      const { min, max } = fieldConfig.validation || {};\n      let clampedValue = value;\n      if (min !== undefined && typeof min === 'object' && value < +min.value) {\n        clampedValue = +min.value;\n      }\n      if (max !== undefined && typeof max === 'object' && value > +max.value) {\n        clampedValue = +max.value;\n      }\n      return clampedValue;\n    },\n    [fieldConfig.validation]\n  );\n  useEffect(() => {\n    setInternalValue(+field.value || 0);\n  }, [field.value]);\n  const handleIncrement = () => {\n    const newValue = clampValue(internalValue + 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  const handleDecrement = () => {\n    const newValue = clampValue(internalValue - 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <NumberInputContainer\n        className={formClassNameConfig.numberInputContainer}\n      >\n        <SpinButton\n          type=\"button\"\n          onClick={handleDecrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.min !== undefined &&\n            typeof fieldConfig.validation.min === 'object' &&\n            internalValue <= +fieldConfig.validation.min.value\n          }\n        >\n          -\n        </SpinButton>\n        <Input\n          {...field}\n          className={formClassNameConfig.number}\n          type=\"number\"\n          id={id}\n          onChange={e => {\n            field.onChange(e);\n            setInternalValue(+e.target.value);\n          }}\n          onBlur={e => {\n            field.onBlur();\n            const clampedValue = clampValue(+e.target.value);\n            setInternalValue(clampedValue);\n            field.onChange(clampedValue);\n          }}\n          value={internalValue}\n          autoComplete={disableAutocomplete ? 'off' : undefined}\n        />\n        <SpinButton\n          type=\"button\"\n          onClick={handleIncrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.max !== undefined &&\n            typeof fieldConfig.validation.max === 'object' &&\n            internalValue >= +fieldConfig.validation.max.value\n          }\n        >\n          +\n        </SpinButton>\n      </NumberInputContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default NumberInput;\n","// Filepath: /src/features/inputs/components/NumberInput.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Input, Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\n\nconst NumberInputContainer = styled.div<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  input {\n    text-align: center;\n    padding-right: 0;\n    width: 65px; /* Giảm chiều rộng */\n  }\n`;\n\nconst SpinButton = styled.button<{ className?: string }>`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 0;\n  height: 32px; /* Giảm kích thước */\n  width: 32px; /* Giảm kích thước */\n  font-size: 18px; /* Giảm kích thước */\n  line-height: 0;\n  color: ${({ theme }) => theme.colors.text};\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &:disabled {\n    cursor: default;\n    background-color: #efefef;\n  }\n  &:first-of-type {\n    border-radius: 8px 0 0 8px; /* Bo tròn */\n    border-right: none;\n  }\n  &:last-of-type {\n    border-radius: 0 8px 8px 0; /* Bo tròn */\n    border-left: none;\n  }\n`;\n\ninterface NumberInputProps extends CommonInputProps {}\n\nconst NumberInput: React.FC<NumberInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  const [internalValue, setInternalValue] = useState<number>(+field.value || 0);\n  const clampValue = useCallback(\n    (value: number) => {\n      const { min, max } = fieldConfig.validation || {};\n      let clampedValue = value;\n      if (min !== undefined && typeof min === 'object' && value < +min.value) {\n        clampedValue = +min.value;\n      }\n      if (max !== undefined && typeof max === 'object' && value > +max.value) {\n        clampedValue = +max.value;\n      }\n      return clampedValue;\n    },\n    [fieldConfig.validation]\n  );\n  useEffect(() => {\n    setInternalValue(+field.value || 0);\n  }, [field.value]);\n  const handleIncrement = () => {\n    const newValue = clampValue(internalValue + 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  const handleDecrement = () => {\n    const newValue = clampValue(internalValue - 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <NumberInputContainer\n        className={formClassNameConfig.numberInputContainer}\n      >\n        <SpinButton\n          type=\"button\"\n          onClick={handleDecrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.min !== undefined &&\n            typeof fieldConfig.validation.min === 'object' &&\n            internalValue <= +fieldConfig.validation.min.value\n          }\n        >\n          -\n        </SpinButton>\n        <Input\n          {...field}\n          className={formClassNameConfig.number}\n          type=\"number\"\n          id={id}\n          onChange={e => {\n            field.onChange(e);\n            setInternalValue(+e.target.value);\n          }}\n          onBlur={e => {\n            field.onBlur();\n            const clampedValue = clampValue(+e.target.value);\n            setInternalValue(clampedValue);\n            field.onChange(clampedValue);\n          }}\n          value={internalValue}\n          autoComplete={disableAutocomplete ? 'off' : undefined}\n        />\n        <SpinButton\n          type=\"button\"\n          onClick={handleIncrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.max !== undefined &&\n            typeof fieldConfig.validation.max === 'object' &&\n            internalValue >= +fieldConfig.validation.max.value\n          }\n        >\n          +\n        </SpinButton>\n      </NumberInputContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default NumberInput;\n;NumberInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"NumberInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};NumberInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"NumberInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}"],"names":[],"sourceRoot":""}
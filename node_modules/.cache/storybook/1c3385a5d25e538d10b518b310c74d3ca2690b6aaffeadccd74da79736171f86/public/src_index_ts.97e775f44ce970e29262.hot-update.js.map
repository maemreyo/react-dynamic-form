{"version":3,"file":"src_index_ts.97e775f44ce970e29262.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AAKA;AAKA;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAuBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAEA;AAUA;AACA;AAEA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACvGA;;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AAAA;AAAA;AAOA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AAUA;AAAA;AAAA;AAUA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AAOA;AAGA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACxGA;;AAEA;AAMA;AACA;AACA;AAEA;AAKA;AAKA;AAAA;AAAA;AAcA;AAIA;AAAA;AAAA;AAGA;AAAA;AAAA;AAeA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAIA;AAUA;AAwBA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC9NA;AACA;AAUA;AAEA;AACA;AAeA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/formUtils.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx?4b39","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/CheckboxInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/CheckboxInput.tsx?866a","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx?a3ac","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/InputRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/InputRenderer.tsx?0fdf"],"sourcesContent":["// src/features/dynamic-form/utils/formUtils.ts\nimport { FieldClassNameConfig, FormClassNameConfig, FormConfig } from '../types';\n\n/**\n * Flattens a nested object into a single-level object.\n *\n * @param obj - The object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened object.\n * @returns The flattened object.\n */\nexport const flattenObject = (\n  obj: Record<string, any>,\n  parentKey = '',\n  result: Record<string, any> = {}\n): Record<string, any> => {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n        flattenObject(obj[key], newKey, result);\n      } else {\n        result[newKey] = obj[key];\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Flattens a nested config object into a single-level object.\n *\n * @param config - The config object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened config object.\n * @returns The flattened config object.\n */\nexport const flattenConfig = (\n  config: FormConfig,\n  parentKey = '',\n  result: FormConfig = {}\n): FormConfig => {\n  for (const key in config) {\n    if (Object.prototype.hasOwnProperty.call(config, key)) {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      const fieldConfig = config[key];\n      if (fieldConfig.fields) {\n        flattenConfig(fieldConfig.fields, newKey, result);\n      } else {\n        result[newKey] = fieldConfig;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Debounces a function.\n *\n * @param func - The function to debounce.\n * @param wait - The debounce time in milliseconds.\n * @returns The debounced function.\n */\nexport const debounce = (func: Function, wait: number) => {\n  let timeout: NodeJS.Timeout | null;\n  return function (...args: any[]) {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n/**\n * Saves data to localStorage.\n *\n * @param key - The key to store the data under.\n * @param data - The data to store.\n */\nexport const saveToLocalStorage = (key: string, data: any) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\n/**\n * Loads data from localStorage.\n *\n * @param key - The key to load the data from.\n * @returns The loaded data, or null if no data is found.\n */\nexport const loadFromLocalStorage = (key: string): any | null => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : null;\n};\n\n\n/**\n * Merges multiple classNameConfig objects into a single object.\n *\n * @param defaultClassNames - The default classNameConfig object.\n * @param formClassNames - The form-level classNameConfig object.\n * @param fieldClassNames - The field-level classNameConfig object.\n * @returns The merged classNameConfig object.\n */\nexport const mergeClassNames = (\n  defaultClassNames: FormClassNameConfig,\n  formClassNames?: FormClassNameConfig,\n  fieldClassNames?: FieldClassNameConfig\n): FormClassNameConfig => {\n  return {\n    ...defaultClassNames,\n    ...formClassNames,\n    ...fieldClassNames,\n  };\n};","// Filepath: /src/features/form-renderer/FormRenderer.tsx\n// @ts-nocheck\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs}\n    />\n  );\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n  return (\n    <>\n      <FormLayout\n        onSubmit={handleSubmit(onSubmit)}\n        className={className}\n        formClassNameConfig={formClassNameConfig}\n        style={style}\n        layout={layout}\n        layoutConfig={layoutConfig}\n        horizontalLabel={horizontalLabel}\n        theme={theme}\n      >\n        {header}\n        {content}\n      </FormLayout>\n      {footerContent}\n    </>\n  );\n};\n\nexport default FormRenderer;\n","// Filepath: /src/features/form-renderer/FormRenderer.tsx\n// @ts-nocheck\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs}\n    />\n  );\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n  return (\n    <>\n      <FormLayout\n        onSubmit={handleSubmit(onSubmit)}\n        className={className}\n        formClassNameConfig={formClassNameConfig}\n        style={style}\n        layout={layout}\n        layoutConfig={layoutConfig}\n        horizontalLabel={horizontalLabel}\n        theme={theme}\n      >\n        {header}\n        {content}\n      </FormLayout>\n      {footerContent}\n    </>\n  );\n};\n\nexport default FormRenderer;\n;FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"The form configuration.\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form data changes.\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"Optional callback function to be called when the form is submitted.\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"Optional options for react-hook-form's useForm hook.\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"Optional Yup schema for form validation.\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional header element for the form.\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element for the form.\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is read-only.\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is disabled.\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"Optional auto-save configuration.\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to reset the form on submit.\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to focus on the first error field on submit.\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"The layout type for the form.\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional layout configuration.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use horizontal labels.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to enable local storage for the form data.\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"Optional debounce time (in ms) for the onChange callback.\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the form.\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on blur.\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on change.\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on submit.\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"Optional CSS class name for the form container.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"Optional inline styles for the form container.\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional theme object.\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form is ready.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form content renderer.\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form footer renderer.\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"Optional custom validators.\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"Optional custom input components.\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"List of field IDs to render.\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"List of form fields.\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"Configuration for conditional fields.\"}}};FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"The form configuration.\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form data changes.\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"Optional callback function to be called when the form is submitted.\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"Optional options for react-hook-form's useForm hook.\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"Optional Yup schema for form validation.\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional header element for the form.\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element for the form.\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is read-only.\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is disabled.\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"Optional auto-save configuration.\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to reset the form on submit.\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to focus on the first error field on submit.\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"The layout type for the form.\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional layout configuration.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use horizontal labels.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to enable local storage for the form data.\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"Optional debounce time (in ms) for the onChange callback.\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the form.\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on blur.\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on change.\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on submit.\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"Optional CSS class name for the form container.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"Optional inline styles for the form container.\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional theme object.\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form is ready.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form content renderer.\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form footer renderer.\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"Optional custom validators.\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"Optional custom input components.\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"List of field IDs to render.\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"List of form fields.\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"Configuration for conditional fields.\"}}}","// Filepath: /src/features/inputs/components/CheckboxInput.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\n\nconst CheckboxInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 4px; /* Bo tròn */\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '✔';\n    display: block;\n    text-align: center;\n    font-size: 14px; /* Giảm kích thước icon */\n    line-height: 18px; /* Căn giữa icon */\n    color: ${({ theme }) => theme.colors.white};\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst CheckboxInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation as any,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          <CheckboxInputStyled\n            {...field}\n            className={formClassNameConfig.checkboxInput}\n            type=\"checkbox\"\n            id={id}\n            checked={!!field.value}\n          />\n          {label}\n        </Label>\n      )}\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default CheckboxInput;\n","// Filepath: /src/features/inputs/components/CheckboxInput.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\n\nconst CheckboxInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 4px; /* Bo tròn */\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '✔';\n    display: block;\n    text-align: center;\n    font-size: 14px; /* Giảm kích thước icon */\n    line-height: 18px; /* Căn giữa icon */\n    color: ${({ theme }) => theme.colors.white};\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst CheckboxInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation as any,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          <CheckboxInputStyled\n            {...field}\n            className={formClassNameConfig.checkboxInput}\n            type=\"checkbox\"\n            id={id}\n            checked={!!field.value}\n          />\n          {label}\n        </Label>\n      )}\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default CheckboxInput;\n;CheckboxInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"CheckboxInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};CheckboxInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"CheckboxInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/ComboBox.tsx\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  FieldConfig,\n  FormClassNameConfig,\n  FieldError,\n} from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst ComboBoxContainer = styled.div<{ className?: string }>`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul<{ className?: string }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 8px; /* Bo tròn */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n`;\n\nconst DropdownItem = styled.li<{ className?: string }>`\n  padding: 8px 12px; /* Giảm padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.info};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n  const filteredOptions = options\n    ? options.filter((option) =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer\n        ref={containerRef}\n        className={formClassNameConfig.comboBoxContainer}\n      >\n        <Input\n          {...field}\n          className={formClassNameConfig.comboBox}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList className={formClassNameConfig.comboBoxDropdownList}>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={`${\n                    index === highlightedIndex ? 'selected' : ''\n                  } ${formClassNameConfig.comboBoxDropdownItem}`}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem\n                className={formClassNameConfig.comboBoxDropdownItem}\n              >\n                No results found\n              </DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n","// Filepath: /src/features/inputs/components/ComboBox.tsx\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  FieldConfig,\n  FormClassNameConfig,\n  FieldError,\n} from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst ComboBoxContainer = styled.div<{ className?: string }>`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul<{ className?: string }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 8px; /* Bo tròn */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n`;\n\nconst DropdownItem = styled.li<{ className?: string }>`\n  padding: 8px 12px; /* Giảm padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.info};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n  const filteredOptions = options\n    ? options.filter((option) =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer\n        ref={containerRef}\n        className={formClassNameConfig.comboBoxContainer}\n      >\n        <Input\n          {...field}\n          className={formClassNameConfig.comboBox}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList className={formClassNameConfig.comboBoxDropdownList}>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={`${\n                    index === highlightedIndex ? 'selected' : ''\n                  } ${formClassNameConfig.comboBoxDropdownItem}`}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem\n                className={formClassNameConfig.comboBoxDropdownItem}\n              >\n                No results found\n              </DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n;ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}};ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}}","// src/features/inputs/components/InputRenderer.tsx\nimport React from 'react';\nimport {\n  FormField,\n  FormConfig,\n  FormClassNameConfig,\n  RenderLabelProps,\n  RenderErrorMessageProps,\n  InputComponentMap,\n  FieldClassNameConfig,\n} from '../../dynamic-form/types';\nimport { getInputComponent } from '../registry/InputRegistry';\nimport { CommonInputProps, CustomInputProps } from '../types';\nimport { ErrorMessage } from '../../../styles';\nimport { mergeClassNames } from '../../dynamic-form/utils/formUtils'; // Import hàm mergeClassNames\n\ninterface InputRendererProps {\n  field: FormField;\n  config: FormConfig;\n  formClassNameConfig: FormClassNameConfig;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  renderLabel?: RenderLabelProps;\n  renderErrorMessage?: RenderErrorMessageProps;\n  customInputs?: InputComponentMap;\n}\n\nconst InputRenderer: React.FC<InputRendererProps> = ({\n  field,\n  config,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  renderErrorMessage,\n  customInputs,\n}) => {\n  const { id, type, error } = field;\n  const fieldConfig = config[id] || {};\n\n  // Prioritize custom input components\n  const CustomInputComponent = customInputs?.[type];\n  const RegisteredInputComponent = getInputComponent(type);\n  const InputComponent = CustomInputComponent || RegisteredInputComponent;\n\n  // Merge class names\n  const mergedFormClassNameConfig = mergeClassNames(\n    {}, // Default empty object\n    formClassNameConfig,\n    fieldConfig.classNameConfig\n  );\n\n  const commonInputProps: CommonInputProps = {\n    id,\n    fieldConfig,\n    formClassNameConfig: mergedFormClassNameConfig, // Truyền mergedFormClassNameConfig thay vì formClassNameConfig\n    showInlineError,\n    horizontalLabel,\n    labelWidth,\n    error,\n    disableAutocomplete,\n  };\n\n  // Render error message using renderErrorMessage prop or default\n  const errorMessageElement =\n    showInlineError && error && renderErrorMessage\n      ? renderErrorMessage(error, mergedFormClassNameConfig) // Sử dụng mergedFormClassNameConfig\n      : showInlineError && error\n      ? React.createElement(ErrorMessage, {\n          className: mergedFormClassNameConfig.errorMessage, // Sử dụng mergedFormClassNameConfig\n          children: error.message,\n        })\n      : null;\n\n  if (!InputComponent) {\n    console.warn(`No input component found for type: ${type}`);\n    return null;\n  }\n\n  return (\n    <>\n      {/* Cast to CustomInputProps for custom components */}\n      <InputComponent {...(commonInputProps as CustomInputProps)} />\n      {errorMessageElement}\n    </>\n  );\n};\n\nexport default InputRenderer;\n","// src/features/inputs/components/InputRenderer.tsx\nimport React from 'react';\nimport {\n  FormField,\n  FormConfig,\n  FormClassNameConfig,\n  RenderLabelProps,\n  RenderErrorMessageProps,\n  InputComponentMap,\n  FieldClassNameConfig,\n} from '../../dynamic-form/types';\nimport { getInputComponent } from '../registry/InputRegistry';\nimport { CommonInputProps, CustomInputProps } from '../types';\nimport { ErrorMessage } from '../../../styles';\nimport { mergeClassNames } from '../../dynamic-form/utils/formUtils'; // Import hàm mergeClassNames\n\ninterface InputRendererProps {\n  field: FormField;\n  config: FormConfig;\n  formClassNameConfig: FormClassNameConfig;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  renderLabel?: RenderLabelProps;\n  renderErrorMessage?: RenderErrorMessageProps;\n  customInputs?: InputComponentMap;\n}\n\nconst InputRenderer: React.FC<InputRendererProps> = ({\n  field,\n  config,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  renderErrorMessage,\n  customInputs,\n}) => {\n  const { id, type, error } = field;\n  const fieldConfig = config[id] || {};\n\n  // Prioritize custom input components\n  const CustomInputComponent = customInputs?.[type];\n  const RegisteredInputComponent = getInputComponent(type);\n  const InputComponent = CustomInputComponent || RegisteredInputComponent;\n\n  // Merge class names\n  const mergedFormClassNameConfig = mergeClassNames(\n    {}, // Default empty object\n    formClassNameConfig,\n    fieldConfig.classNameConfig\n  );\n\n  const commonInputProps: CommonInputProps = {\n    id,\n    fieldConfig,\n    formClassNameConfig: mergedFormClassNameConfig, // Truyền mergedFormClassNameConfig thay vì formClassNameConfig\n    showInlineError,\n    horizontalLabel,\n    labelWidth,\n    error,\n    disableAutocomplete,\n  };\n\n  // Render error message using renderErrorMessage prop or default\n  const errorMessageElement =\n    showInlineError && error && renderErrorMessage\n      ? renderErrorMessage(error, mergedFormClassNameConfig) // Sử dụng mergedFormClassNameConfig\n      : showInlineError && error\n      ? React.createElement(ErrorMessage, {\n          className: mergedFormClassNameConfig.errorMessage, // Sử dụng mergedFormClassNameConfig\n          children: error.message,\n        })\n      : null;\n\n  if (!InputComponent) {\n    console.warn(`No input component found for type: ${type}`);\n    return null;\n  }\n\n  return (\n    <>\n      {/* Cast to CustomInputProps for custom components */}\n      <InputComponent {...(commonInputProps as CustomInputProps)} />\n      {errorMessageElement}\n    </>\n  );\n};\n\nexport default InputRenderer;\n;InputRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"InputRenderer\",\"props\":{\"field\":{\"required\":true,\"tsType\":{\"name\":\"FormField\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":true,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"renderLabel\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderErrorMessage\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  error: FieldError | undefined,\\n  formClassNameConfig: FormClassNameConfig | undefined\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"union\",\"raw\":\"FieldError | undefined\",\"elements\":[{\"name\":\"FieldError\"},{\"name\":\"undefined\"}]},\"name\":\"error\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}};InputRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"InputRenderer\",\"props\":{\"field\":{\"required\":true,\"tsType\":{\"name\":\"FormField\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":true,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"renderLabel\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderErrorMessage\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  error: FieldError | undefined,\\n  formClassNameConfig: FormClassNameConfig | undefined\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"union\",\"raw\":\"FieldError | undefined\",\"elements\":[{\"name\":\"FieldError\"},{\"name\":\"undefined\"}]},\"name\":\"error\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}}"],"names":[],"sourceRoot":""}
"use strict";
self["webpackHotUpdate_matthew_ngo_react_dynamic_form"]("src_index_ts",{

/***/ "./src/DynamicForm.tsx":
/*!*****************************!*\
  !*** ./src/DynamicForm.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/dynamic-form */ "./src/features/dynamic-form/index.ts");
/* harmony import */ var _features_form_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./features/form-renderer */ "./src/features/form-renderer/index.ts");
/* harmony import */ var _theme_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./theme/ThemeProvider */ "./src/theme/ThemeProvider.tsx");
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./styles */ "./src/styles.ts");
/* harmony import */ var _features_inputs_registry_components_FlexLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./features/inputs/registry/components/FlexLayout */ "./src/features/inputs/registry/components/FlexLayout.tsx");
/* harmony import */ var _features_inputs_registry_components_GridLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./features/inputs/registry/components/GridLayout */ "./src/features/inputs/registry/components/GridLayout.tsx");
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components */ "./src/components/index.ts");

// Filepath: /src/DynamicForm.tsx








var DynamicForm = function (_a) {
    var _b = _a.config, config = _b === void 0 ? {} : _b, onChange = _a.onChange, onSubmit = _a.onSubmit, formOptions = _a.formOptions, header = _a.header, footer = _a.footer, _c = _a.readOnly, readOnly = _c === void 0 ? false : _c, _d = _a.disableForm, disableForm = _d === void 0 ? false : _d, _e = _a.showSubmitButton, showSubmitButton = _e === void 0 ? true : _e, autoSave = _a.autoSave, _f = _a.resetOnSubmit, resetOnSubmit = _f === void 0 ? false : _f, _g = _a.focusFirstError, focusFirstError = _g === void 0 ? false : _g, className = _a.className, _h = _a.formClassNameConfig, formClassNameConfig = _h === void 0 ? {} : _h, style = _a.style, renderLayout = _a.renderLayout, _j = _a.layout, layout = _j === void 0 ? 'grid' : _j, _k = _a.layoutConfig, layoutConfig = _k === void 0 ? {
        minWidth: '300px',
    } : _k, // Default layoutConfig
    _l = _a.horizontalLabel, // Default layoutConfig
    horizontalLabel = _l === void 0 ? false : _l, labelWidth = _a.labelWidth, _m = _a.enableLocalStorage, enableLocalStorage = _m === void 0 ? false : _m, _o = _a.debounceOnChange, debounceOnChange = _o === void 0 ? 0 : _o, _p = _a.disableAutocomplete, disableAutocomplete = _p === void 0 ? false : _p, _q = _a.showInlineError, showInlineError = _q === void 0 ? true : _q, _r = _a.showErrorSummary, showErrorSummary = _r === void 0 ? false : _r, _s = _a.validateOnBlur, validateOnBlur = _s === void 0 ? false : _s, _t = _a.validateOnChange, validateOnChange = _t === void 0 ? true : _t, _u = _a.validateOnSubmit, validateOnSubmit = _u === void 0 ? true : _u, theme = _a.theme, customInputs = _a.customInputs, onFormReady = _a.onFormReady, renderSubmitButton = _a.renderSubmitButton, onError = _a.onError, renderErrorSummary = _a.renderErrorSummary;
    var mergedFormOptions = (0,_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.useRHFOptions)(config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur);
    var form = (0,_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.useDynamicForm)({
        config: config,
        formOptions: mergedFormOptions,
        autoSave: autoSave,
        enableLocalStorage: enableLocalStorage,
        resetOnSubmit: resetOnSubmit,
        focusFirstError: focusFirstError,
        debounceOnChange: debounceOnChange,
        onChange: onChange,
        onFormReady: onFormReady,
    });
    var _v = form((0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)({}, formOptions), { defaultValues: defaultValues })), formState = _v.formState, control = _v.control, handleSubmit = _v.handleSubmit;
    var _w = (0,_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.useFormFields)(config, // Pass config instead of data
    formState, control, validationMessages), fields = _w.fields, fieldsToRender = _w.fieldsToRender, conditionalFieldsConfig = _w.conditionalFieldsConfig;
    var onSubmitHandler = function () {
        handleSubmit(function (data) {
            if (onSubmit) {
                onSubmit(data);
            }
        }, function (errors) {
            if (onError) {
                onError(errors);
            }
        })();
    };
    var defaultRenderErrorSummary = function (errors, formClassNameConfig) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_7__.ErrorSummary, { errors: errors, formClassNameConfig: formClassNameConfig }));
    };
    var LayoutComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
        if (renderLayout) {
            return renderLayout;
        }
        if (layout === 'flex') {
            return _features_inputs_registry_components_FlexLayout__WEBPACK_IMPORTED_MODULE_5__.FlexLayout;
        }
        return _features_inputs_registry_components_GridLayout__WEBPACK_IMPORTED_MODULE_6__.GridLayout;
    }, [renderLayout, layout]);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_theme_ThemeProvider__WEBPACK_IMPORTED_MODULE_3__["default"], { theme: theme || {} },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_features_dynamic_form__WEBPACK_IMPORTED_MODULE_1__.DynamicFormProvider, { form: form },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LayoutComponent, { onSubmit: onSubmitHandler, className: className, formClassNameConfig: formClassNameConfig, style: style, layout: layout, layoutConfig: layoutConfig, horizontalLabel: horizontalLabel },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_features_form_renderer__WEBPACK_IMPORTED_MODULE_2__.FormRenderer, { onSubmit: onSubmitHandler, className: className, formClassNameConfig: formClassNameConfig, style: style, layout: layout, layoutConfig: layoutConfig, horizontalLabel: horizontalLabel, theme: theme, header: header, fieldsToRender: fieldsToRender, fields: fields, config: config, footer: footer, readOnly: readOnly, disableForm: disableForm, showSubmitButton: showSubmitButton, renderSubmitButton: renderSubmitButton, formOptions: formOptions, showErrorSummary: showErrorSummary, labelWidth: labelWidth, disableAutocomplete: disableAutocomplete, showInlineError: showInlineError, conditionalFieldsConfig: conditionalFieldsConfig, customInputs: customInputs, renderErrorSummary: renderErrorSummary || defaultRenderErrorSummary })),
            showSubmitButton &&
                (renderSubmitButton ? (renderSubmitButton(onSubmitHandler, formState.isSubmitting)) : (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_4__.SubmitButton, { type: "submit", onClick: onSubmitHandler, disabled: formState.isSubmitting, className: formClassNameConfig === null || formClassNameConfig === void 0 ? void 0 : formClassNameConfig.button }, "Submit"))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DynamicForm);
;
DynamicForm.__docgenInfo = { "description": "", "methods": [], "displayName": "DynamicForm", "props": { "config": { "required": false, "tsType": { "name": "FormConfig" }, "description": "The form configuration.", "defaultValue": { "value": "{}", "computed": false } }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form data changes." }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "Optional callback function to be called when the form is submitted." }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "Optional options for react-hook-form's useForm hook." }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "Optional Yup schema for form validation." }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional header element for the form." }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional footer element for the form." }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is read-only.", "defaultValue": { "value": "false", "computed": false } }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is disabled.", "defaultValue": { "value": "false", "computed": false } }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show the submit button.", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "Optional auto-save configuration." }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to reset the form on submit.", "defaultValue": { "value": "false", "computed": false } }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to focus on the first error field on submit.", "defaultValue": { "value": "false", "computed": false } }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "The layout type for the form.", "defaultValue": { "value": "'grid'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "Optional layout configuration.", "defaultValue": { "value": "{\n  minWidth: '300px',\n}", "computed": false } }, "renderLayout": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  children: React.ReactNode;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layout: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  children: React.ReactNode;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layout: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}", "signature": { "properties": [{ "key": "children", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": true } }, { "key": "onSubmit", "value": { "name": "signature", "type": "function", "raw": "(event: React.FormEvent<HTMLFormElement>) => void", "signature": { "arguments": [{ "type": { "name": "ReactFormEvent", "raw": "React.FormEvent<HTMLFormElement>", "elements": [{ "name": "HTMLFormElement" }] }, "name": "event" }], "return": { "name": "void" } }, "required": true } }, { "key": "className", "value": { "name": "string", "required": false } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }, { "key": "style", "value": { "name": "ReactCSSProperties", "raw": "React.CSSProperties", "required": false } }, { "key": "layout", "value": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }], "required": true } }, { "key": "layoutConfig", "value": { "name": "any", "required": false } }, { "key": "horizontalLabel", "value": { "name": "boolean", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom layout renderer." }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to use horizontal labels.", "defaultValue": { "value": "false", "computed": false } }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "Optional label width (for horizontal labels)." }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to enable local storage for the form data.", "defaultValue": { "value": "false", "computed": false } }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "Optional debounce time (in ms) for the onChange callback.", "defaultValue": { "value": "0", "computed": false } }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to disable autocomplete for the form.", "defaultValue": { "value": "false", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show inline error messages.", "defaultValue": { "value": "true", "computed": false } }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show an error summary.", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on blur.", "defaultValue": { "value": "false", "computed": false } }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on change.", "defaultValue": { "value": "true", "computed": false } }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on submit.", "defaultValue": { "value": "true", "computed": false } }, "className": { "required": false, "tsType": { "name": "string" }, "description": "Optional CSS class name for the form container." }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "Optional CSS class names for form elements.", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "Optional inline styles for the form container." }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "Optional theme object." }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form is ready." }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom submit button renderer." }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form content renderer." }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form footer renderer." }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "Optional custom validators." }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "Optional custom input components." }, "onError": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(errors: FieldErrors) => void", "signature": { "arguments": [{ "type": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>" }, "name": "errors" }], "return": { "name": "void" } } }, "description": "Optional error handler function." }, "renderErrorSummary": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(errors: FieldErrors, formClassNameConfig: FormClassNameConfig | undefined) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>" }, "name": "errors" }, { "type": { "name": "union", "raw": "FormClassNameConfig | undefined", "elements": [{ "name": "FormClassNameConfig" }, { "name": "undefined" }] }, "name": "formClassNameConfig" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom error summary renderer." } } };
DynamicForm.__docgenInfo = { "description": "", "methods": [], "displayName": "DynamicForm", "props": { "config": { "required": false, "tsType": { "name": "FormConfig" }, "description": "The form configuration.", "defaultValue": { "value": "{}", "computed": false } }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form data changes." }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "Optional callback function to be called when the form is submitted." }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "Optional options for react-hook-form's useForm hook." }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "Optional Yup schema for form validation." }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional header element for the form." }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional footer element for the form." }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is read-only.", "defaultValue": { "value": "false", "computed": false } }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is disabled.", "defaultValue": { "value": "false", "computed": false } }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show the submit button.", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "Optional auto-save configuration." }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to reset the form on submit.", "defaultValue": { "value": "false", "computed": false } }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to focus on the first error field on submit.", "defaultValue": { "value": "false", "computed": false } }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "The layout type for the form.", "defaultValue": { "value": "'grid'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "Optional layout configuration.", "defaultValue": { "value": "{\n  minWidth: '300px',\n}", "computed": false } }, "renderLayout": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  children: React.ReactNode;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layout: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  children: React.ReactNode;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layout: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}", "signature": { "properties": [{ "key": "children", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": true } }, { "key": "onSubmit", "value": { "name": "signature", "type": "function", "raw": "(event: React.FormEvent<HTMLFormElement>) => void", "signature": { "arguments": [{ "type": { "name": "ReactFormEvent", "raw": "React.FormEvent<HTMLFormElement>", "elements": [{ "name": "HTMLFormElement" }] }, "name": "event" }], "return": { "name": "void" } }, "required": true } }, { "key": "className", "value": { "name": "string", "required": false } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }, { "key": "style", "value": { "name": "ReactCSSProperties", "raw": "React.CSSProperties", "required": false } }, { "key": "layout", "value": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }], "required": true } }, { "key": "layoutConfig", "value": { "name": "any", "required": false } }, { "key": "horizontalLabel", "value": { "name": "boolean", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom layout renderer." }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to use horizontal labels.", "defaultValue": { "value": "false", "computed": false } }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "Optional label width (for horizontal labels)." }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to enable local storage for the form data.", "defaultValue": { "value": "false", "computed": false } }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "Optional debounce time (in ms) for the onChange callback.", "defaultValue": { "value": "0", "computed": false } }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to disable autocomplete for the form.", "defaultValue": { "value": "false", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show inline error messages.", "defaultValue": { "value": "true", "computed": false } }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show an error summary.", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on blur.", "defaultValue": { "value": "false", "computed": false } }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on change.", "defaultValue": { "value": "true", "computed": false } }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on submit.", "defaultValue": { "value": "true", "computed": false } }, "className": { "required": false, "tsType": { "name": "string" }, "description": "Optional CSS class name for the form container." }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "Optional CSS class names for form elements.", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "Optional inline styles for the form container." }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "Optional theme object." }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form is ready." }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom submit button renderer." }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form content renderer." }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form footer renderer." }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "Optional custom validators." }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "Optional custom input components." }, "onError": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(errors: FieldErrors) => void", "signature": { "arguments": [{ "type": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>" }, "name": "errors" }], "return": { "name": "void" } } }, "description": "Optional error handler function." }, "renderErrorSummary": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(errors: FieldErrors, formClassNameConfig: FormClassNameConfig | undefined) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>" }, "name": "errors" }, { "type": { "name": "union", "raw": "FormClassNameConfig | undefined", "elements": [{ "name": "FormClassNameConfig" }, { "name": "undefined" }] }, "name": "formClassNameConfig" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom error summary renderer." } } };


/***/ })

});
//# sourceMappingURL=src_index_ts.52480c997711e61368ab.hot-update.js.map
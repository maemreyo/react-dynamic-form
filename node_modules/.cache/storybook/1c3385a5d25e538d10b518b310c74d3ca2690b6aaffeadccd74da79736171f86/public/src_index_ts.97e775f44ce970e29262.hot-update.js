"use strict";
self["webpackHotUpdate_matthew_ngo_react_dynamic_form"]("src_index_ts",{

/***/ "./src/features/dynamic-form/utils/formUtils.ts":
/*!******************************************************!*\
  !*** ./src/features/dynamic-form/utils/formUtils.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debounce: () => (/* binding */ debounce),
/* harmony export */   flattenConfig: () => (/* binding */ flattenConfig),
/* harmony export */   flattenObject: () => (/* binding */ flattenObject),
/* harmony export */   loadFromLocalStorage: () => (/* binding */ loadFromLocalStorage),
/* harmony export */   mergeClassNames: () => (/* binding */ mergeClassNames),
/* harmony export */   saveToLocalStorage: () => (/* binding */ saveToLocalStorage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

/**
 * Flattens a nested object into a single-level object.
 *
 * @param obj - The object to flatten.
 * @param parentKey - The parent key (used for recursion).
 * @param result - The resulting flattened object.
 * @returns The flattened object.
 */
var flattenObject = function (obj, parentKey, result) {
    if (parentKey === void 0) { parentKey = ''; }
    if (result === void 0) { result = {}; }
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var newKey = parentKey ? "".concat(parentKey, ".").concat(key) : key;
            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {
                flattenObject(obj[key], newKey, result);
            }
            else {
                result[newKey] = obj[key];
            }
        }
    }
    return result;
};
/**
 * Flattens a nested config object into a single-level object.
 *
 * @param config - The config object to flatten.
 * @param parentKey - The parent key (used for recursion).
 * @param result - The resulting flattened config object.
 * @returns The flattened config object.
 */
var flattenConfig = function (config, parentKey, result) {
    if (parentKey === void 0) { parentKey = ''; }
    if (result === void 0) { result = {}; }
    for (var key in config) {
        if (Object.prototype.hasOwnProperty.call(config, key)) {
            var newKey = parentKey ? "".concat(parentKey, ".").concat(key) : key;
            var fieldConfig = config[key];
            if (fieldConfig.fields) {
                flattenConfig(fieldConfig.fields, newKey, result);
            }
            else {
                result[newKey] = fieldConfig;
            }
        }
    }
    return result;
};
/**
 * Debounces a function.
 *
 * @param func - The function to debounce.
 * @param wait - The debounce time in milliseconds.
 * @returns The debounced function.
 */
var debounce = function (func, wait) {
    var timeout;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var later = function () {
            timeout = null;
            func.apply(void 0, args);
        };
        if (timeout)
            clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};
/**
 * Saves data to localStorage.
 *
 * @param key - The key to store the data under.
 * @param data - The data to store.
 */
var saveToLocalStorage = function (key, data) {
    localStorage.setItem(key, JSON.stringify(data));
};
/**
 * Loads data from localStorage.
 *
 * @param key - The key to load the data from.
 * @returns The loaded data, or null if no data is found.
 */
var loadFromLocalStorage = function (key) {
    var data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
};
/**
 * Merges multiple classNameConfig objects into a single object.
 *
 * @param defaultClassNames - The default classNameConfig object.
 * @param formClassNames - The form-level classNameConfig object.
 * @param fieldClassNames - The field-level classNameConfig object.
 * @returns The merged classNameConfig object.
 */
var mergeClassNames = function (defaultClassNames, formClassNames, fieldClassNames) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, defaultClassNames), formClassNames), fieldClassNames);
};


/***/ }),

/***/ "./src/features/form-renderer/FormRenderer.tsx":
/*!*****************************************************!*\
  !*** ./src/features/form-renderer/FormRenderer.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "./node_modules/react-hook-form/dist/index.esm.mjs");
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components */ "./src/features/form-renderer/components/index.ts");
// Filepath: /src/features/form-renderer/FormRenderer.tsx
// @ts-nocheck



var FormRenderer = function (_a) {
    var onSubmit = _a.onSubmit, className = _a.className, _b = _a.formClassNameConfig, formClassNameConfig = _b === void 0 ? {} : _b, style = _a.style, _c = _a.layout, layout = _c === void 0 ? 'grid' : _c, layoutConfig = _a.layoutConfig, horizontalLabel = _a.horizontalLabel, theme = _a.theme, header = _a.header, fieldsToRender = _a.fieldsToRender, fields = _a.fields, config = _a.config, footer = _a.footer, _d = _a.showSubmitButton, showSubmitButton = _d === void 0 ? true : _d, renderSubmitButton = _a.renderSubmitButton, _e = _a.showErrorSummary, showErrorSummary = _e === void 0 ? false : _e, labelWidth = _a.labelWidth, disableAutocomplete = _a.disableAutocomplete, showInlineError = _a.showInlineError, renderFormContent = _a.renderFormContent, renderFormFooter = _a.renderFormFooter, customInputs = _a.customInputs;
    var form = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.useFormContext)();
    var formState = form.formState, handleSubmit = form.handleSubmit;
    var content = renderFormContent ? (renderFormContent({
        fieldsToRender: fieldsToRender,
        fields: fields,
        config: config,
        formClassNameConfig: formClassNameConfig,
        horizontalLabel: horizontalLabel,
        labelWidth: labelWidth,
        disableAutocomplete: disableAutocomplete,
        showInlineError: showInlineError,
        conditionalFieldsConfig: [],
        renderInput: function (field, fieldConfig, commonInputProps) { return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null); },
    })) : (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_1__.FormContent, { fieldsToRender: fieldsToRender, fields: fields, config: config, formClassNameConfig: formClassNameConfig, horizontalLabel: horizontalLabel, labelWidth: labelWidth, disableAutocomplete: disableAutocomplete, showInlineError: showInlineError, conditionalFieldsConfig: [], customInputs: customInputs }));
    var footerContent = renderFormFooter ? (renderFormFooter({
        footer: footer,
        showSubmitButton: showSubmitButton,
        renderSubmitButton: renderSubmitButton,
        isSubmitting: formState.isSubmitting,
        showErrorSummary: showErrorSummary,
        errors: formState.errors,
        formClassNameConfig: formClassNameConfig,
    })) : (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_1__.FormFooter, { footer: footer, formClassNameConfig: formClassNameConfig, showSubmitButton: showSubmitButton, renderSubmitButton: renderSubmitButton, isSubmitting: formState.isSubmitting, showErrorSummary: showErrorSummary, errors: formState.errors }));
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null,
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_1__.FormLayout, { onSubmit: handleSubmit(onSubmit), className: className, formClassNameConfig: formClassNameConfig, style: style, layout: layout, layoutConfig: layoutConfig, horizontalLabel: horizontalLabel, theme: theme },
            header,
            content),
        footerContent));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormRenderer);
;
FormRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "FormRenderer", "props": { "config": { "required": true, "tsType": { "name": "FormConfig" }, "description": "The form configuration." }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form data changes." }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "Optional callback function to be called when the form is submitted." }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "Optional options for react-hook-form's useForm hook." }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "Optional Yup schema for form validation." }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional header element for the form." }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional footer element for the form." }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is read-only." }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is disabled." }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show the submit button.", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "Optional auto-save configuration." }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to reset the form on submit." }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to focus on the first error field on submit." }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "The layout type for the form.", "defaultValue": { "value": "'grid'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "Optional layout configuration." }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to use horizontal labels." }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "Optional label width (for horizontal labels)." }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to enable local storage for the form data." }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "Optional debounce time (in ms) for the onChange callback." }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to disable autocomplete for the form." }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show inline error messages." }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show an error summary.", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on blur." }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on change." }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on submit." }, "className": { "required": false, "tsType": { "name": "string" }, "description": "Optional CSS class name for the form container." }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "Optional CSS class names for form elements.", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "Optional inline styles for the form container." }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "Optional theme object." }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form is ready." }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom submit button renderer." }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form content renderer." }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form footer renderer." }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "Optional custom validators." }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "Optional custom input components." }, "fieldsToRender": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "string" }], "raw": "string[]" }, "description": "List of field IDs to render." }, "fields": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "FormField" }], "raw": "FormField[]" }, "description": "List of form fields." }, "conditionalFieldsConfig": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "Condition" }], "raw": "Condition[]" }, "description": "Configuration for conditional fields." } } };
FormRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "FormRenderer", "props": { "config": { "required": true, "tsType": { "name": "FormConfig" }, "description": "The form configuration." }, "onChange": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(formData: FormValues) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "formData" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form data changes." }, "onSubmit": { "required": false, "tsType": { "name": "SubmitHandler", "elements": [{ "name": "FieldValues" }], "raw": "SubmitHandler<FieldValues>" }, "description": "Optional callback function to be called when the form is submitted." }, "formOptions": { "required": false, "tsType": { "name": "UseFormProps" }, "description": "Optional options for react-hook-form's useForm hook." }, "validationSchema": { "required": false, "tsType": { "name": "Schema", "elements": [{ "name": "any" }], "raw": "Schema<any>" }, "description": "Optional Yup schema for form validation." }, "header": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional header element for the form." }, "footer": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "Optional footer element for the form." }, "readOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is read-only." }, "disableForm": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether the form is disabled." }, "showSubmitButton": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show the submit button.", "defaultValue": { "value": "true", "computed": false } }, "autoSave": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  interval: number;\n  save: (data: Record<string, any>) => void;\n}", "signature": { "properties": [{ "key": "interval", "value": { "name": "number", "required": true } }, { "key": "save", "value": { "name": "signature", "type": "function", "raw": "(data: Record<string, any>) => void", "signature": { "arguments": [{ "type": { "name": "Record", "elements": [{ "name": "string" }, { "name": "any" }], "raw": "Record<string, any>" }, "name": "data" }], "return": { "name": "void" } }, "required": true } }] } }, "description": "Optional auto-save configuration." }, "resetOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to reset the form on submit." }, "focusFirstError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to focus on the first error field on submit." }, "layout": { "required": false, "tsType": { "name": "union", "raw": "'flex' | 'grid'", "elements": [{ "name": "literal", "value": "'flex'" }, { "name": "literal", "value": "'grid'" }] }, "description": "The layout type for the form.", "defaultValue": { "value": "'grid'", "computed": false } }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "Optional layout configuration." }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to use horizontal labels." }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "Optional label width (for horizontal labels)." }, "enableLocalStorage": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to enable local storage for the form data." }, "debounceOnChange": { "required": false, "tsType": { "name": "number" }, "description": "Optional debounce time (in ms) for the onChange callback." }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to disable autocomplete for the form." }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show inline error messages." }, "showErrorSummary": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show an error summary.", "defaultValue": { "value": "false", "computed": false } }, "validateOnBlur": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on blur." }, "validateOnChange": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on change." }, "validateOnSubmit": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to validate on submit." }, "className": { "required": false, "tsType": { "name": "string" }, "description": "Optional CSS class name for the form container." }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "Optional CSS class names for form elements.", "defaultValue": { "value": "{}", "computed": false } }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "Optional inline styles for the form container." }, "theme": { "required": false, "tsType": { "name": "any" }, "description": "Optional theme object." }, "onFormReady": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(form: UseFormReturn<any>) => void", "signature": { "arguments": [{ "type": { "name": "UseFormReturn", "elements": [{ "name": "any" }], "raw": "UseFormReturn<any>" }, "name": "form" }], "return": { "name": "void" } } }, "description": "Optional callback function to be called when the form is ready." }, "renderSubmitButton": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom submit button renderer." }, "renderFormContent": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "intersection", "raw": "Omit<FormContentProps, 'renderInput'> & {\n  renderInput: RenderInputProps;\n}", "elements": [{ "name": "Omit", "elements": [{ "name": "FormContentProps" }, { "name": "literal", "value": "'renderInput'" }], "raw": "Omit<FormContentProps, 'renderInput'>" }, { "name": "signature", "type": "object", "raw": "{\n  renderInput: RenderInputProps;\n}", "signature": { "properties": [{ "key": "renderInput", "value": { "name": "signature", "type": "function", "raw": "(\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FormField" }, "name": "field" }, { "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }] } }] }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form content renderer." }, "renderFormFooter": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "object", "raw": "{\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}", "signature": { "properties": [{ "key": "footer", "value": { "name": "ReactReactNode", "raw": "React.ReactNode", "required": false } }, { "key": "showSubmitButton", "value": { "name": "boolean", "required": true } }, { "key": "renderSubmitButton", "value": { "name": "signature", "type": "function", "raw": "(\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "signature", "type": "function", "raw": "(e?: React.BaseSyntheticEvent) => Promise<void>", "signature": { "arguments": [{ "type": { "name": "ReactBaseSyntheticEvent", "raw": "React.BaseSyntheticEvent" }, "name": "e" }], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "name": "handleSubmit" }, { "type": { "name": "boolean" }, "name": "isSubmitting" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } }, "required": true } }, { "key": "isSubmitting", "value": { "name": "boolean", "required": true } }, { "key": "showErrorSummary", "value": { "name": "boolean", "required": true } }, { "key": "errors", "value": { "name": "RHFFieldErrors", "elements": [{ "name": "FieldValues" }], "raw": "RHFFieldErrors<FieldValues>", "required": true } }, { "key": "formClassNameConfig", "value": { "name": "FormClassNameConfig", "required": false } }] } }, "name": "props" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "Optional custom form footer renderer." }, "customValidators": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: (value: any, context: any) => string | undefined;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "signature", "type": "function", "raw": "(value: any, context: any) => string | undefined", "signature": { "arguments": [{ "type": { "name": "any" }, "name": "value" }, { "type": { "name": "any" }, "name": "context" }], "return": { "name": "union", "raw": "string | undefined", "elements": [{ "name": "string" }, { "name": "undefined" }] } }, "required": true } }] } }, "description": "Optional custom validators." }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "Optional custom input components." }, "fieldsToRender": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "string" }], "raw": "string[]" }, "description": "List of field IDs to render." }, "fields": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "FormField" }], "raw": "FormField[]" }, "description": "List of form fields." }, "conditionalFieldsConfig": { "required": true, "tsType": { "name": "Array", "elements": [{ "name": "Condition" }], "raw": "Condition[]" }, "description": "Configuration for conditional fields." } } };


/***/ }),

/***/ "./src/features/inputs/components/CheckboxInput.tsx":
/*!**********************************************************!*\
  !*** ./src/features/inputs/components/CheckboxInput.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-hook-form */ "./node_modules/react-hook-form/dist/index.esm.mjs");
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../styles */ "./src/styles.ts");
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-components */ "./node_modules/styled-components/dist/styled-components.browser.esm.js");
// Filepath: /src/features/inputs/components/CheckboxInput.tsx





var CheckboxInputStyled = styled_components__WEBPACK_IMPORTED_MODULE_2__["default"].input(templateObject_1 || (templateObject_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__makeTemplateObject)(["\n  appearance: none;\n  width: 18px; /* Gi\u1EA3m k\u00EDch th\u01B0\u1EDBc */\n  height: 18px; /* Gi\u1EA3m k\u00EDch th\u01B0\u1EDBc */\n  border: 1px solid ", ";\n  border-radius: 4px; /* Bo tr\u00F2n */\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ", ";\n  }\n\n  &:checked {\n    background-color: ", ";\n    border-color: ", ";\n  }\n\n  &:checked::after {\n    content: '\u2714';\n    display: block;\n    text-align: center;\n    font-size: 14px; /* Gi\u1EA3m k\u00EDch th\u01B0\u1EDBc icon */\n    line-height: 18px; /* C\u0103n gi\u1EEFa icon */\n    color: ", ";\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ", "; /* Hi\u1EC7u \u1EE9ng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n"], ["\n  appearance: none;\n  width: 18px; /* Gi\u1EA3m k\u00EDch th\u01B0\u1EDBc */\n  height: 18px; /* Gi\u1EA3m k\u00EDch th\u01B0\u1EDBc */\n  border: 1px solid ", ";\n  border-radius: 4px; /* Bo tr\u00F2n */\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ", ";\n  }\n\n  &:checked {\n    background-color: ", ";\n    border-color: ", ";\n  }\n\n  &:checked::after {\n    content: '\u2714';\n    display: block;\n    text-align: center;\n    font-size: 14px; /* Gi\u1EA3m k\u00EDch th\u01B0\u1EDBc icon */\n    line-height: 18px; /* C\u0103n gi\u1EEFa icon */\n    color: ", ";\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ", "; /* Hi\u1EC7u \u1EE9ng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n"])), function (_a) {
    var theme = _a.theme;
    return theme.colors.border;
}, function (_a) {
    var theme = _a.theme;
    return theme.colors['info-700'];
}, function (_a) {
    var theme = _a.theme;
    return theme.colors.info;
}, function (_a) {
    var theme = _a.theme;
    return theme.colors.info;
}, function (_a) {
    var theme = _a.theme;
    return theme.colors.white;
}, function (_a) {
    var theme = _a.theme;
    return theme.colors['info-200'];
});
var CheckboxInput = function (_a) {
    var id = _a.id, fieldConfig = _a.fieldConfig, _b = _a.formClassNameConfig, formClassNameConfig = _b === void 0 ? {} : _b, showInlineError = _a.showInlineError, horizontalLabel = _a.horizontalLabel, labelWidth = _a.labelWidth, error = _a.error;
    var label = fieldConfig.label;
    var control = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_4__.useFormContext)().control;
    var field = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_4__.useController)({
        name: id,
        control: control,
        rules: fieldConfig.validation,
        defaultValue: fieldConfig.defaultValue,
    }).field;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_1__.InputWrapper, { "$horizontalLabel": horizontalLabel, "$labelWidth": labelWidth, className: formClassNameConfig.inputWrapper },
        label && (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_1__.Label, { htmlFor: id, "$horizontalLabel": horizontalLabel, "$labelWidth": labelWidth, className: formClassNameConfig.label },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CheckboxInputStyled, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, field, { className: formClassNameConfig.checkboxInput, type: "checkbox", id: id, checked: !!field.value })),
            label)),
        showInlineError && error && (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_1__.ErrorMessage, { className: formClassNameConfig.errorMessage }, error.message))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CheckboxInput);
;
CheckboxInput.__docgenInfo = { "description": "", "methods": [], "displayName": "CheckboxInput", "props": { "id": { "required": true, "tsType": { "name": "string" }, "description": "The ID of the input." }, "fieldConfig": { "required": true, "tsType": { "name": "FieldConfig" }, "description": "The field configuration." }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "Optional CSS class names for form elements.", "defaultValue": { "value": "{}", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show inline error messages." }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to use a horizontal label." }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "Optional label width (for horizontal labels)." }, "error": { "required": false, "tsType": { "name": "FieldError" }, "description": "The field error (if any)." }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to disable autocomplete for the input." } } };
CheckboxInput.__docgenInfo = { "description": "", "methods": [], "displayName": "CheckboxInput", "props": { "id": { "required": true, "tsType": { "name": "string" }, "description": "The ID of the input." }, "fieldConfig": { "required": true, "tsType": { "name": "FieldConfig" }, "description": "The field configuration." }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "Optional CSS class names for form elements.", "defaultValue": { "value": "{}", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to show inline error messages." }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to use a horizontal label." }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "Optional label width (for horizontal labels)." }, "error": { "required": false, "tsType": { "name": "FieldError" }, "description": "The field error (if any)." }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "Whether to disable autocomplete for the input." } } };
var templateObject_1;


/***/ }),

/***/ "./src/features/inputs/components/ComboBox.tsx":
/*!*****************************************************!*\
  !*** ./src/features/inputs/components/ComboBox.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-hook-form */ "./node_modules/react-hook-form/dist/index.esm.mjs");
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../styles */ "./src/styles.ts");
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-components */ "./node_modules/styled-components/dist/styled-components.browser.esm.js");
// Filepath: /src/features/inputs/components/ComboBox.tsx





var ComboBoxContainer = styled_components__WEBPACK_IMPORTED_MODULE_2__["default"].div(templateObject_1 || (templateObject_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__makeTemplateObject)(["\n  position: relative;\n  width: 100%;\n"], ["\n  position: relative;\n  width: 100%;\n"])));
var DropdownList = styled_components__WEBPACK_IMPORTED_MODULE_2__["default"].ul(templateObject_2 || (templateObject_2 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__makeTemplateObject)(["\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ", ";\n  border-radius: 8px; /* Bo tr\u00F2n */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n"], ["\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ", ";\n  border-radius: 8px; /* Bo tr\u00F2n */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n"])), function (_a) {
    var theme = _a.theme;
    return theme.colors.border;
});
var DropdownItem = styled_components__WEBPACK_IMPORTED_MODULE_2__["default"].li(templateObject_3 || (templateObject_3 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__makeTemplateObject)(["\n  padding: 8px 12px; /* Gi\u1EA3m padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ", ";\n  }\n  &.selected {\n    background-color: ", ";\n    color: white;\n  }\n"], ["\n  padding: 8px 12px; /* Gi\u1EA3m padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ", ";\n  }\n  &.selected {\n    background-color: ", ";\n    color: white;\n  }\n"])), function (_a) {
    var theme = _a.theme;
    return theme.colors['light-500'];
}, function (_a) {
    var theme = _a.theme;
    return theme.colors.info;
});
var ComboBox = function (_a) {
    var _b;
    var id = _a.id, fieldConfig = _a.fieldConfig, _c = _a.formClassNameConfig, formClassNameConfig = _c === void 0 ? {} : _c, showInlineError = _a.showInlineError, horizontalLabel = _a.horizontalLabel, labelWidth = _a.labelWidth, error = _a.error;
    var label = fieldConfig.label, options = fieldConfig.options;
    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), isOpen = _d[0], setIsOpen = _d[1];
    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(''), inputValue = _e[0], setInputValue = _e[1];
    var _f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1), highlightedIndex = _f[0], setHighlightedIndex = _f[1];
    var containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var control = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_4__.useFormContext)().control;
    var field = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_4__.useController)({
        name: id,
        control: control,
        rules: fieldConfig.validation,
    }).field;
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        setInputValue(field.value || '');
    }, [field.value]);
    var filteredOptions = options
        ? options.filter(function (option) {
            return option.label.toLowerCase().includes(inputValue.toLowerCase());
        })
        : [];
    var handleInputChange = function (event) {
        var val = event.target.value;
        setInputValue(val);
        field.onChange(event); // Update form state
        if (!isOpen && val) {
            setIsOpen(true);
        }
        else if (isOpen && !val) {
            setIsOpen(false);
        }
    };
    var handleOptionClick = function (value) {
        setInputValue(value);
        field.onChange(value); // Update form state
        setIsOpen(false);
    };
    var toggleDropdown = function () {
        setIsOpen(!isOpen);
    };
    var closeDropdown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {
        setIsOpen(false);
    }, []);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        var handleClickOutside = function (event) {
            if (containerRef.current &&
                !containerRef.current.contains(event.target)) {
                closeDropdown();
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return function () { return document.removeEventListener('mousedown', handleClickOutside); };
    }, [closeDropdown]);
    var handleKeyDown = function (event) {
        if (event.key === 'ArrowDown') {
            event.preventDefault();
            setHighlightedIndex(function (prevIndex) {
                return filteredOptions.length > 0
                    ? Math.min(prevIndex + 1, filteredOptions.length - 1)
                    : -1;
            });
        }
        else if (event.key === 'ArrowUp') {
            event.preventDefault();
            setHighlightedIndex(function (prevIndex) {
                return prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1;
            });
        }
        else if (event.key === 'Enter') {
            event.preventDefault();
            if (highlightedIndex >= 0) {
                var selectedValue = filteredOptions[highlightedIndex].value;
                setInputValue(selectedValue);
                field.onChange(selectedValue); // Update form state
                setIsOpen(false);
            }
        }
        else if (event.key === 'Escape') {
            event.preventDefault();
            setIsOpen(false);
        }
    };
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (isOpen && highlightedIndex >= 0 && containerRef.current) {
            var item = containerRef.current.querySelector("li:nth-child(".concat(highlightedIndex + 1, ")"));
            if (item) {
                item.scrollIntoView({ block: 'nearest', inline: 'start' });
            }
        }
    }, [isOpen, highlightedIndex]);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_1__.InputWrapper, { "$horizontalLabel": horizontalLabel, "$labelWidth": labelWidth, className: formClassNameConfig.inputWrapper },
        label && (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_1__.Label, { htmlFor: id, "$horizontalLabel": horizontalLabel, "$labelWidth": labelWidth, className: formClassNameConfig.label },
            label,
            ((_b = fieldConfig.validation) === null || _b === void 0 ? void 0 : _b.required) && (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", { style: { color: 'red' } }, "*")))),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ComboBoxContainer, { ref: containerRef, className: formClassNameConfig.comboBoxContainer },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_1__.Input, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, field, { className: formClassNameConfig.comboBox, id: id, value: inputValue, onChange: handleInputChange, onClick: toggleDropdown, onKeyDown: handleKeyDown, autoComplete: "off" })),
            isOpen && (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DropdownList, { className: formClassNameConfig.comboBoxDropdownList }, filteredOptions.length > 0 ? (filteredOptions.map(function (option, index) { return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DropdownItem, { key: option.value, onClick: function () { return handleOptionClick(option.value); }, className: "".concat(index === highlightedIndex ? 'selected' : '', " ").concat(formClassNameConfig.comboBoxDropdownItem) }, option.label)); })) : (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DropdownItem, { className: formClassNameConfig.comboBoxDropdownItem }, "No results found"))))),
        showInlineError && error && (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_1__.ErrorMessage, { className: formClassNameConfig.errorMessage }, error.message))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ComboBox);
;
ComboBox.__docgenInfo = { "description": "", "methods": [], "displayName": "ComboBox", "props": { "id": { "required": true, "tsType": { "name": "string" }, "description": "" }, "fieldConfig": { "required": true, "tsType": { "name": "FieldConfig" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "error": { "required": false, "tsType": { "name": "FieldError" }, "description": "" } } };
ComboBox.__docgenInfo = { "description": "", "methods": [], "displayName": "ComboBox", "props": { "id": { "required": true, "tsType": { "name": "string" }, "description": "" }, "fieldConfig": { "required": true, "tsType": { "name": "FieldConfig" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "", "defaultValue": { "value": "{}", "computed": false } }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "error": { "required": false, "tsType": { "name": "FieldError" }, "description": "" } } };
var templateObject_1, templateObject_2, templateObject_3;


/***/ }),

/***/ "./src/features/inputs/components/InputRenderer.tsx":
/*!**********************************************************!*\
  !*** ./src/features/inputs/components/InputRenderer.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _registry_InputRegistry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../registry/InputRegistry */ "./src/features/inputs/registry/InputRegistry.ts");
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../styles */ "./src/styles.ts");
/* harmony import */ var _dynamic_form_utils_formUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../dynamic-form/utils/formUtils */ "./src/features/dynamic-form/utils/formUtils.ts");

// src/features/inputs/components/InputRenderer.tsx



 // Import hàm mergeClassNames
var InputRenderer = function (_a) {
    var field = _a.field, config = _a.config, formClassNameConfig = _a.formClassNameConfig, disableAutocomplete = _a.disableAutocomplete, showInlineError = _a.showInlineError, horizontalLabel = _a.horizontalLabel, labelWidth = _a.labelWidth, renderErrorMessage = _a.renderErrorMessage, customInputs = _a.customInputs;
    var id = field.id, type = field.type, error = field.error;
    var fieldConfig = config[id] || {};
    // Prioritize custom input components
    var CustomInputComponent = customInputs === null || customInputs === void 0 ? void 0 : customInputs[type];
    var RegisteredInputComponent = (0,_registry_InputRegistry__WEBPACK_IMPORTED_MODULE_1__.getInputComponent)(type);
    var InputComponent = CustomInputComponent || RegisteredInputComponent;
    // Merge class names
    var mergedFormClassNameConfig = (0,_dynamic_form_utils_formUtils__WEBPACK_IMPORTED_MODULE_3__.mergeClassNames)({}, // Default empty object
    formClassNameConfig, fieldConfig.classNameConfig);
    var commonInputProps = {
        id: id,
        fieldConfig: fieldConfig,
        formClassNameConfig: mergedFormClassNameConfig, // Truyền mergedFormClassNameConfig thay vì formClassNameConfig
        showInlineError: showInlineError,
        horizontalLabel: horizontalLabel,
        labelWidth: labelWidth,
        error: error,
        disableAutocomplete: disableAutocomplete,
    };
    // Render error message using renderErrorMessage prop or default
    var errorMessageElement = showInlineError && error && renderErrorMessage
        ? renderErrorMessage(error, mergedFormClassNameConfig) // Sử dụng mergedFormClassNameConfig
        : showInlineError && error
            ? react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_styles__WEBPACK_IMPORTED_MODULE_2__.ErrorMessage, {
                className: mergedFormClassNameConfig.errorMessage, // Sử dụng mergedFormClassNameConfig
                children: error.message,
            })
            : null;
    if (!InputComponent) {
        console.warn("No input component found for type: ".concat(type));
        return null;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null,
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InputComponent, (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, commonInputProps)),
        errorMessageElement));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InputRenderer);
;
InputRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "InputRenderer", "props": { "field": { "required": true, "tsType": { "name": "FormField" }, "description": "" }, "config": { "required": true, "tsType": { "name": "FormConfig" }, "description": "" }, "formClassNameConfig": { "required": true, "tsType": { "name": "FormClassNameConfig" }, "description": "" }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "renderLabel": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderErrorMessage": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  error: FieldError | undefined,\n  formClassNameConfig: FormClassNameConfig | undefined\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "union", "raw": "FieldError | undefined", "elements": [{ "name": "FieldError" }, { "name": "undefined" }] }, "name": "error" }, { "type": { "name": "union", "raw": "FormClassNameConfig | undefined", "elements": [{ "name": "FormClassNameConfig" }, { "name": "undefined" }] }, "name": "formClassNameConfig" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "" } } };
InputRenderer.__docgenInfo = { "description": "", "methods": [], "displayName": "InputRenderer", "props": { "field": { "required": true, "tsType": { "name": "FormField" }, "description": "" }, "config": { "required": true, "tsType": { "name": "FormConfig" }, "description": "" }, "formClassNameConfig": { "required": true, "tsType": { "name": "FormClassNameConfig" }, "description": "" }, "disableAutocomplete": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "showInlineError": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "labelWidth": { "required": false, "tsType": { "name": "union", "raw": "string | number", "elements": [{ "name": "string" }, { "name": "number" }] }, "description": "" }, "renderLabel": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "FieldConfig" }, "name": "fieldConfig" }, { "type": { "name": "CommonInputProps" }, "name": "commonInputProps" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "renderErrorMessage": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "(\n  error: FieldError | undefined,\n  formClassNameConfig: FormClassNameConfig | undefined\n) => React.ReactNode", "signature": { "arguments": [{ "type": { "name": "union", "raw": "FieldError | undefined", "elements": [{ "name": "FieldError" }, { "name": "undefined" }] }, "name": "error" }, { "type": { "name": "union", "raw": "FormClassNameConfig | undefined", "elements": [{ "name": "FormClassNameConfig" }, { "name": "undefined" }] }, "name": "formClassNameConfig" }], "return": { "name": "ReactReactNode", "raw": "React.ReactNode" } } }, "description": "" }, "customInputs": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{\n  [key: string]: React.ComponentType<CustomInputProps>;\n}", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "ReactComponentType", "raw": "React.ComponentType<CustomInputProps>", "elements": [{ "name": "CustomInputProps" }], "required": true } }] } }, "description": "" } } };


/***/ })

});
//# sourceMappingURL=src_index_ts.97e775f44ce970e29262.hot-update.js.map
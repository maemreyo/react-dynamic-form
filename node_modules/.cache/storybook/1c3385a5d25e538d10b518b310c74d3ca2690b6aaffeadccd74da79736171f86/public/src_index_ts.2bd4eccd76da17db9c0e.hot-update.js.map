{"version":3,"file":"src_index_ts.2bd4eccd76da17db9c0e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AAGA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAYA;AAgBA;AACA;AAWA;AACA;AACA;AACA;AAEA;AAcA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/GridLayout.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/GridLayout.tsx?2c2f"],"sourcesContent":["// Filepath: /src/features/inputs/registry/components/GridLayout.tsx\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { FormClassNameConfig } from '../../../dynamic-form/types';\n\nconst StyledGridLayout = styled.form`\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(${(props) => props.$minWidth || '250px'}, 1fr)\n  );\n  gap: ${({ theme, $gap }: { theme: any; $gap: string }) =>\n    $gap || theme.space.md};\n  padding: ${({ theme }) => theme.space['3xl']};\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: ${({ theme }) => theme.radii.md};\n  ${(props) => {\n    const { $breakpoints = props.theme.breakpoints } = props;\n    return Object.entries($breakpoints)\n      .sort(([, a], [, b]) => Number(a) - Number(b)) // Sort breakpoints in ascending order\n      .map(\n        ([, value]: any) => `\n          @media (min-width: ${value}px) {\n            grid-template-columns: repeat(\n              auto-fit,\n              minmax(\n                ${(props: any) => props.$minWidth || '250px'},\n                1fr\n              )\n            );\n          }\n        `\n      );\n  }}\n`;\n\ninterface GridLayoutProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n  $minWidth?: string; // Add $minWidth prop\n  $gap?: string; // Add $gap prop\n  $breakpoints?: { [key: string]: number }; // Add $breakpoints prop\n}\n\nconst GridLayout: React.FC<GridLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n  $minWidth,\n  $gap,\n  $breakpoints,\n}) => {\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onSubmit(event);\n  };\n\n  return (\n    <StyledGridLayout\n      onSubmit={handleSubmit}\n      className={`${className || ''} ${formClassNameConfig?.formContainer || ''}`}\n      style={style}\n      $minWidth={$minWidth}\n      $gap={$gap}\n      $breakpoints={$breakpoints}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n    >\n      {children}\n    </StyledGridLayout>\n  );\n};\n\nexport { GridLayout };\n","// Filepath: /src/features/inputs/registry/components/GridLayout.tsx\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { FormClassNameConfig } from '../../../dynamic-form/types';\n\nconst StyledGridLayout = styled.form`\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(${(props) => props.$minWidth || '250px'}, 1fr)\n  );\n  gap: ${({ theme, $gap }: { theme: any; $gap: string }) =>\n    $gap || theme.space.md};\n  padding: ${({ theme }) => theme.space['3xl']};\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: ${({ theme }) => theme.radii.md};\n  ${(props) => {\n    const { $breakpoints = props.theme.breakpoints } = props;\n    return Object.entries($breakpoints)\n      .sort(([, a], [, b]) => Number(a) - Number(b)) // Sort breakpoints in ascending order\n      .map(\n        ([, value]: any) => `\n          @media (min-width: ${value}px) {\n            grid-template-columns: repeat(\n              auto-fit,\n              minmax(\n                ${(props: any) => props.$minWidth || '250px'},\n                1fr\n              )\n            );\n          }\n        `\n      );\n  }}\n`;\n\ninterface GridLayoutProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n  $minWidth?: string; // Add $minWidth prop\n  $gap?: string; // Add $gap prop\n  $breakpoints?: { [key: string]: number }; // Add $breakpoints prop\n}\n\nconst GridLayout: React.FC<GridLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n  $minWidth,\n  $gap,\n  $breakpoints,\n}) => {\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onSubmit(event);\n  };\n\n  return (\n    <StyledGridLayout\n      onSubmit={handleSubmit}\n      className={`${className || ''} ${formClassNameConfig?.formContainer || ''}`}\n      style={style}\n      $minWidth={$minWidth}\n      $gap={$gap}\n      $breakpoints={$breakpoints}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n    >\n      {children}\n    </StyledGridLayout>\n  );\n};\n\nexport { GridLayout };\n;GridLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"GridLayout\",\"props\":{\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"$minWidth\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"$gap\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"$breakpoints\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{ [key: string]: number }\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"number\",\"required\":true}}]}},\"description\":\"\"}}};GridLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"GridLayout\",\"props\":{\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"$minWidth\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"$gap\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"$breakpoints\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{ [key: string]: number }\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"number\",\"required\":true}}]}},\"description\":\"\"}}}"],"names":[],"sourceRoot":""}
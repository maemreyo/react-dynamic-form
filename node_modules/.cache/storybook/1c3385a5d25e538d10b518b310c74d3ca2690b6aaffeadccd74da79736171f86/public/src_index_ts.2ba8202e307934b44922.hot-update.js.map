{"version":3,"file":"src_index_ts.2ba8202e307934b44922.hot-update.js","mappings":";;;;;;;;;;;;;;;;AASA;AAocA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;ACjdA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAuBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAEA;AACA;AACA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AAGA;AACA;AAOA;AAcA;AACA;AAQA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/types.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx?4b39","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormFooter.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormFooter.tsx?3af5"],"sourcesContent":["// src/features/dynamic-form/types.ts\nimport {\n  UseFormProps,\n  UseFormReturn,\n  FieldValues,\n  SubmitHandler,\n  FieldErrors as RHFFieldErrors,\n} from 'react-hook-form';\nimport { Message, Schema } from 'yup';\nimport {\n  FormContainerProps,\n  InputWrapperProps,\n  LabelProps,\n} from '../../styles';\nimport { CommonInputProps, CustomInputProps } from '../inputs/types';\nimport { FormContentProps } from '../form-renderer';\n\n// --- Layout ---\n\n/**\n * Type alias for layout types.\n */\nexport type LayoutType = 'flex' | 'grid';\n\nexport type LayoutComponent = React.FC<any>;\n\n/**\n * Type alias for the renderLayout prop in DynamicFormProps.\n */\nexport type RenderLayoutProps = (props: {\n  children: React.ReactNode;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layout: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}) => React.ReactNode;\n\n// --- Form Config ---\n\n/**\n * Type alias for a map of input component types to their corresponding React component types.\n */\nexport type InputComponentMap = {\n  [key: string]: React.ComponentType<CustomInputProps>;\n};\n\n/**\n * Interface for the main DynamicForm component props.\n */\nexport interface DynamicFormProps {\n  /** The form configuration. */\n  config: FormConfig;\n  /** Optional callback function to be called when the form data changes. */\n  onChange?: (formData: FormValues) => void;\n  /** Optional callback function to be called when the form is submitted. */\n  onSubmit?: SubmitHandler<FieldValues>;\n  /** Optional options for react-hook-form's useForm hook. */\n  formOptions?: UseFormProps;\n  /** Optional Yup schema for form validation. */\n  validationSchema?: Schema<any>;\n  /** Optional header element for the form. */\n  header?: React.ReactNode;\n  /** Optional footer element for the form. */\n  footer?: React.ReactNode;\n  /** Whether the form is read-only. */\n  readOnly?: boolean;\n  /** Whether the form is disabled. */\n  disableForm?: boolean;\n  /** Whether to show the submit button. */\n  showSubmitButton?: boolean;\n  /** Optional auto-save configuration. */\n  autoSave?: {\n    interval: number;\n    save: (data: Record<string, any>) => void;\n  };\n  /** Whether to reset the form on submit. */\n  resetOnSubmit?: boolean;\n  /** Whether to focus on the first error field on submit. */\n  focusFirstError?: boolean;\n  /** The layout type for the form. */\n  layout?: LayoutType;\n  /** Optional layout configuration. */\n  layoutConfig?: any;\n  /** Optional custom layout renderer. */\n  renderLayout?: RenderLayoutProps;\n  /** Whether to use horizontal labels. */\n  horizontalLabel?: boolean;\n  /** Optional label width (for horizontal labels). */\n  labelWidth?: string | number;\n  /** Whether to enable local storage for the form data. */\n  enableLocalStorage?: boolean;\n  /** Optional debounce time (in ms) for the onChange callback. */\n  debounceOnChange?: number;\n  /** Whether to disable autocomplete for the form. */\n  disableAutocomplete?: boolean;\n  /** Whether to show inline error messages. */\n  showInlineError?: boolean;\n  /** Whether to show an error summary. */\n  showErrorSummary?: boolean;\n  /** Whether to validate on blur. */\n  validateOnBlur?: boolean;\n  /** Whether to validate on change. */\n  validateOnChange?: boolean;\n  /** Whether to validate on submit. */\n  validateOnSubmit?: boolean;\n  /** Optional CSS class name for the form container. */\n  className?: string;\n  /** Optional CSS class names for form elements. */\n  formClassNameConfig?: FormClassNameConfig;\n  /** Optional inline styles for the form container. */\n  style?: React.CSSProperties;\n  /** Optional theme object. */\n  theme?: any;\n  /** Optional callback function to be called when the form is ready. */\n  onFormReady?: (form: UseFormReturn<any>) => void;\n  /** Optional custom submit button renderer. */\n  renderSubmitButton?: RenderSubmitButtonProps;\n  /** Optional custom form content renderer. */\n  renderFormContent?: RenderFormContentProps;\n  /** Optional custom form footer renderer. */\n  renderFormFooter?: RenderFormFooterProps;\n  /** Optional custom validators. */\n  customValidators?: {\n    [key: string]: (value: any, context: any) => string | undefined;\n  };\n  /** Optional custom input components. */\n  customInputs?: InputComponentMap;\n}\n\n/**\n * Type alias for form values.\n */\nexport type FormValues = Record<string, any>;\n\n/**\n * Interface for form configuration.\n */\nexport interface FormConfig {\n  [key: string]: FieldConfig;\n}\n\n/**\n * Interface for field configuration.\n */\nexport interface FieldConfig {\n  /** The input type. */\n  type?: InputType;\n  /** The label text. */\n  label?: string;\n  /** The placeholder text. */\n  placeholder?: string;\n  /** The validation configuration. */\n  validation?: ValidationConfig;\n  /** Optional custom component for the input. */\n  component?: React.ComponentType<any>;\n  /** Optional inline styles for the input. */\n  style?: React.CSSProperties;\n  /** Whether the input is read-only. */\n  readOnly?: boolean;\n  /** Whether the input is clearable. */\n  clearable?: boolean;\n  /** Whether to show a character counter for the input. */\n  showCounter?: boolean;\n  /** Whether to enable copy-to-clipboard functionality for the input. */\n  copyToClipboard?: boolean;\n  /** Optional tooltip text for the input. */\n  tooltip?: string;\n  /** Optional CSS class names for the input and its elements. */\n  classNameConfig?: FieldClassNameConfig;\n  /** Optional options for select, radio, or combobox inputs. */\n  options?: { value: string; label: string }[];\n  /** Optional conditional logic for the input. */\n  conditional?: Condition;\n  /** Nested fields (for complex inputs). */\n  fields?: FormConfig;\n  /** Optional custom validation messages. */\n  validationMessages?: ValidationMessages;\n  /** Optional default value for the input. */\n  defaultValue?: any;\n}\n\n// --- Input Types ---\n\n/**\n * Type alias for supported input types.\n */\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'checkbox'\n  | 'select'\n  | 'textarea'\n  | 'email'\n  | 'password'\n  | 'tel'\n  | 'url'\n  | 'radio'\n  | 'date'\n  | 'switch'\n  | 'time'\n  | 'datetime-local'\n  | 'combobox'\n  | 'custom';\n\n// --- Validation ---\n\n/**\n * Type alias for a custom validation function.\n *\n * @template TFieldValue - The type of the field value.\n * @template TFormValues - The type of the form values.\n *\n * @param value - The value of the field being validated.\n * @param formValues - The values of all fields in the form.\n * @returns - A string representing the error message if validation fails, or `undefined` if validation passes.\n */\nexport type CustomValidator<\n  TFieldValue = any,\n  TFormValues extends FieldValues = FormValues\n> = (\n  value: TFieldValue,\n  formValues: TFormValues\n) => string | undefined | Promise<string | undefined>;\n\n/**\n * Type alias for a validation value, which can be either a value of type T or an object with a value and a message.\n */\nexport type ValidationValue<T> =\n  | T\n  | {\n      value: T;\n      message: string;\n    };\n\n/**\n * Interface for validation configuration for a field.\n */\nexport interface ValidationConfig {\n  required?: ValidationValue<boolean>;\n  minLength?: ValidationValue<number>;\n  maxLength?: ValidationValue<number>;\n  min?: ValidationValue<number | string>;\n  max?: ValidationValue<number | string>;\n  pattern?: ValidationValue<RegExp>;\n  validate?: (\n    value: any,\n    formValues: FormValues\n  ) => string | undefined | Promise<string | undefined>;\n  requiredMessage?: string;\n}\n\n/**\n * Type alias for a custom error message template function.\n */\nexport type ErrorMessageTemplate =\n  | Message\n  | ((values: {\n      label?: string;\n      value: any;\n      error: FieldError;\n      config: FieldConfig;\n    }) => string);\n\n/**\n * Interface for validation messages for a field.\n */\nexport interface ValidationMessages {\n  [key: string]: ErrorMessageTemplate;\n}\n\n// --- Conditional Rendering ---\n\n/**\n * Type alias for comparison operators used in conditional rendering.\n */\nexport type ComparisonOperator =\n  | 'is'\n  | 'isNot'\n  | 'greaterThan'\n  | 'lessThan'\n  | 'greaterThanOrEqual'\n  | 'lessThanOrEqual'\n  | 'contains'\n  | 'startsWith'\n  | 'endsWith'\n  | 'custom';\n\n/**\n * Type alias for a comparator function used in conditional rendering.\n */\nexport type ComparatorFunction = (value: any) => boolean;\n\n/**\n * Interface for a condition used in conditional rendering.\n */\nexport interface Condition {\n  /** The field to watch for changes. */\n  when: string;\n  /** The comparison operator to use. */\n  operator: ComparisonOperator;\n  /** The value to compare against. */\n  value?: any;\n  /** Optional custom comparator function. */\n  comparator?: ComparatorFunction;\n  /** The fields to show or hide based on the condition. */\n  fields: string[];\n}\n\n// --- Field ---\n\n/**\n * Interface for a form field.\n */\nexport interface FormField {\n  label?: string;\n  id: string;\n  type: InputType;\n  error?: FieldError;\n}\n\n// --- Errors ---\n\n/**\n * Interface for a field error.\n */\nexport interface FieldError {\n  type: string;\n  message?: string;\n}\n\n/**\n * Type alias for react-hook-form field errors.\n */\nexport type FieldErrors = RHFFieldErrors<FieldValues>;\n\n// --- Class Names ---\n\n/**\n * Interface for form-level CSS class name configuration.\n */\nexport interface FormClassNameConfig {\n  formContainer?: string;\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  button?: string;\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string;\n  radioButton?: string;\n  radioLabel?: string;\n  checkboxInput?: string;\n  switchContainer?: string;\n  switchSlider?: string;\n  numberInputContainer?: string;\n  numberInputButton?: string;\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n\n/**\n * Interface for field-level CSS class name configuration.\n */\nexport interface FieldClassNameConfig {\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string;\n  radioButton?: string;\n  radioLabel?: string;\n  checkboxInput?: string;\n  switchContainer?: string;\n  switchSlider?: string;\n  numberInputContainer?: string;\n  numberInputButton?: string;\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n\n// --- Render Props ---\n\n/**\n * Type alias for the renderSubmitButton prop in DynamicFormProps.\n */\nexport type RenderSubmitButtonProps = (\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode;\n\n/**\n * Type alias for the renderFormContent prop in FormRendererProps.\n */\nexport type RenderFormContentProps = (\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode;\n\n/**\n * Type alias for the renderInput prop in FormContentProps.\n */\nexport type RenderInputProps = (\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Type alias for the renderLabel prop in InputWrapperProps.\n */\nexport type RenderLabelProps = (\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Type alias for the renderErrorMessage prop in InputWrapperProps.\n */\nexport type RenderErrorMessageProps = (\n  error: FieldError | undefined,\n  formClassNameConfig: FormClassNameConfig | undefined\n) => React.ReactNode;\n\n/**\n * Type alias for the renderFormFooter prop in FormRendererProps.\n */\nexport type RenderFormFooterProps = (props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode;\n\n// --- Re-exported types ---\n\nexport { FormContainerProps, InputWrapperProps, LabelProps };\n\n// --- Deprecated ---\n","// Filepath: /src/features/form-renderer/FormRenderer.tsx\n// @ts-nocheck\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\n\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs}\n    />\n  );\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n  return (\n    <>\n      {header}\n      {content}\n      {footerContent}\n    </>\n  );\n};\n\nexport default FormRenderer;\n","// Filepath: /src/features/form-renderer/FormRenderer.tsx\n// @ts-nocheck\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\n\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs}\n    />\n  );\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n  return (\n    <>\n      {header}\n      {content}\n      {footerContent}\n    </>\n  );\n};\n\nexport default FormRenderer;\n;FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"The form configuration.\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form data changes.\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"Optional callback function to be called when the form is submitted.\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"Optional options for react-hook-form's useForm hook.\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"Optional Yup schema for form validation.\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional header element for the form.\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element for the form.\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is read-only.\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is disabled.\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"Optional auto-save configuration.\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to reset the form on submit.\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to focus on the first error field on submit.\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"The layout type for the form.\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional layout configuration.\"},\"renderLayout\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}\",\"signature\":{\"properties\":[{\"key\":\"children\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":true}},{\"key\":\"onSubmit\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}},\"required\":true}},{\"key\":\"className\",\"value\":{\"name\":\"string\",\"required\":false}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}},{\"key\":\"style\",\"value\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\",\"required\":false}},{\"key\":\"layout\",\"value\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}],\"required\":true}},{\"key\":\"layoutConfig\",\"value\":{\"name\":\"any\",\"required\":false}},{\"key\":\"horizontalLabel\",\"value\":{\"name\":\"boolean\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom layout renderer.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use horizontal labels.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to enable local storage for the form data.\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"Optional debounce time (in ms) for the onChange callback.\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the form.\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on blur.\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on change.\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on submit.\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"Optional CSS class name for the form container.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"Optional inline styles for the form container.\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional theme object.\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form is ready.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form content renderer.\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form footer renderer.\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"Optional custom validators.\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"Optional custom input components.\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"List of field IDs to render.\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"List of form fields.\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"Configuration for conditional fields.\"}}};FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"The form configuration.\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form data changes.\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"Optional callback function to be called when the form is submitted.\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"Optional options for react-hook-form's useForm hook.\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"Optional Yup schema for form validation.\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional header element for the form.\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element for the form.\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is read-only.\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is disabled.\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"Optional auto-save configuration.\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to reset the form on submit.\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to focus on the first error field on submit.\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"The layout type for the form.\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional layout configuration.\"},\"renderLayout\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  children: React.ReactNode;\\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\\n  className?: string;\\n  formClassNameConfig?: FormClassNameConfig;\\n  style?: React.CSSProperties;\\n  layout: LayoutType;\\n  layoutConfig?: any;\\n  horizontalLabel?: boolean;\\n}\",\"signature\":{\"properties\":[{\"key\":\"children\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":true}},{\"key\":\"onSubmit\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}},\"required\":true}},{\"key\":\"className\",\"value\":{\"name\":\"string\",\"required\":false}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}},{\"key\":\"style\",\"value\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\",\"required\":false}},{\"key\":\"layout\",\"value\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}],\"required\":true}},{\"key\":\"layoutConfig\",\"value\":{\"name\":\"any\",\"required\":false}},{\"key\":\"horizontalLabel\",\"value\":{\"name\":\"boolean\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom layout renderer.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use horizontal labels.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to enable local storage for the form data.\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"Optional debounce time (in ms) for the onChange callback.\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the form.\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on blur.\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on change.\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to validate on submit.\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"Optional CSS class name for the form container.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"Optional inline styles for the form container.\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"Optional theme object.\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"Optional callback function to be called when the form is ready.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form content renderer.\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom form footer renderer.\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"Optional custom validators.\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"Optional custom input components.\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"List of field IDs to render.\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"List of form fields.\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"Configuration for conditional fields.\"}}}","// Filepath: /src/features/form-renderer/components/FormFooter.tsx\nimport React from 'react';\nimport { ErrorSummary } from '../../../components';\nimport { FormFooterProps } from '../types';\n\nconst FormFooter: React.FC<FormFooterProps> = ({\n  footer,\n  renderSubmitButton,\n  isSubmitting,\n  showErrorSummary,\n  errors,\n  formClassNameConfig,\n}) => {\n  return (\n    <>\n      {/* {showSubmitButton &&\n        (renderSubmitButton ? (\n          renderSubmitButton(() => {}, isSubmitting)\n        ) : (\n          <SubmitButton\n            type=\"submit\"\n            disabled={isSubmitting}\n            className={formClassNameConfig?.button}\n          >\n            Submit\n          </SubmitButton>\n        ))} */}\n      {footer}\n      {showErrorSummary && Object.keys(errors).length > 0 && (\n        <ErrorSummary\n          errors={errors}\n          formClassNameConfig={formClassNameConfig}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FormFooter;\n","// Filepath: /src/features/form-renderer/components/FormFooter.tsx\nimport React from 'react';\nimport { ErrorSummary } from '../../../components';\nimport { FormFooterProps } from '../types';\n\nconst FormFooter: React.FC<FormFooterProps> = ({\n  footer,\n  renderSubmitButton,\n  isSubmitting,\n  showErrorSummary,\n  errors,\n  formClassNameConfig,\n}) => {\n  return (\n    <>\n      {/* {showSubmitButton &&\n        (renderSubmitButton ? (\n          renderSubmitButton(() => {}, isSubmitting)\n        ) : (\n          <SubmitButton\n            type=\"submit\"\n            disabled={isSubmitting}\n            className={formClassNameConfig?.button}\n          >\n            Submit\n          </SubmitButton>\n        ))} */}\n      {footer}\n      {showErrorSummary && Object.keys(errors).length > 0 && (\n        <ErrorSummary\n          errors={errors}\n          formClassNameConfig={formClassNameConfig}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FormFooter;\n;FormFooter.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormFooter\",\"props\":{\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element.\"},\"showSubmitButton\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"isSubmitting\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is currently submitting.\"},\"showErrorSummary\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\"},\"errors\":{\"required\":true,\"tsType\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\"},\"description\":\"Field errors.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\"}}};FormFooter.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormFooter\",\"props\":{\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"Optional footer element.\"},\"showSubmitButton\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show the submit button.\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"Optional custom submit button renderer.\"},\"isSubmitting\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether the form is currently submitting.\"},\"showErrorSummary\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show an error summary.\"},\"errors\":{\"required\":true,\"tsType\":{\"name\":\"RHFFieldErrors\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"RHFFieldErrors<FieldValues>\"},\"description\":\"Field errors.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\"}}}"],"names":[],"sourceRoot":""}
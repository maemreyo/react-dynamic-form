{"version":3,"file":"src_index_ts.dded89b5c7ff99e82e12.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAQA;AAQA;AAAA;AAAA;AAGA;AAAA;AAAA;AAYA;AAwBA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AASA;AAIA;AAMA;AAEA;AAOA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SwitchInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SwitchInput.tsx?0a0e"],"sourcesContent":["// Filepath: /src/features/inputs/components/SwitchInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst SwitchContainer = styled.label<{ className?: string }>`\n  position: relative;\n  display: inline-block;\n  width: 48px;\n  height: 24px;\n  cursor: pointer;\n`;\n\nconst SwitchInputStyled = styled.input<{ className?: string }>`\n  opacity: 0;\n  width: 0;\n  height: 0;\n  &:hover + .slider {\n    background-color: #ccc;\n  }\n  &:checked + .slider {\n    background-color: ${({ theme }) => theme.colors.info};\n  }\n  &:focus + .slider {\n    box-shadow: 0 0 1px ${({ theme }) => theme.colors.info};\n  }\n  &:checked + .slider:before {\n    transform: translateX(24px);\n  }\n  &:disabled + .slider {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst Slider = styled.span<{ className?: string }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.4s;\n  border-radius: 24px;\n  &:before {\n    position: absolute;\n    content: '';\n    height: 20px;\n    width: 20px;\n    left: 2px;\n    bottom: 2px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n`;\n\ninterface SwitchInputProps extends CommonInputProps {}\n\nconst SwitchInput: React.FC<SwitchInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n        </Label>\n      )}\n      <SwitchContainer\n        htmlFor={id}\n        className={formClassNameConfig.switchContainer}\n      >\n        <SwitchInputStyled\n          {...field}\n          type=\"checkbox\"\n          id={id}\n          className={formClassNameConfig.switch}\n        />\n        <Slider className={formClassNameConfig.switchSlider} />\n      </SwitchContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SwitchInput;\n","// Filepath: /src/features/inputs/components/SwitchInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst SwitchContainer = styled.label<{ className?: string }>`\n  position: relative;\n  display: inline-block;\n  width: 48px;\n  height: 24px;\n  cursor: pointer;\n`;\n\nconst SwitchInputStyled = styled.input<{ className?: string }>`\n  opacity: 0;\n  width: 0;\n  height: 0;\n  &:hover + .slider {\n    background-color: #ccc;\n  }\n  &:checked + .slider {\n    background-color: ${({ theme }) => theme.colors.info};\n  }\n  &:focus + .slider {\n    box-shadow: 0 0 1px ${({ theme }) => theme.colors.info};\n  }\n  &:checked + .slider:before {\n    transform: translateX(24px);\n  }\n  &:disabled + .slider {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst Slider = styled.span<{ className?: string }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.4s;\n  border-radius: 24px;\n  &:before {\n    position: absolute;\n    content: '';\n    height: 20px;\n    width: 20px;\n    left: 2px;\n    bottom: 2px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n`;\n\ninterface SwitchInputProps extends CommonInputProps {}\n\nconst SwitchInput: React.FC<SwitchInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n        </Label>\n      )}\n      <SwitchContainer\n        htmlFor={id}\n        className={formClassNameConfig.switchContainer}\n      >\n        <SwitchInputStyled\n          {...field}\n          type=\"checkbox\"\n          id={id}\n          className={formClassNameConfig.switch}\n        />\n        <Slider className={formClassNameConfig.switchSlider} />\n      </SwitchContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SwitchInput;\n;SwitchInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SwitchInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};SwitchInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SwitchInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}"],"names":[],"sourceRoot":""}
{"version":3,"file":"src_index_ts.397c4e734f7a7fd9150b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AAkBA;AACA;AACA;AAAA;AAeA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAUA;AA2BA;AACA;AAeA;AAEA;AAAA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.tsx"],"sourcesContent":["// Filepath: /src/DynamicForm.tsx\nimport React from 'react';\nimport {\n  useDynamicForm,\n  useRHFOptions,\n  useFormFields,\n  DynamicFormProvider,\n  DynamicFormProps,\n} from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nimport { DefaultTheme } from 'styled-components';\nimport { SubmitButton } from './styles';\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  config = {},\n  onChange,\n  onSubmit,\n  formOptions,\n  header,\n  footer,\n  readOnly = false,\n  disableForm = false,\n  showSubmitButton = true,\n  autoSave,\n  resetOnSubmit = false,\n  focusFirstError = false,\n  className,\n  formClassNameConfig = {},\n  style,\n  renderLayout,\n  layout = 'grid',\n  layoutConfig = {\n    minWidth: '300px',\n  }, // Default layoutConfig\n  horizontalLabel = false,\n  labelWidth,\n  enableLocalStorage = false,\n  debounceOnChange = 0,\n  disableAutocomplete = false,\n  showInlineError = true,\n  showErrorSummary = false,\n  validateOnBlur = false,\n  validateOnChange = true,\n  validateOnSubmit = true,\n  theme,\n  customInputs,\n  onFormReady,\n  renderSubmitButton,\n}) => {\n  const mergedFormOptions = useRHFOptions(\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur\n  );\n  const form = useDynamicForm({\n    config,\n    formOptions: mergedFormOptions,\n    autoSave,\n    enableLocalStorage,\n    resetOnSubmit,\n    focusFirstError,\n    debounceOnChange,\n    onChange,\n    onFormReady,\n  });\n  const { formState, control, handleSubmit } = form;\n  const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(\n    config, // Pass config instead of data\n    formState,\n    control\n  );\n  const onSubmitHandler = (): any => {\n    handleSubmit(data => {\n      if (onSubmit) {\n        onSubmit(data);\n      }\n    })();\n  };\n\n  const LayoutComponent = useMemo(() => {\n    if (renderLayout) {\n      return renderLayout;\n    }\n    if (layout === 'flex') {\n      return FlexLayout;\n    }\n    return GridLayout;\n  }, [renderLayout, layout]);\n\n  return (\n    <ThemeProvider theme={theme || ({} as DefaultTheme)}>\n      <DynamicFormProvider form={form}>\n        <LayoutComponent\n          onSubmit={onSubmitHandler}\n          className={className}\n          formClassNameConfig={formClassNameConfig}\n          style={style}\n          layout={layout}\n          layoutConfig={layoutConfig}\n          horizontalLabel={horizontalLabel}\n          theme={theme}\n        >\n          <FormRenderer\n            onSubmit={onSubmitHandler}\n            className={className}\n            formClassNameConfig={formClassNameConfig}\n            style={style}\n            layout={layout}\n            layoutConfig={layoutConfig}\n            horizontalLabel={horizontalLabel}\n            theme={theme}\n            header={header}\n            fieldsToRender={fieldsToRender}\n            fields={fields}\n            config={config}\n            footer={footer}\n            readOnly={readOnly}\n            disableForm={disableForm}\n            showSubmitButton={showSubmitButton}\n            renderSubmitButton={renderSubmitButton}\n            formOptions={formOptions}\n            showErrorSummary={showErrorSummary}\n            labelWidth={labelWidth}\n            disableAutocomplete={disableAutocomplete}\n            showInlineError={showInlineError}\n            conditionalFieldsConfig={conditionalFieldsConfig}\n            customInputs={customInputs}\n          />\n        </LayoutComponent>\n        {showSubmitButton &&\n          (renderSubmitButton ? (\n            renderSubmitButton(onSubmitHandler, formState.isSubmitting)\n          ) : (\n            <SubmitButton\n              type=\"submit\"\n              onClick={onSubmitHandler}\n              disabled={formState.isSubmitting}\n              className={formClassNameConfig?.button}\n            >\n              Submit\n            </SubmitButton>\n          ))}\n      </DynamicFormProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default DynamicForm;"],"names":[],"sourceRoot":""}
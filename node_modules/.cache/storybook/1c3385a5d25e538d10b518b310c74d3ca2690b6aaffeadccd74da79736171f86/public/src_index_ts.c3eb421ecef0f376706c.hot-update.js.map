{"version":3,"file":"src_index_ts.c3eb421ecef0f376706c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AAOA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormLayout.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormLayout.tsx?7c5e"],"sourcesContent":["// Filepath: /src/features/form-renderer/components/FormLayout.tsx\n\nimport React, { useMemo } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { defaultTheme } from '../../../theme';\nimport {\n  FormContainer,\n  GridFormContainer,\n} from '../../../styles';\nimport { FormLayoutProps } from '../types';\n\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layout,\n  layoutConfig,\n  horizontalLabel,\n  theme,\n}) => {\n  const mergedTheme = useMemo(() => {\n    return theme ? { ...defaultTheme, ...theme } : defaultTheme;\n  }, [theme]);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onSubmit(event);\n  };\n\n  const LayoutComponent: React.ComponentType<LayoutComponentProps> =\n    layout === 'grid' ? GridFormContainer : FormContainer;\n\n  const layoutComponentProps: LayoutComponentProps = {\n    onSubmit: handleSubmit,\n    className: `${className || ''} ${formClassNameConfig?.formContainer || ''}`,\n    style,\n    $layout: layout,\n    $layoutConfig: layoutConfig,\n    $horizontalLabel: horizontalLabel,\n    $minWidth: layoutConfig?.minWidth,\n    $gap: layoutConfig?.gap,\n    $breakpoints: layoutConfig?.breakpoints,\n  };\n\n  return (\n    <ThemeProvider theme={mergedTheme}>\n      <LayoutComponent {...layoutComponentProps}>{children}</LayoutComponent>\n    </ThemeProvider>\n  );\n};\n\nexport default FormLayout;\n","// Filepath: /src/features/form-renderer/components/FormLayout.tsx\n\nimport React, { useMemo } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { defaultTheme } from '../../../theme';\nimport {\n  FormContainer,\n  GridFormContainer,\n} from '../../../styles';\nimport { FormLayoutProps } from '../types';\n\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layout,\n  layoutConfig,\n  horizontalLabel,\n  theme,\n}) => {\n  const mergedTheme = useMemo(() => {\n    return theme ? { ...defaultTheme, ...theme } : defaultTheme;\n  }, [theme]);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onSubmit(event);\n  };\n\n  const LayoutComponent: React.ComponentType<LayoutComponentProps> =\n    layout === 'grid' ? GridFormContainer : FormContainer;\n\n  const layoutComponentProps: LayoutComponentProps = {\n    onSubmit: handleSubmit,\n    className: `${className || ''} ${formClassNameConfig?.formContainer || ''}`,\n    style,\n    $layout: layout,\n    $layoutConfig: layoutConfig,\n    $horizontalLabel: horizontalLabel,\n    $minWidth: layoutConfig?.minWidth,\n    $gap: layoutConfig?.gap,\n    $breakpoints: layoutConfig?.breakpoints,\n  };\n\n  return (\n    <ThemeProvider theme={mergedTheme}>\n      <LayoutComponent {...layoutComponentProps}>{children}</LayoutComponent>\n    </ThemeProvider>\n  );\n};\n\nexport default FormLayout;\n;FormLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormLayout\",\"props\":{\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};FormLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormLayout\",\"props\":{\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}"],"names":[],"sourceRoot":""}
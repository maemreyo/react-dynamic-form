{"version":3,"file":"src_index_ts.f2ddacdc4031b834e11d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAWA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAOA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAOA;AAOA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SelectInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SelectInput.tsx?bc00"],"sourcesContent":["// Filepath: /src/features/inputs/components/SelectInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst StyledSelect = styled.select<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 12px; /* Tăng padding */\n  border-radius: 10px; /* Bo tròn nhiều hơn */\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  appearance: none; /* Loại bỏ appearance mặc định */\n  width: 100%;\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none; /* Loại bỏ outline mặc định */\n  background: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='8'%3E%3Cpath fill='%239CA3AF' d='M1.41 0L6 4.58 10.59 0 12 1.41l-6 6-6-6z'/%3E%3C/svg%3E\")\n    no-repeat right 12px center; /* Thêm icon dropdown */\n  background-size: 12px 8px; /* Chỉnh kích thước icon */\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 4px ${({ theme }) => theme.colors['info-500']}; /* Hiệu ứng focus rõ ràng */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n`;\n\ninterface SelectInputProps extends CommonInputProps {}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledSelect {...field} className={formClassNameConfig.select} id={id}>\n        {options?.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </StyledSelect>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SelectInput;\n","// Filepath: /src/features/inputs/components/SelectInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst StyledSelect = styled.select<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 12px; /* Tăng padding */\n  border-radius: 10px; /* Bo tròn nhiều hơn */\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  appearance: none; /* Loại bỏ appearance mặc định */\n  width: 100%;\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none; /* Loại bỏ outline mặc định */\n  background: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='8'%3E%3Cpath fill='%239CA3AF' d='M1.41 0L6 4.58 10.59 0 12 1.41l-6 6-6-6z'/%3E%3C/svg%3E\")\n    no-repeat right 12px center; /* Thêm icon dropdown */\n  background-size: 12px 8px; /* Chỉnh kích thước icon */\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 4px ${({ theme }) => theme.colors['info-500']}; /* Hiệu ứng focus rõ ràng */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n`;\n\ninterface SelectInputProps extends CommonInputProps {}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledSelect {...field} className={formClassNameConfig.select} id={id}>\n        {options?.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </StyledSelect>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SelectInput;\n;SelectInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SelectInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};SelectInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SelectInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}"],"names":[],"sourceRoot":""}
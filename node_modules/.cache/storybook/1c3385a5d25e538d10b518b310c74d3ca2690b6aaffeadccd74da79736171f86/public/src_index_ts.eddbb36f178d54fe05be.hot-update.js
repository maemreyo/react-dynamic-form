"use strict";
self["webpackHotUpdate_matthew_ngo_react_dynamic_form"]("src_index_ts",{

/***/ "./src/features/inputs/registry/components/GridLayout.tsx":
/*!****************************************************************!*\
  !*** ./src/features/inputs/registry/components/GridLayout.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GridLayout: () => (/* binding */ GridLayout)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-components */ "./node_modules/styled-components/dist/styled-components.browser.esm.js");
// Filepath: /src/features/inputs/registry/components/GridLayout.tsx



var StyledGridLayout = styled_components__WEBPACK_IMPORTED_MODULE_1__["default"].form(templateObject_1 || (templateObject_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__makeTemplateObject)(["\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(", ", 1fr)\n  );\n  gap: ", ";\n  padding: ", ";\n  background-color: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n  ", "\n"], ["\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(", ", 1fr)\n  );\n  gap: ", ";\n  padding: ", ";\n  background-color: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n  ", "\n"])), function (props) { return props.$minWidth || '250px'; }, function (_a) {
    var theme = _a.theme, $gap = _a.$gap;
    return $gap || theme.space.md;
}, function (_a) {
    var theme = _a.theme;
    return theme.space['3xl'];
}, function (_a) {
    var theme = _a.theme;
    return theme.colors.background;
}, function (_a) {
    var theme = _a.theme;
    return theme.colors.border;
}, function (_a) {
    var theme = _a.theme;
    return theme.radii.md;
}, function (props) {
    var _a = props.$breakpoints, $breakpoints = _a === void 0 ? props.theme.breakpoints : _a;
    return Object.entries($breakpoints)
        .sort(function (_a, _b) {
        var a = _a[1];
        var b = _b[1];
        return Number(a) - Number(b);
    }) // Sort breakpoints in ascending order
        .map(function (_a) {
        var value = _a[1];
        return "\n          @media (min-width: ".concat(value, "px) {\n            grid-template-columns: repeat(\n              auto-fit,\n              minmax(\n                ").concat(function (props) { return props.$minWidth || '250px'; }, ",\n                1fr\n              )\n            );\n          }\n        ");
    });
});
var GridLayout = function (_a) {
    var onSubmit = _a.onSubmit, children = _a.children, className = _a.className, formClassNameConfig = _a.formClassNameConfig, style = _a.style, layoutConfig = _a.layoutConfig, horizontalLabel = _a.horizontalLabel, $minWidth = _a.$minWidth, $gap = _a.$gap, $breakpoints = _a.$breakpoints;
    var handleSubmit = function (event) {
        event.preventDefault();
        onSubmit(event);
    };
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledGridLayout, { onSubmit: handleSubmit, className: "".concat(className || '', " ").concat((formClassNameConfig === null || formClassNameConfig === void 0 ? void 0 : formClassNameConfig.formContainer) || ''), style: style, "$minWidth": $minWidth, "$gap": $gap, "$breakpoints": $breakpoints, "data-layoutconfig": JSON.stringify(layoutConfig), "data-horizontallabel": horizontalLabel ? 'true' : 'false' }, children));
};

;
GridLayout.__docgenInfo = { "description": "", "methods": [], "displayName": "GridLayout", "props": { "onSubmit": { "required": true, "tsType": { "name": "signature", "type": "function", "raw": "(event: React.FormEvent<HTMLFormElement>) => void", "signature": { "arguments": [{ "type": { "name": "ReactFormEvent", "raw": "React.FormEvent<HTMLFormElement>", "elements": [{ "name": "HTMLFormElement" }] }, "name": "event" }], "return": { "name": "void" } } }, "description": "" }, "children": { "required": true, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "className": { "required": false, "tsType": { "name": "string" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "" }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "" }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "$minWidth": { "required": false, "tsType": { "name": "string" }, "description": "" }, "$gap": { "required": false, "tsType": { "name": "string" }, "description": "" }, "$breakpoints": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{ [key: string]: number }", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "number", "required": true } }] } }, "description": "" } } };
GridLayout.__docgenInfo = { "description": "", "methods": [], "displayName": "GridLayout", "props": { "onSubmit": { "required": true, "tsType": { "name": "signature", "type": "function", "raw": "(event: React.FormEvent<HTMLFormElement>) => void", "signature": { "arguments": [{ "type": { "name": "ReactFormEvent", "raw": "React.FormEvent<HTMLFormElement>", "elements": [{ "name": "HTMLFormElement" }] }, "name": "event" }], "return": { "name": "void" } } }, "description": "" }, "children": { "required": true, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "className": { "required": false, "tsType": { "name": "string" }, "description": "" }, "formClassNameConfig": { "required": false, "tsType": { "name": "FormClassNameConfig" }, "description": "" }, "style": { "required": false, "tsType": { "name": "ReactCSSProperties", "raw": "React.CSSProperties" }, "description": "" }, "layoutConfig": { "required": false, "tsType": { "name": "any" }, "description": "" }, "horizontalLabel": { "required": false, "tsType": { "name": "boolean" }, "description": "" }, "$minWidth": { "required": false, "tsType": { "name": "string" }, "description": "" }, "$gap": { "required": false, "tsType": { "name": "string" }, "description": "" }, "$breakpoints": { "required": false, "tsType": { "name": "signature", "type": "object", "raw": "{ [key: string]: number }", "signature": { "properties": [{ "key": { "name": "string" }, "value": { "name": "number", "required": true } }] } }, "description": "" } } };
var templateObject_1;


/***/ })

});
//# sourceMappingURL=src_index_ts.eddbb36f178d54fe05be.hot-update.js.map
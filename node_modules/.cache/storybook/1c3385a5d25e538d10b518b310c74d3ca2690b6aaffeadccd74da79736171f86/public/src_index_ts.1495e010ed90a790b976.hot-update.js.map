{"version":3,"file":"src_index_ts.1495e010ed90a790b976.hot-update.js","mappings":";;;;;;;;;;;;;;;;AAUA;AA6LA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/types.ts"],"sourcesContent":["// src/features/dynamic-form/types.ts\nimport {\n  UseFormProps,\n  UseFormReturn,\n  FieldValues,\n  RegisterOptions,\n  FieldPath,\n  SubmitHandler,\n} from 'react-hook-form';\nimport { Message, Schema } from 'yup';\nimport {\n  FormContainerProps,\n  InputWrapperProps,\n  LabelProps,\n} from '../../styles';\nimport { CommonInputProps, CustomInputProps } from '../inputs/types';\nimport { FormContentProps } from '../form-renderer';\n\nexport type LayoutType = 'flex' | 'grid';\n\nexport type InputComponentMap = {\n  [key: string]: React.ComponentType<CustomInputProps>;\n};\n\nexport interface DynamicFormProps {\n  config: FormConfig;\n  onChange?: (formData: FormValues) => void;\n  onSubmit?: SubmitHandler<FieldValues>;\n  formOptions?: UseFormProps;\n  validationSchema?: Schema<any>;\n  header?: React.ReactNode;\n  footer?: React.ReactNode;\n  readOnly?: boolean;\n  disableForm?: boolean;\n  showSubmitButton?: boolean;\n  autoSave?: {\n    interval: number;\n    save: (data: Record<string, any>) => void;\n  };\n  resetOnSubmit?: boolean;\n  focusFirstError?: boolean;\n  layout?: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  enableLocalStorage?: boolean;\n  debounceOnChange?: number;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  showErrorSummary?: boolean;\n  validateOnBlur?: boolean;\n  validateOnChange?: boolean;\n  validateOnSubmit?: boolean;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  theme?: any;\n  onFormReady?: (form: UseFormReturn<any>) => void;\n\n  renderSubmitButton?: RenderSubmitButtonProps;\n  renderFormContent?: RenderFormContentProps;\n  renderFormFooter?: RenderFormFooterProps;\n\n  customValidators?: {\n    [key: string]: (value: any, context: any) => string | undefined;\n  };\n  customInputs?: InputComponentMap;\n}\n\n\nexport interface FieldClassNameConfig {\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n}\n\nexport interface FormConfig {\n  [key: string]: FieldConfig;\n}\n\n/**\n * Represents a custom validation function.\n *\n * @template TFieldValue - The type of the field value.\n * @template TFormValues - The type of the form values.\n *\n * @param value - The value of the field being validated.\n * @param formValues - The values of all fields in the form.\n * @returns - A string representing the error message if validation fails, or `undefined` if validation passes.\n */\nexport type CustomValidator<\n  TFieldValue = any,\n  TFormValues extends FieldValues = FormValues\n> = (\n  value: TFieldValue,\n  formValues: TFormValues\n) => string | undefined | Promise<string | undefined>;\n\n/**\n * Validation configuration for a field.\n */\nexport type ValidationValue<T> =\n  | T\n  | {\n      value: T;\n      message: string;\n    };\n\nexport interface ValidationConfig {\n  required?: ValidationValue<boolean>;\n  minLength?: ValidationValue<number>;\n  maxLength?: ValidationValue<number>;\n  min?: ValidationValue<number | string>;\n  max?: ValidationValue<number | string>;\n  pattern?: ValidationValue<RegExp>;\n  validate?: (\n    value: any,\n    formValues: FormValues\n  ) => string | undefined | Promise<string | undefined>;\n  requiredMessage?: string;\n}\n\n/**\n * Custom error message template\n */\nexport type ErrorMessageTemplate =\n  | Message\n  | ((values: {\n      label?: string;\n      value: any;\n      error: FieldError;\n      config: FieldConfig;\n    }) => string);\n\n/**\n * Validation messages for a field.\n */\nexport interface ValidationMessages {\n  [key: string]: ErrorMessageTemplate;\n}\n\nexport interface FieldConfig {\n  type?: InputType;\n  label?: string;\n  placeholder?: string;\n  validation?: ValidationConfig;\n  component?: React.ComponentType<any>;\n  style?: React.CSSProperties;\n  readOnly?: boolean;\n  clearable?: boolean;\n  showCounter?: boolean;\n  copyToClipboard?: boolean;\n  tooltip?: string;\n  classNameConfig?: FieldClassNameConfig;\n  options?: { value: string; label: string }[];\n  conditional?: Condition;\n  fields?: FormConfig;\n  validationMessages?: ValidationMessages;\n  defaultValue?: any;\n}\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'checkbox'\n  | 'select'\n  | 'textarea'\n  | 'email'\n  | 'password'\n  | 'tel'\n  | 'url'\n  | 'radio'\n  | 'date'\n  | 'switch'\n  | 'time'\n  | 'datetime-local'\n  | 'combobox'\n  | 'custom';\n\nexport type UseFormRegister<TFieldValues extends FieldValues = FieldValues> = (\n  name: FieldPath<TFieldValues>,\n  options?: RegisterOptions<TFieldValues, FieldPath<TFieldValues>>\n) => any;\n\nexport interface FormField {\n  label?: string;\n  id: string;\n  type: InputType;\n  error?: FieldError;\n}\n\nexport interface FieldError {\n  type: string;\n  message?: string;\n}\n\nexport type FormValues = Record<string, any>;\n\nexport { FormContainerProps, InputWrapperProps, LabelProps };\n\n/**\n * Represents a comparison operator used in conditional rendering.\n */\nexport type ComparisonOperator =\n  | 'is'\n  | 'isNot'\n  | 'greaterThan'\n  | 'lessThan'\n  | 'greaterThanOrEqual'\n  | 'lessThanOrEqual'\n  | 'contains'\n  | 'startsWith'\n  | 'endsWith'\n  | 'custom';\n\n/**\n * Represents a function that takes a value and returns a boolean indicating whether the condition is met.\n */\nexport type ComparatorFunction = (value: any) => boolean;\n\n/**\n * Represents a condition for conditional rendering.\n */\nexport interface Condition {\n  when: string;\n  operator: ComparisonOperator;\n  value?: any;\n  comparator?: ComparatorFunction;\n  fields: string[];\n}\n\n// --- Render Props Types ---\n/**\n * Props for renderSubmitButton in DynamicFormProps.\n */\nexport type RenderSubmitButtonProps = (\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode;\n\n/**\n * Props for renderFormContent in FormRendererProps.\n */\nexport type RenderFormContentProps = (\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode;\n\n/**\n * Props for renderInput in FormContentProps.\n */\nexport type RenderInputProps = (\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Props for renderLabel in InputWrapperProps.\n */\nexport type RenderLabelProps = (\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Props for renderErrorMessage in InputWrapperProps.\n */\nexport type RenderErrorMessageProps = (\n  error: FieldError | undefined,\n  formClassNameConfig: FormClassNameConfig | undefined\n) => React.ReactNode;\n\n/**\n * Type for field errors.\n */\nexport type FieldErrors = Partial<Record<string, FieldError>>;\n\n/**\n * Props for renderFormFooter in FormRendererProps.\n */\nexport type RenderFormFooterProps = (props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode;\n\n/**\n * Extended DynamicFormProps with render props.\n */\n\nexport interface FormClassNameConfig {\n  formContainer?: string;\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  button?: string;\n  // Các component khác:\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string; // Thêm radioGroup\n  radioButton?: string; // Thêm radio button\n  checkboxInput?: string; // Thêm checkbox\n  switchContainer?: string; // Thêm switch container\n  switchSlider?: string; // Thêm switch slider\n  numberInputContainer?: string; // Thêm number input container\n  numberInputButton?: string; // Thêm number input button\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n\nexport interface FieldClassNameConfig {\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  // Các component khác:\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string; // Thêm radioGroup\n  radioButton?: string; // Thêm radio button\n  checkboxInput?: string; // Thêm checkbox\n  switchContainer?: string; // Thêm switch container\n  switchSlider?: string; // Thêm switch slider\n  numberInputContainer?: string; // Thêm number input container\n  numberInputButton?: string; // Thêm number input button\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n"],"names":[],"sourceRoot":""}
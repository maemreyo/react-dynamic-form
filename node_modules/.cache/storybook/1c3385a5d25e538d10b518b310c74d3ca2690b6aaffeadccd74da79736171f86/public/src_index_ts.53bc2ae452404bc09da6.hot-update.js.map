{"version":3,"file":"src_index_ts.53bc2ae452404bc09da6.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AAOA;AAIA;AAAA;AAAA;AAOA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAYA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAMA;AACA;AAKA;AAOA;AASA;AAIA;AAOA;AAEA;ACCA;AAAA;AAAA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/RadioInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/RadioInput.tsx?efea"],"sourcesContent":["// Filepath: /src/features/inputs/components/RadioInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst RadioGroup = styled.div<{ className?: string }>`\n  display: flex;\n  gap: 16px;\n`;\n\nconst RadioLabel = styled.label<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  cursor: pointer;\n`;\n\nconst RadioInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '';\n    display: block;\n    width: 9px; /* Giảm kích thước */\n    height: 9px; /* Giảm kích thước */\n    background-color: white;\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\ninterface RadioInputProps extends CommonInputProps {}\n\nconst RadioInput: React.FC<RadioInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <RadioGroup className={formClassNameConfig.radioGroup}>\n        {options?.map(option => (\n          <RadioLabel\n            key={option.value}\n            htmlFor={`${id}-${option.value}`}\n            className={formClassNameConfig.radioLabel}\n          >\n            <RadioInputStyled\n              {...field}\n              type=\"radio\"\n              id={`${id}-${option.value}`}\n              name={id}\n              value={option.value}\n              checked={field.value === option.value}\n              className={formClassNameConfig.radioButton}\n            />\n            {option.label}\n          </RadioLabel>\n        ))}\n      </RadioGroup>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default RadioInput;\n","// Filepath: /src/features/inputs/components/RadioInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst RadioGroup = styled.div<{ className?: string }>`\n  display: flex;\n  gap: 16px;\n`;\n\nconst RadioLabel = styled.label<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  cursor: pointer;\n`;\n\nconst RadioInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '';\n    display: block;\n    width: 9px; /* Giảm kích thước */\n    height: 9px; /* Giảm kích thước */\n    background-color: white;\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\ninterface RadioInputProps extends CommonInputProps {}\n\nconst RadioInput: React.FC<RadioInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <RadioGroup className={formClassNameConfig.radioGroup}>\n        {options?.map(option => (\n          <RadioLabel\n            key={option.value}\n            htmlFor={`${id}-${option.value}`}\n            className={formClassNameConfig.radioLabel}\n          >\n            <RadioInputStyled\n              {...field}\n              type=\"radio\"\n              id={`${id}-${option.value}`}\n              name={id}\n              value={option.value}\n              checked={field.value === option.value}\n              className={formClassNameConfig.radioButton}\n            />\n            {option.label}\n          </RadioLabel>\n        ))}\n      </RadioGroup>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default RadioInput;\n;RadioInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"RadioInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};RadioInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"RadioInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}"],"names":[],"sourceRoot":""}
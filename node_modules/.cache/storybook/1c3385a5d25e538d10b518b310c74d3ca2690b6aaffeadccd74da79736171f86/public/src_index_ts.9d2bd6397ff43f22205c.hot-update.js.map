{"version":3,"file":"src_index_ts.9d2bd6397ff43f22205c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AAGA;AACA;AAgCA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AA6BA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AAaA;;;;;AAKA;AACA;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AC5JA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;AAAA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;AAgBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AADA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AAEA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;;;;;;;;;;;;;;;;;;ACxBA;AAqMA;AA8FA;;AAEA;;;;;;;;;;;;;;;AC5SA;;;;;;;AAOA;AACA;AAKA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AAGA;;;;;;AAMA;AACA;AAIA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA","sources":["webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.tsx?fcfb","webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorRenderer.tsx?48ff","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/useDynamicForm.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/useFormFields.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/useRHFOptions.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/types.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/conditionalRendering.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/fieldUtils.ts"],"sourcesContent":["// Filepath: /src/DynamicForm.tsx\nimport React from 'react';\nimport {\n  useDynamicForm,\n  useRHFOptions,\n  useFormFields,\n  DynamicFormProvider,\n  DynamicFormProps,\n} from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nimport { DefaultTheme } from 'styled-components';\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  config = {},\n  onChange,\n  onSubmit,\n  formOptions,\n  header,\n  footer,\n  readOnly = false,\n  disableForm = false,\n  showSubmitButton = true,\n  autoSave,\n  resetOnSubmit = false,\n  focusFirstError = false,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'flex',\n  layoutConfig = { gap: '10px', columns: 2 },\n  horizontalLabel = false,\n  labelWidth,\n  enableLocalStorage = false,\n  debounceOnChange = 0,\n  disableAutocomplete = false,\n  showInlineError = true,\n  showErrorSummary = false,\n  validateOnBlur = false,\n  validateOnChange = true,\n  validateOnSubmit = true,\n  theme,\n  customInputs,\n  onFormReady,\n  renderSubmitButton,\n}) => {\n  const mergedFormOptions = useRHFOptions(\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur\n  );\n\n  const form = useDynamicForm({\n    config,\n    formOptions: mergedFormOptions,\n    autoSave,\n    enableLocalStorage,\n    resetOnSubmit,\n    focusFirstError,\n    debounceOnChange,\n    onChange,\n    onFormReady,\n  });\n\n  const { formState, control, handleSubmit } = form;\n\n  const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(\n    config, // Pass config instead of data\n    formState,\n    control\n  );\n\n  const onSubmitHandler = () => {\n    handleSubmit(data => {\n      if (onSubmit) {\n        onSubmit(data);\n      }\n    })();\n  };\n\n  return (\n    <ThemeProvider theme={theme || ({} as DefaultTheme)}>\n      <DynamicFormProvider form={form}>\n        <FormRenderer\n          onSubmit={onSubmitHandler}\n          className={className}\n          formClassNameConfig={formClassNameConfig}\n          style={style}\n          layout={layout}\n          layoutConfig={layoutConfig}\n          horizontalLabel={horizontalLabel}\n          theme={theme}\n          header={header}\n          fieldsToRender={fieldsToRender}\n          fields={fields}\n          config={config}\n          footer={footer}\n          readOnly={readOnly}\n          disableForm={disableForm}\n          showSubmitButton={showSubmitButton}\n          renderSubmitButton={renderSubmitButton}\n          formOptions={formOptions}\n          showErrorSummary={showErrorSummary}\n          labelWidth={labelWidth}\n          disableAutocomplete={disableAutocomplete}\n          showInlineError={showInlineError}\n          conditionalFieldsConfig={conditionalFieldsConfig}\n          customInputs={customInputs}\n        />\n      </DynamicFormProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default DynamicForm;\n","// Filepath: /src/DynamicForm.tsx\nimport React from 'react';\nimport {\n  useDynamicForm,\n  useRHFOptions,\n  useFormFields,\n  DynamicFormProvider,\n  DynamicFormProps,\n} from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nimport { DefaultTheme } from 'styled-components';\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  config = {},\n  onChange,\n  onSubmit,\n  formOptions,\n  header,\n  footer,\n  readOnly = false,\n  disableForm = false,\n  showSubmitButton = true,\n  autoSave,\n  resetOnSubmit = false,\n  focusFirstError = false,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'flex',\n  layoutConfig = { gap: '10px', columns: 2 },\n  horizontalLabel = false,\n  labelWidth,\n  enableLocalStorage = false,\n  debounceOnChange = 0,\n  disableAutocomplete = false,\n  showInlineError = true,\n  showErrorSummary = false,\n  validateOnBlur = false,\n  validateOnChange = true,\n  validateOnSubmit = true,\n  theme,\n  customInputs,\n  onFormReady,\n  renderSubmitButton,\n}) => {\n  const mergedFormOptions = useRHFOptions(\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur\n  );\n\n  const form = useDynamicForm({\n    config,\n    formOptions: mergedFormOptions,\n    autoSave,\n    enableLocalStorage,\n    resetOnSubmit,\n    focusFirstError,\n    debounceOnChange,\n    onChange,\n    onFormReady,\n  });\n\n  const { formState, control, handleSubmit } = form;\n\n  const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(\n    config, // Pass config instead of data\n    formState,\n    control\n  );\n\n  const onSubmitHandler = () => {\n    handleSubmit(data => {\n      if (onSubmit) {\n        onSubmit(data);\n      }\n    })();\n  };\n\n  return (\n    <ThemeProvider theme={theme || ({} as DefaultTheme)}>\n      <DynamicFormProvider form={form}>\n        <FormRenderer\n          onSubmit={onSubmitHandler}\n          className={className}\n          formClassNameConfig={formClassNameConfig}\n          style={style}\n          layout={layout}\n          layoutConfig={layoutConfig}\n          horizontalLabel={horizontalLabel}\n          theme={theme}\n          header={header}\n          fieldsToRender={fieldsToRender}\n          fields={fields}\n          config={config}\n          footer={footer}\n          readOnly={readOnly}\n          disableForm={disableForm}\n          showSubmitButton={showSubmitButton}\n          renderSubmitButton={renderSubmitButton}\n          formOptions={formOptions}\n          showErrorSummary={showErrorSummary}\n          labelWidth={labelWidth}\n          disableAutocomplete={disableAutocomplete}\n          showInlineError={showInlineError}\n          conditionalFieldsConfig={conditionalFieldsConfig}\n          customInputs={customInputs}\n        />\n      </DynamicFormProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default DynamicForm;\n;DynamicForm.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicForm\",\"props\":{\"config\":{\"required\":false,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'flex'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{ gap: '10px', columns: 2 }\",\"computed\":false}},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\",\"defaultValue\":{\"value\":\"0\",\"computed\":false}},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}};DynamicForm.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicForm\",\"props\":{\"config\":{\"required\":false,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'flex'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{ gap: '10px', columns: 2 }\",\"computed\":false}},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\",\"defaultValue\":{\"value\":\"0\",\"computed\":false}},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}}","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  FieldError,\n  FieldConfig,\n  ErrorMessageTemplate,\n} from '../features/dynamic-form';\n\nconst ErrorMessage = styled.div`\n  color: ${({ theme }) => theme.colors.error};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  margin-top: ${({ theme }) => theme.space.xs};\n`;\n\ninterface ErrorRendererProps {\n  error: FieldError;\n  formClassNameConfig?: any;\n  fieldConfig?: FieldConfig; // Add fieldConfig prop\n}\n\nconst ErrorRenderer: React.FC<ErrorRendererProps> = ({\n  error,\n  formClassNameConfig,\n  fieldConfig, // Receive fieldConfig\n}) => {\n  let message = error.message || '';\n\n  // Use validationMessages from fieldConfig if available\n  if (fieldConfig && fieldConfig.validationMessages) {\n    const template = fieldConfig.validationMessages[error.type];\n    const values = {\n      label: fieldConfig.label,\n      value: error,\n      error: error,\n      config: fieldConfig,\n    };\n    if (typeof template === 'function') {\n      message = template(values) as string;\n    } else if (typeof template === 'string') {\n      message = template;\n    }\n  }\n\n  return (\n    <ErrorMessage className={formClassNameConfig?.errorMessage}>\n      {message}\n    </ErrorMessage>\n  );\n};\n\nexport default ErrorRenderer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  FieldError,\n  FieldConfig,\n  ErrorMessageTemplate,\n} from '../features/dynamic-form';\n\nconst ErrorMessage = styled.div`\n  color: ${({ theme }) => theme.colors.error};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  margin-top: ${({ theme }) => theme.space.xs};\n`;\n\ninterface ErrorRendererProps {\n  error: FieldError;\n  formClassNameConfig?: any;\n  fieldConfig?: FieldConfig; // Add fieldConfig prop\n}\n\nconst ErrorRenderer: React.FC<ErrorRendererProps> = ({\n  error,\n  formClassNameConfig,\n  fieldConfig, // Receive fieldConfig\n}) => {\n  let message = error.message || '';\n\n  // Use validationMessages from fieldConfig if available\n  if (fieldConfig && fieldConfig.validationMessages) {\n    const template = fieldConfig.validationMessages[error.type];\n    const values = {\n      label: fieldConfig.label,\n      value: error,\n      error: error,\n      config: fieldConfig,\n    };\n    if (typeof template === 'function') {\n      message = template(values) as string;\n    } else if (typeof template === 'string') {\n      message = template;\n    }\n  }\n\n  return (\n    <ErrorMessage className={formClassNameConfig?.errorMessage}>\n      {message}\n    </ErrorMessage>\n  );\n};\n\nexport default ErrorRenderer;\n;ErrorRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ErrorRenderer\",\"props\":{\"error\":{\"required\":true,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"fieldConfig\":{\"required\":false,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"}}};ErrorRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ErrorRenderer\",\"props\":{\"error\":{\"required\":true,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"fieldConfig\":{\"required\":false,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"}}}","// Filepath: /src/features/dynamic-form/hooks/useDynamicForm.ts\n// src/features/dynamic-form/hooks/useDynamicForm.ts\nimport { useEffect, useState } from 'react';\nimport { useForm, UseFormReturn, UseFormProps } from 'react-hook-form';\nimport {\n  debounce,\n  saveToLocalStorage,\n  flattenConfig,\n  loadFromLocalStorage,\n} from '../utils';\nimport {\n  DynamicFormProps,\n  FormValues,\n  FormConfig,\n  FieldConfig,\n} from '../types';\n\n/**\n * Custom hook to manage form state and behavior.\n *\n * @param props - The hook props.\n * @returns The `react-hook-form` instance.\n */\nconst useDynamicForm = (props: DynamicFormProps): UseFormReturn<FormValues> => {\n  const {\n    formOptions,\n    autoSave,\n    enableLocalStorage,\n    resetOnSubmit,\n    focusFirstError,\n    debounceOnChange,\n    onChange,\n    onFormReady,\n    config,\n  } = props;\n\n  // Flatten the config to access default values and types easily\n  const flattenedConfig = flattenConfig(config);\n\n  // Create defaultValues object from flattened config\n  const defaultValues = Object.keys(flattenedConfig).reduce((acc, key) => {\n    if (flattenedConfig[key].defaultValue !== undefined) {\n      acc[key] = flattenedConfig[key].defaultValue;\n    }\n    return acc;\n  }, {} as FormValues);\n\n  const form = useForm<FormValues>({\n    ...formOptions,\n    defaultValues: defaultValues,\n  } as UseFormProps<FormValues>);\n\n  const { formState, reset, setFocus, watch, control } = form;\n  const { isSubmitSuccessful, errors } = formState;\n\n  const [isLocalStorageLoaded, setIsLocalStorageLoaded] = useState(false);\n\n  // Auto-save\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | null = null;\n    if (autoSave) {\n      intervalId = setInterval(() => {\n        autoSave.save(watch());\n      }, autoSave.interval);\n    }\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [autoSave, watch]);\n\n  // LocalStorage - Save data\n  useEffect(() => {\n    if (enableLocalStorage) {\n      const subscription = watch(data => saveToLocalStorage('form-data', data));\n      return () => subscription.unsubscribe();\n    }\n  }, [enableLocalStorage, watch]);\n\n  // LocalStorage - Load data\n  useEffect(() => {\n    if (enableLocalStorage) {\n      const loadedData = loadFromLocalStorage('form-data');\n      if (loadedData) {\n        const resetData: FormValues = {};\n        for (const key in flattenedConfig) {\n          const fieldConfig = flattenedConfig[key];\n          if (loadedData[key] !== undefined) {\n            if (\n              fieldConfig.type === 'radio' ||\n              fieldConfig.type === 'checkbox' ||\n              fieldConfig.type === 'switch'\n            ) {\n              // Convert string to boolean for radio, checkbox, and switch types\n              resetData[key] =\n                loadedData[key] === 'true'\n                  ? true\n                  : loadedData[key] === 'false'\n                  ? false\n                  : loadedData[key];\n\n              if (resetData[key] === undefined) {\n                resetData[key] = fieldConfig.defaultValue;\n              }\n            } else if (fieldConfig.type === 'number') {\n              // Convert string to number\n              resetData[key] =\n                loadedData[key] !== ''\n                  ? parseFloat(loadedData[key])\n                  : fieldConfig.defaultValue;\n            } else {\n              resetData[key] = loadedData[key];\n            }\n          }\n        }\n        reset(resetData);\n      }\n      setIsLocalStorageLoaded(true);\n    }\n  }, [enableLocalStorage, reset]);\n\n  // Reset on submit\n  useEffect(() => {\n    if (resetOnSubmit && isSubmitSuccessful) {\n      reset();\n    }\n  }, [resetOnSubmit, isSubmitSuccessful, reset]);\n\n  // Focus first error\n  useEffect(() => {\n    if (focusFirstError) {\n      const firstErrorKey = Object.keys(errors)[0];\n      if (firstErrorKey) {\n        setFocus(firstErrorKey);\n      }\n    }\n  }, [errors, focusFirstError, setFocus]);\n\n  // Debounce on change\n  useEffect(() => {\n    if (onChange) {\n      const debouncedOnChange = debounce(onChange, debounceOnChange || 0);\n      const subscription = watch(data => debouncedOnChange(data));\n      return () => subscription.unsubscribe();\n    }\n  }, [watch, onChange, debounceOnChange]);\n\n  // onFormReady callback\n  useEffect(() => {\n    if (onFormReady) {\n      onFormReady(form);\n    }\n  }, [form, onFormReady]);\n\n  return { ...form, control };\n};\n\nexport default useDynamicForm;\n","// Filepath: /src/features/dynamic-form/hooks/useFormFields.ts\n// src/features/dynamic-form/hooks/useFormFields.ts\nimport { useMemo, useState, useEffect } from 'react';\nimport { FormField, FormConfig, Condition, FormValues } from '../types';\nimport { FormState, useWatch, Control } from 'react-hook-form';\nimport { shouldRenderField, getFields, flattenConfig } from '../utils';\n\n/**\n * Custom hook to generate form fields from data and config.\n *\n * @param config - The form configuration.\n * @param formState - The `react-hook-form` form state.\n * @param control - The `react-hook-form` control object.\n * @returns An object containing the form fields and the fields to render.\n */\nfunction useFormFields(\n  config: FormConfig,\n  formState: FormState<FormValues>,\n  control: Control<FormValues>\n): {\n  fields: FormField[];\n  fieldsToRender: string[];\n  conditionalFieldsConfig: Condition[];\n} {\n  // Thêm state để force re-render\n  const [update, setUpdate] = useState(false);\n\n  // Thêm useEffect để force re-render khi config thay đổi\n  useEffect(() => {\n    setUpdate(prev => !prev);\n  }, [config]);\n\n  const flattenedConfig = useMemo(() => flattenConfig(config), [config]);\n\n  const conditionalFieldsConfig = useMemo(\n    () =>\n      Object.keys(config)\n        .filter(\n          fieldId =>\n            config[fieldId].conditional &&\n            typeof config[fieldId].conditional?.when === 'string'\n        )\n        .map(fieldId => ({\n          when: config[fieldId].conditional!.when,\n          operator: config[fieldId].conditional!.operator || 'is',\n          value: config[fieldId].conditional?.value,\n          comparator: config[fieldId].conditional?.comparator,\n          fields: config[fieldId].conditional!.fields || [],\n        })),\n    [config]\n  );\n\n  const watchedValues = useWatch({\n    control,\n    name: conditionalFieldsConfig.map(condition => condition.when),\n  });\n\n  const fieldsToRender = useMemo(\n    () =>\n      Object.keys(config).filter(fieldId =>\n        shouldRenderField(fieldId, conditionalFieldsConfig, watchedValues)\n      ),\n    [config, conditionalFieldsConfig, watchedValues]\n  );\n\n  const fields = useMemo(() => getFields(flattenedConfig, formState), [\n    flattenedConfig,\n    formState,\n  ]);\n\n  return { fields, fieldsToRender, conditionalFieldsConfig };\n}\n\nexport default useFormFields;\n","// src/features/dynamic-form/hooks/useRHFOptions.ts\nimport { useMemo } from 'react';\nimport { UseFormProps } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createValidationSchema } from '../../validation';\nimport { FormConfig, FormValues } from '../types';\n\nconst useRHFOptions = (\n  config: FormConfig,\n  formOptions: UseFormProps<FormValues> | undefined,\n  validateOnSubmit: boolean,\n  validateOnChange: boolean,\n  validateOnBlur: boolean\n): UseFormProps<FormValues> => {\n  // Specify the generic type here\n  return useMemo(() => {\n    const schema = createValidationSchema(config);\n    const resolver = yupResolver(schema);\n\n    return {\n      ...formOptions,\n      mode: validateOnSubmit\n        ? 'onSubmit'\n        : validateOnChange\n        ? 'onChange'\n        : validateOnBlur\n        ? 'onBlur'\n        : 'onSubmit',\n      criteriaMode: 'all',\n      resolver,\n    } as UseFormProps<FormValues>;\n  }, [config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur]);\n};\n\nexport default useRHFOptions;\n","// src/features/dynamic-form/types.ts\nimport {\n  UseFormProps,\n  UseFormReturn,\n  FieldValues,\n  RegisterOptions,\n  FieldPath,\n  SubmitHandler,\n} from 'react-hook-form';\nimport { Message, Schema } from 'yup';\nimport {\n  FormContainerProps,\n  InputWrapperProps,\n  LabelProps,\n} from '../../styles';\nimport { CommonInputProps, CustomInputProps } from '../inputs/types';\nimport { FormContentProps } from '../form-renderer';\n\nexport type LayoutType = 'flex' | 'grid';\n\nexport type InputComponentMap = {\n  [key: string]: React.ComponentType<CustomInputProps>;\n};\n\nexport interface DynamicFormProps {\n  config: FormConfig;\n  onChange?: (formData: FormValues) => void;\n  onSubmit?: SubmitHandler<FieldValues>;\n  formOptions?: UseFormProps;\n  validationSchema?: Schema<any>;\n  header?: React.ReactNode;\n  footer?: React.ReactNode;\n  readOnly?: boolean;\n  disableForm?: boolean;\n  showSubmitButton?: boolean;\n  autoSave?: {\n    interval: number;\n    save: (data: Record<string, any>) => void;\n  };\n  resetOnSubmit?: boolean;\n  focusFirstError?: boolean;\n  layout?: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  enableLocalStorage?: boolean;\n  debounceOnChange?: number;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  showErrorSummary?: boolean;\n  validateOnBlur?: boolean;\n  validateOnChange?: boolean;\n  validateOnSubmit?: boolean;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  theme?: any;\n  onFormReady?: (form: UseFormReturn<any>) => void;\n\n  renderSubmitButton?: RenderSubmitButtonProps;\n  renderFormContent?: RenderFormContentProps;\n  renderFormFooter?: RenderFormFooterProps;\n\n  customValidators?: {\n    [key: string]: (value: any, context: any) => string | undefined;\n  };\n  customInputs?: InputComponentMap;\n}\n\nexport interface FormClassNameConfig {\n  formContainer?: string;\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  button?: string;\n  errorMessage?: string;\n}\n\nexport interface FieldClassNameConfig {\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n}\n\nexport interface FormConfig {\n  [key: string]: FieldConfig;\n}\n\n/**\n * Represents a custom validation function.\n *\n * @template TFieldValue - The type of the field value.\n * @template TFormValues - The type of the form values.\n *\n * @param value - The value of the field being validated.\n * @param formValues - The values of all fields in the form.\n * @returns - A string representing the error message if validation fails, or `undefined` if validation passes.\n */\nexport type CustomValidator<\n  TFieldValue = any,\n  TFormValues extends FieldValues = FormValues\n> = (\n  value: TFieldValue,\n  formValues: TFormValues\n) => string | undefined | Promise<string | undefined>;\n\n/**\n * Validation configuration for a field.\n */\nexport type ValidationValue<T> =\n  | T\n  | {\n      value: T;\n      message: string;\n    };\n\nexport interface ValidationConfig {\n  required?: ValidationValue<boolean>;\n  minLength?: ValidationValue<number>;\n  maxLength?: ValidationValue<number>;\n  min?: ValidationValue<number | string>;\n  max?: ValidationValue<number | string>;\n  pattern?: ValidationValue<RegExp>;\n  validate?: (\n    value: any,\n    formValues: FormValues\n  ) => string | undefined | Promise<string | undefined>;\n  requiredMessage?: string;\n}\n\n/**\n * Custom error message template\n */\nexport type ErrorMessageTemplate =\n  | Message\n  | ((values: {\n      label?: string;\n      value: any;\n      error: FieldError;\n      config: FieldConfig;\n    }) => string);\n\n/**\n * Validation messages for a field.\n */\nexport interface ValidationMessages {\n  [key: string]: ErrorMessageTemplate;\n}\n\nexport interface FieldConfig {\n  type?: InputType;\n  label?: string;\n  placeholder?: string;\n  validation?: ValidationConfig;\n  component?: React.ComponentType<any>;\n  style?: React.CSSProperties;\n  readOnly?: boolean;\n  clearable?: boolean;\n  showCounter?: boolean;\n  copyToClipboard?: boolean;\n  tooltip?: string;\n  classNameConfig?: FieldClassNameConfig;\n  options?: { value: string; label: string }[];\n  conditional?: Condition;\n  fields?: FormConfig;\n  validationMessages?: ValidationMessages;\n  defaultValue?: any;\n}\n\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'checkbox'\n  | 'select'\n  | 'textarea'\n  | 'email'\n  | 'password'\n  | 'tel'\n  | 'url'\n  | 'radio'\n  | 'date'\n  | 'switch'\n  | 'time'\n  | 'datetime-local'\n  | 'combobox'\n  | 'custom';\n\nexport type UseFormRegister<TFieldValues extends FieldValues = FieldValues> = (\n  name: FieldPath<TFieldValues>,\n  options?: RegisterOptions<TFieldValues, FieldPath<TFieldValues>>\n) => any;\n\nexport interface FormField {\n  label?: string;\n  id: string;\n  type: InputType;\n  error?: FieldError;\n}\n\nexport interface FieldError {\n  type: string;\n  message?: string;\n}\n\nexport type FormValues = Record<string, any>;\n\nexport { FormContainerProps, InputWrapperProps, LabelProps };\n\n/**\n * Represents a comparison operator used in conditional rendering.\n */\nexport type ComparisonOperator =\n  | 'is'\n  | 'isNot'\n  | 'greaterThan'\n  | 'lessThan'\n  | 'greaterThanOrEqual'\n  | 'lessThanOrEqual'\n  | 'contains'\n  | 'startsWith'\n  | 'endsWith'\n  | 'custom';\n\n/**\n * Represents a function that takes a value and returns a boolean indicating whether the condition is met.\n */\nexport type ComparatorFunction = (value: any) => boolean;\n\n/**\n * Represents a condition for conditional rendering.\n */\nexport interface Condition {\n  when: string;\n  operator: ComparisonOperator;\n  value?: any;\n  comparator?: ComparatorFunction;\n  fields: string[];\n}\n\n// --- Render Props Types ---\n/**\n * Props for renderSubmitButton in DynamicFormProps.\n */\nexport type RenderSubmitButtonProps = (\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode;\n\n/**\n * Props for renderFormContent in FormRendererProps.\n */\nexport type RenderFormContentProps = (\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode;\n\n/**\n * Props for renderInput in FormContentProps.\n */\nexport type RenderInputProps = (\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Props for renderLabel in InputWrapperProps.\n */\nexport type RenderLabelProps = (\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Props for renderErrorMessage in InputWrapperProps.\n */\nexport type RenderErrorMessageProps = (\n  error: FieldError | undefined,\n  formClassNameConfig: FormClassNameConfig | undefined\n) => React.ReactNode;\n\n/**\n * Type for field errors.\n */\nexport type FieldErrors = Partial<Record<string, FieldError>>;\n\n/**\n * Props for renderFormFooter in FormRendererProps.\n */\nexport type RenderFormFooterProps = (props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode;\n\n/**\n * Extended DynamicFormProps with render props.\n */\n","// src/features/dynamic-form/hooks/conditionalRendering.ts\nimport { Condition } from '../types';\n\n/**\n * Determines if a field should be rendered based on the conditional logic.\n *\n * @param fieldId - The ID of the field to check.\n * @param conditionalFieldsConfig - The conditional fields configuration.\n * @param watchedValues - The watched values from useWatch.\n * @returns True if the field should be rendered, false otherwise.\n */\nexport const shouldRenderField = (\n  fieldId: string,\n  conditionalFieldsConfig: Condition[],\n  watchedValues: any[]\n): boolean => {\n  const isConditionalField = conditionalFieldsConfig.some(condition =>\n    condition.fields.includes(fieldId)\n  );\n\n  if (!isConditionalField) {\n    return true;\n  }\n\n  return conditionalFieldsConfig.some(condition => {\n    const conditionIndex = conditionalFieldsConfig.indexOf(condition);\n    const watchedValue = watchedValues[conditionIndex];\n    let conditionMet = false;\n\n    switch (condition.operator) {\n      case 'is':\n        conditionMet = watchedValue === condition.value;\n        break;\n      case 'isNot':\n        conditionMet = watchedValue !== condition.value;\n        break;\n      case 'greaterThan':\n        conditionMet = watchedValue > condition.value;\n        break;\n      case 'lessThan':\n        conditionMet = watchedValue < condition.value;\n        break;\n      case 'greaterThanOrEqual':\n        conditionMet = watchedValue >= condition.value;\n        break;\n      case 'lessThanOrEqual':\n        conditionMet = watchedValue <= condition.value;\n        break;\n      case 'contains':\n        conditionMet =\n          typeof watchedValue === 'string' &&\n          typeof condition.value === 'string' &&\n          watchedValue.includes(condition.value);\n        break;\n      case 'startsWith':\n        conditionMet =\n          typeof watchedValue === 'string' &&\n          typeof condition.value === 'string' &&\n          watchedValue.startsWith(condition.value);\n        break;\n      case 'endsWith':\n        conditionMet =\n          typeof watchedValue === 'string' &&\n          typeof condition.value === 'string' &&\n          watchedValue.endsWith(condition.value);\n        break;\n      case 'custom':\n        conditionMet = condition.comparator\n          ? condition.comparator(watchedValue)\n          : false;\n        break;\n      default:\n        console.warn(`Unknown operator: ${condition.operator}`);\n        conditionMet = false;\n    }\n\n    return condition.fields.includes(fieldId) && conditionMet;\n  });\n};\n","// src/features/dynamic-form/hooks/fieldUtils.ts\nimport { FormField, FormConfig, FieldError, FormValues, FieldConfig } from '../types';\nimport { getInputTypeFromValue } from '../../inputs/utils';\nimport { getErrorMessage } from './validationUtils';\nimport { get } from 'react-hook-form';\nimport { FormState } from 'react-hook-form';\n\n/**\n * Generates the form fields array based on the flattened config and form state.\n *\n * @param flattenedConfig - The flattened form configuration.\n * @param formState - The `react-hook-form` form state.\n * @returns The form fields array.\n */\nexport const getFields = (\n  flattenedConfig: any,\n  formState: FormState<FormValues>\n): FormField[] => {\n  return Object.entries(flattenedConfig).map(([key, fieldConfig]) => {\n    // Retrieve the default value from fieldConfig\n    const defaultValue = (fieldConfig as FieldConfig).defaultValue;\n\n    const inputType =\n      (fieldConfig as FieldConfig).type || getInputTypeFromValue(defaultValue);\n\n    const fieldError = get(formState.errors, key) as FieldError | undefined;\n    const errorMessage = getErrorMessage(\n      fieldConfig as FieldConfig,\n      fieldError,\n      {}\n    );\n\n    return {\n      label: (fieldConfig as FieldConfig).label,\n      id: key,\n      type: inputType,\n      error: errorMessage\n        ? {\n            ...fieldError,\n            message: errorMessage,\n            type: fieldError?.type || '',\n          } // Merge errorMessage into fieldError and ensure type is always defined\n        : fieldError, // Use the unwrapped fieldError\n    };\n  });\n};\n"],"names":[],"sourceRoot":""}
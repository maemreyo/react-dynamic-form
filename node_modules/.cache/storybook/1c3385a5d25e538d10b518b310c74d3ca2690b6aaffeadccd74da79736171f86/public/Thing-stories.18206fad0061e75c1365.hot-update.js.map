{"version":3,"file":"Thing-stories.18206fad0061e75c1365.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AAiBA;AACA;AACA;AAAA;AAeA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AA0BA;AACA;AAeA;AACA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AChIA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AC/CA;AAEA;AACA;AAQA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAGA;AAHA;AAYA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AClCA;AACA;AAsBA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AAoBA;;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAaA;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AASA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAKA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AAUA;;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAWA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAIA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAMA;AAAA;AAAA;AAOA;AAAA;AAAA;AAUA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAQA;AACA;AAGA;AACA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAQA;;;;;AAKA;AACA;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;AC/JA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;AAAA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;AAgBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AADA;AAMA;AAKA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AAEA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACIA;AAkbA;AAEA;AAEA;;;;;;;;;;;;;;;AC5bA;;;;;;;AAOA;AACA;AAKA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AAGA;;;;;;AAMA;AACA;AAIA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC1CA;;;;;;;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AAKA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACDA;;;;;;;AAOA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAuBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAEA;AAUA;AACA;AAEA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AASA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AASA;AAYA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AAGA;AACA;AAOA;AAcA;AACA;AAQA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AAEA;AAwBA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACHA;;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AAAA;AAAA;AAOA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AAUA;AAAA;AAAA;AAUA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AAOA;AAGA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACxGA;;AAEA;AAMA;AACA;AACA;AAEA;AAKA;AAKA;AAAA;AAAA;AAcA;AAIA;AAAA;AAAA;AAGA;AAAA;AAAA;AAeA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAIA;AAUA;AAwBA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC9NA;;AAEA;AACA;AAGA;AACA;AAEA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAMA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AC9DA;;AAEA;AACA;AAGA;AACA;AAEA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAMA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AAUA;AAEA;AACA;AAeA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC5FA;;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAWA;AAEA;AAAA;AAAA;AAMA;AAAA;AAAA;AAMA;AAAA;AAAA;AAkBA;;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAGA;AAMA;AACA;AAKA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAMA;AACA;AAMA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChLA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AAOA;AAIA;AAAA;AAAA;AAOA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAYA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAMA;AACA;AAKA;AAOA;AASA;AAIA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACtIA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAWA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AASA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAOA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChHA;AACA;AAEA;AAEA;AACA;AAGA;AAQA;AAKA;AAAA;AAAA;AAGA;AAAA;AAAA;AAYA;AA2BA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AASA;AAIA;AAMA;AAEA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AAGA;AACA;AAEA;;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAOA;AACA;AACA;AAKA;AAQA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAAA;AAUA;;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAMA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC5GA;;AAEA;AACA;AAGA;AACA;AAEA;;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAKA;AAMA;AAOA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAIA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;AC5DA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAIA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;ACrCA;AAEA;AACA;AAYA;AACA;AAQA;AAgBA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AC3CA;AAEA;AACA;AAYA;AACA;AAQA;AAgBA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;;;;;;;;;;;;;;;ACCA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvBA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAIA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;AChDA;AACA;;;;;;;;;;;;;;;;;;ACDA;;AAEA;AAEA;AAEA;;;;;;;AAOA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAKA;AAEA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AAIA;;;;AAIA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpRA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;;;AAIA;AACA;AAUA;AAAA;AACA;AAEA;AAEA;AAGA;AAEA;ACCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACjsources":["webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/DynamicForm.tsx?fcfb","webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorMessage/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorRenderer.tsx?48ff","webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorSummary.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/components/ErrorSummary.tsx?f116","webpack://@matthew.ngo/react-dynamic-form/./src/components/FormContainer/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/GridFormContainer/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/Input/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/InputWrapper/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/Label/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/SubmitButton/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/components/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/DynamicFormProvider.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/DynamicFormProvider.tsx?41d9","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/useDynamicForm.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/useFormFields.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/hooks/useRHFOptions.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/types.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/conditionalRendering.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/fieldUtils.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/formUtils.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/dynamic-form/utils/validationUtils.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/FormRenderer.tsx?4b39","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormContent.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormContent.tsx?5473","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormFooter.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormFooter.tsx?3af5","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormLayout.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/FormLayout.tsx?7c5e","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/components/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/form-renderer/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/CheckboxInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/CheckboxInput.tsx?866a","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/ComboBox.tsx?a3ac","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/DateInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/DateInput.tsx?0a2f","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/DateTimePicker.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/DateTimePicker.tsx?3188","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/InputRenderer.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/InputRenderer.tsx?0fdf","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/NumberInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/NumberInput.tsx?2428","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/RadioInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/RadioInput.tsx?efea","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SelectInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SelectInput.tsx?bc00","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SwitchInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/SwitchInput.tsx?0a0e","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TextInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TextInput.tsx?de1a","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TextareaInput.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TextareaInput.tsx?c197","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TimePicker.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/TimePicker.tsx?2c4e","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/components/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/InputRegistry.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/LayoutRegistry.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/FlexLayout.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/FlexLayout.tsx?870e","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/GridLayout.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/components/GridLayout.tsx?2c2f","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/registry/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/inputs/utils.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/validation/ValidationSchemaRegistry.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/validation/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/features/validation/validationSchema.ts","webpack://@matthew.ngo/react-dynamic-form/./src/index.ts","webpack://@matthew.ngo/react-dynamic-form/./src/styles.ts","webpack://@matthew.ngo/react-dynamic-form/./src/theme/ThemeProvider.tsx","webpack://@matthew.ngo/react-dynamic-form/./src/theme/ThemeProvider.tsx?e6b7","webpack://@matthew.ngo/react-dynamic-form/./src/theme/index.ts"],"sourcesContent":["// Filepath: /src/DynamicForm.tsx\nimport React from 'react';\nimport {\n  useDynamicForm,\n  useRHFOptions,\n  useFormFields,\n  DynamicFormProvider,\n  DynamicFormProps,\n} from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nimport { DefaultTheme } from 'styled-components';\nimport { SubmitButton } from './styles';\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  config = {},\n  onChange,\n  onSubmit,\n  formOptions,\n  header,\n  footer,\n  readOnly = false,\n  disableForm = false,\n  showSubmitButton = true,\n  autoSave,\n  resetOnSubmit = false,\n  focusFirstError = false,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig = {\n    minWidth: '300px',\n  }, // Default layoutConfig\n  horizontalLabel = false,\n  labelWidth,\n  enableLocalStorage = false,\n  debounceOnChange = 0,\n  disableAutocomplete = false,\n  showInlineError = true,\n  showErrorSummary = false,\n  validateOnBlur = false,\n  validateOnChange = true,\n  validateOnSubmit = true,\n  theme,\n  customInputs,\n  onFormReady,\n  renderSubmitButton,\n}) => {\n  const mergedFormOptions = useRHFOptions(\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur\n  );\n  const form = useDynamicForm({\n    config,\n    formOptions: mergedFormOptions,\n    autoSave,\n    enableLocalStorage,\n    resetOnSubmit,\n    focusFirstError,\n    debounceOnChange,\n    onChange,\n    onFormReady,\n  });\n  const { formState, control, handleSubmit } = form;\n  const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(\n    config, // Pass config instead of data\n    formState,\n    control\n  );\n  const onSubmitHandler = (): any => {\n    handleSubmit(data => {\n      if (onSubmit) {\n        onSubmit(data);\n      }\n    })();\n  };\n\n  return (\n    <ThemeProvider theme={theme || ({} as DefaultTheme)}>\n      <DynamicFormProvider form={form}>\n        <FormRenderer\n          onSubmit={onSubmitHandler}\n          className={className}\n          formClassNameConfig={formClassNameConfig}\n          style={style}\n          layout={layout}\n          layoutConfig={layoutConfig}\n          horizontalLabel={horizontalLabel}\n          theme={theme}\n          header={header}\n          fieldsToRender={fieldsToRender}\n          fields={fields}\n          config={config}\n          footer={footer}\n          readOnly={readOnly}\n          disableForm={disableForm}\n          showSubmitButton={showSubmitButton}\n          renderSubmitButton={renderSubmitButton}\n          formOptions={formOptions}\n          showErrorSummary={showErrorSummary}\n          labelWidth={labelWidth}\n          disableAutocomplete={disableAutocomplete}\n          showInlineError={showInlineError}\n          conditionalFieldsConfig={conditionalFieldsConfig}\n          customInputs={customInputs}\n        />\n        {showSubmitButton &&\n          (renderSubmitButton ? (\n            renderSubmitButton(onSubmitHandler, formState.isSubmitting)\n          ) : (\n            <SubmitButton\n              type=\"submit\"\n              onClick={onSubmitHandler}\n              disabled={formState.isSubmitting}\n              className={formClassNameConfig?.button}\n            >\n              Submit\n            </SubmitButton>\n          ))}\n      </DynamicFormProvider>\n    </ThemeProvider>\n  );\n};\nexport default DynamicForm;\n","// Filepath: /src/DynamicForm.tsx\nimport React from 'react';\nimport {\n  useDynamicForm,\n  useRHFOptions,\n  useFormFields,\n  DynamicFormProvider,\n  DynamicFormProps,\n} from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nimport { DefaultTheme } from 'styled-components';\nimport { SubmitButton } from './styles';\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  config = {},\n  onChange,\n  onSubmit,\n  formOptions,\n  header,\n  footer,\n  readOnly = false,\n  disableForm = false,\n  showSubmitButton = true,\n  autoSave,\n  resetOnSubmit = false,\n  focusFirstError = false,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig = {\n    minWidth: '300px',\n  }, // Default layoutConfig\n  horizontalLabel = false,\n  labelWidth,\n  enableLocalStorage = false,\n  debounceOnChange = 0,\n  disableAutocomplete = false,\n  showInlineError = true,\n  showErrorSummary = false,\n  validateOnBlur = false,\n  validateOnChange = true,\n  validateOnSubmit = true,\n  theme,\n  customInputs,\n  onFormReady,\n  renderSubmitButton,\n}) => {\n  const mergedFormOptions = useRHFOptions(\n    config,\n    formOptions,\n    validateOnSubmit,\n    validateOnChange,\n    validateOnBlur\n  );\n  const form = useDynamicForm({\n    config,\n    formOptions: mergedFormOptions,\n    autoSave,\n    enableLocalStorage,\n    resetOnSubmit,\n    focusFirstError,\n    debounceOnChange,\n    onChange,\n    onFormReady,\n  });\n  const { formState, control, handleSubmit } = form;\n  const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(\n    config, // Pass config instead of data\n    formState,\n    control\n  );\n  const onSubmitHandler = (): any => {\n    handleSubmit(data => {\n      if (onSubmit) {\n        onSubmit(data);\n      }\n    })();\n  };\n\n  return (\n    <ThemeProvider theme={theme || ({} as DefaultTheme)}>\n      <DynamicFormProvider form={form}>\n        <FormRenderer\n          onSubmit={onSubmitHandler}\n          className={className}\n          formClassNameConfig={formClassNameConfig}\n          style={style}\n          layout={layout}\n          layoutConfig={layoutConfig}\n          horizontalLabel={horizontalLabel}\n          theme={theme}\n          header={header}\n          fieldsToRender={fieldsToRender}\n          fields={fields}\n          config={config}\n          footer={footer}\n          readOnly={readOnly}\n          disableForm={disableForm}\n          showSubmitButton={showSubmitButton}\n          renderSubmitButton={renderSubmitButton}\n          formOptions={formOptions}\n          showErrorSummary={showErrorSummary}\n          labelWidth={labelWidth}\n          disableAutocomplete={disableAutocomplete}\n          showInlineError={showInlineError}\n          conditionalFieldsConfig={conditionalFieldsConfig}\n          customInputs={customInputs}\n        />\n        {showSubmitButton &&\n          (renderSubmitButton ? (\n            renderSubmitButton(onSubmitHandler, formState.isSubmitting)\n          ) : (\n            <SubmitButton\n              type=\"submit\"\n              onClick={onSubmitHandler}\n              disabled={formState.isSubmitting}\n              className={formClassNameConfig?.button}\n            >\n              Submit\n            </SubmitButton>\n          ))}\n      </DynamicFormProvider>\n    </ThemeProvider>\n  );\n};\nexport default DynamicForm;\n;DynamicForm.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicForm\",\"props\":{\"config\":{\"required\":false,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{\\n  minWidth: '300px',\\n}\",\"computed\":false}},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\",\"defaultValue\":{\"value\":\"0\",\"computed\":false}},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}};DynamicForm.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicForm\",\"props\":{\"config\":{\"required\":false,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{\\n  minWidth: '300px',\\n}\",\"computed\":false}},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\",\"defaultValue\":{\"value\":\"0\",\"computed\":false}},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}}","// Filepath: /src/components/ErrorMessage/index.ts\nimport styled from 'styled-components';\n\n/**\n * Styled error message.\n */\nexport const ErrorMessage = styled.div<{ className?: string }>`\n  color: ${({ theme }) => theme.colors.danger};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  margin-top: ${({ theme }) => theme.space.xs};\n  display: block; /* Thêm display block */\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FieldError, FieldConfig } from '../features/dynamic-form';\n\nconst ErrorMessage = styled.div`\n  color: ${({ theme }) => theme.colors.error};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  margin-top: ${({ theme }) => theme.space.xs};\n`;\n\ninterface ErrorRendererProps {\n  error: FieldError;\n  formClassNameConfig?: any;\n  fieldConfig?: FieldConfig; // Add fieldConfig prop\n}\n\nconst ErrorRenderer: React.FC<ErrorRendererProps> = ({\n  error,\n  formClassNameConfig,\n  fieldConfig, // Receive fieldConfig\n}) => {\n  let message = error.message || '';\n\n  // Use validationMessages from fieldConfig if available\n  if (fieldConfig && fieldConfig.validationMessages) {\n    const template = fieldConfig.validationMessages[error.type];\n    const values = {\n      label: fieldConfig.label,\n      value: error,\n      error: error,\n      config: fieldConfig,\n    };\n    if (typeof template === 'function') {\n      message = template(values) as string;\n    } else if (typeof template === 'string') {\n      message = template;\n    }\n  }\n\n  return (\n    <ErrorMessage className={formClassNameConfig?.errorMessage}>\n      {message}\n    </ErrorMessage>\n  );\n};\n\nexport default ErrorRenderer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FieldError, FieldConfig } from '../features/dynamic-form';\n\nconst ErrorMessage = styled.div`\n  color: ${({ theme }) => theme.colors.error};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  margin-top: ${({ theme }) => theme.space.xs};\n`;\n\ninterface ErrorRendererProps {\n  error: FieldError;\n  formClassNameConfig?: any;\n  fieldConfig?: FieldConfig; // Add fieldConfig prop\n}\n\nconst ErrorRenderer: React.FC<ErrorRendererProps> = ({\n  error,\n  formClassNameConfig,\n  fieldConfig, // Receive fieldConfig\n}) => {\n  let message = error.message || '';\n\n  // Use validationMessages from fieldConfig if available\n  if (fieldConfig && fieldConfig.validationMessages) {\n    const template = fieldConfig.validationMessages[error.type];\n    const values = {\n      label: fieldConfig.label,\n      value: error,\n      error: error,\n      config: fieldConfig,\n    };\n    if (typeof template === 'function') {\n      message = template(values) as string;\n    } else if (typeof template === 'string') {\n      message = template;\n    }\n  }\n\n  return (\n    <ErrorMessage className={formClassNameConfig?.errorMessage}>\n      {message}\n    </ErrorMessage>\n  );\n};\n\nexport default ErrorRenderer;\n;ErrorRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ErrorRenderer\",\"props\":{\"error\":{\"required\":true,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"fieldConfig\":{\"required\":false,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"}}};ErrorRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ErrorRenderer\",\"props\":{\"error\":{\"required\":true,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"fieldConfig\":{\"required\":false,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"}}}","// Filepath: /src/components/ErrorSummary.tsx\n\nimport React from 'react';\nimport ErrorRenderer from './ErrorRenderer';\nimport { FieldError } from '../features/dynamic-form';\n\ninterface ErrorSummaryProps {\n  errors: Partial<Record<string, FieldError>>;\n  formClassNameConfig?: any;\n}\n\nconst ErrorSummary: React.FC<ErrorSummaryProps> = ({\n  errors,\n  formClassNameConfig,\n}) => {\n  return (\n    <div>\n      <h3>Error Summary:</h3>\n      <ul>\n        {Object.entries(errors).map(([key, error]) => (\n          <li key={key}>\n            {/* Use ErrorRenderer here */}\n            <ErrorRenderer\n              error={error!}\n              formClassNameConfig={formClassNameConfig}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ErrorSummary;\n","// Filepath: /src/components/ErrorSummary.tsx\n\nimport React from 'react';\nimport ErrorRenderer from './ErrorRenderer';\nimport { FieldError } from '../features/dynamic-form';\n\ninterface ErrorSummaryProps {\n  errors: Partial<Record<string, FieldError>>;\n  formClassNameConfig?: any;\n}\n\nconst ErrorSummary: React.FC<ErrorSummaryProps> = ({\n  errors,\n  formClassNameConfig,\n}) => {\n  return (\n    <div>\n      <h3>Error Summary:</h3>\n      <ul>\n        {Object.entries(errors).map(([key, error]) => (\n          <li key={key}>\n            {/* Use ErrorRenderer here */}\n            <ErrorRenderer\n              error={error!}\n              formClassNameConfig={formClassNameConfig}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ErrorSummary;\n;ErrorSummary.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ErrorSummary\",\"props\":{\"errors\":{\"required\":true,\"tsType\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"}}};ErrorSummary.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ErrorSummary\",\"props\":{\"errors\":{\"required\":true,\"tsType\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"}}}","// Filepath: /src/components/FormContainer/index.ts\nimport styled from 'styled-components';\nimport { LayoutType } from '../../features/dynamic-form';\nimport { FormLayoutProps } from '../../features/form-renderer';\n\n/**\n * Props for the FormContainer component.\n */\n// Update FormContainerProps\nexport type FormContainerProps = Pick<\n  FormLayoutProps,\n  | 'children'\n  | 'className'\n  | 'formClassNameConfig'\n  | 'style'\n  | 'layoutConfig'\n  | 'horizontalLabel'\n  | 'onSubmit'\n> & {\n  $layout: LayoutType;\n  $layoutConfig?: any;\n  $horizontalLabel?: boolean;\n};\n/**\n * Styled form container.\n */\nexport const FormContainer = styled.form<FormContainerProps>`\n  display: ${({ $layout }) => ($layout === 'grid' ? 'grid' : 'flex')};\n  flex-direction: ${({ $layout, $horizontalLabel }) =>\n    $layout === 'grid' || $horizontalLabel ? 'row' : 'column'};\n  gap: ${({ $layoutConfig, theme }) => $layoutConfig?.gap || theme.space.md};\n  padding: ${({ theme }) => theme.space['3xl']};\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: ${({ theme }) => theme.radii.md};\n`;\n","// Filepath: /src/components/GridFormContainer/index.ts\n// [CONTINUE-2]\nimport styled, { css } from 'styled-components';\nimport { FormContainer } from '../FormContainer';\nimport { FormLayoutProps } from '../../features/form-renderer';\n/**\n * Props for the GridFormContainer component.\n */\nexport type GridFormContainerProps = Pick<\n  FormLayoutProps,\n  | 'children'\n  | 'className'\n  | 'formClassNameConfig'\n  | 'style'\n  | 'layoutConfig'\n  | 'horizontalLabel'\n> & {\n  $minWidth?: string;\n  $gap?: string;\n  $breakpoints?: { [key: string]: number }; // Define breakpoints type\n  $layoutConfig?: any;\n  $horizontalLabel?: boolean;\n};\n/**\n * Styled grid form container.\n */\nexport const GridFormContainer = styled(FormContainer)<GridFormContainerProps>`\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    minmax(${(props) => props.$minWidth || '250px'}, 1fr)\n  );\n  gap: ${({ $gap, theme }) => $gap || theme.space.md};\n  ${(props) => {\n    const { $breakpoints = props.theme.breakpoints } = props;\n    return Object.entries($breakpoints)\n      .sort(([, a], [, b]) => Number(a) - Number(b)) // Sort breakpoints in ascending order\n      .map(\n        ([, value]: any) => css`\n          @media (min-width: ${value}px) {\n            grid-template-columns: repeat(\n              auto-fit,\n              minmax(\n                ${(props: any) => props.$minWidth || '250px'},\n                // Use prop or default minWidth\n                1fr\n              )\n            );\n          }\n        `\n      );\n  }}\n`;\n","// Filepath: /src/components/Input/index.ts\nimport styled, { css } from 'styled-components';\n\n/**\n * Base styles for form elements.\n */\nconst baseFormElementStyles = css`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px 12px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-size: ${({ theme }) => theme.fontSizes.small}; /* Giảm font-size */\n  width: 100%;\n  transition:\n    border-color 0.2s ease-in-out,\n    box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n`;\n\n/**\n * Styled input.\n */\nexport const Input = styled.input<{ className?: string }>`\n  ${baseFormElementStyles}\n\n  &[type='number'] {\n    -moz-appearance: textfield; /* Firefox */\n  }\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none; /* Chrome, Safari, Edge */\n    margin: 0;\n  }\n`;\n","// Filepath: /src/components/InputWrapper/index.ts\nimport styled from 'styled-components';\n\n/**\n * Props for the InputWrapper component.\n */\nexport interface InputWrapperProps {\n  $horizontalLabel?: boolean;\n  $labelWidth?: string | number;\n}\n\n/**\n * Styled input wrapper.\n */\nexport const InputWrapper = styled.div<InputWrapperProps>`\n  display: flex;\n  margin-bottom: ${({ theme }) => theme.space['2xl']};\n  align-items: ${({ $horizontalLabel }) =>\n    $horizontalLabel ? 'center' : 'flex-start'};\n  flex-direction: ${({ $horizontalLabel }) =>\n    $horizontalLabel ? 'row' : 'column'};\n\n  > :first-child {\n    margin-right: ${({ $horizontalLabel }) =>\n      $horizontalLabel ? '0.5em' : '0'};\n  }\n`;\n","// Filepath: /src/components/Label/index.ts\nimport styled, { css } from 'styled-components';\n\n/**\n * Props for the Label component.\n */\nexport interface LabelProps {\n  $horizontalLabel?: boolean;\n  $labelWidth?: string | number;\n  className?: string;\n}\n\n/**\n * Common styles for labels.\n */\nconst labelCommonStyles = css<LabelProps>`\n  margin-bottom: ${({ theme, $horizontalLabel }) =>\n    $horizontalLabel ? '0' : theme.space.sm};\n  margin-right: ${({ theme, $horizontalLabel }) =>\n    $horizontalLabel ? theme.space.md : '0'};\n  color: ${({ theme }) => theme.colors.text};\n  font-weight: ${({ theme }) => theme.fontWeights.semibold};\n  width: ${({ $labelWidth }) =>\n    $labelWidth\n      ? typeof $labelWidth === 'number'\n        ? `${$labelWidth}px`\n        : $labelWidth\n      : 'auto'};\n  flex-shrink: 0;\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  display: block; /* Thêm display block */\n`;\n\n/**\n * Styled label.\n */\nexport const Label = styled.label<LabelProps>`\n  ${labelCommonStyles}\n`;\n","// Filepath: /src/components/SubmitButton/index.ts\nimport styled from 'styled-components';\n\n/**\n * Styled submit button.\n */\nexport const SubmitButton = styled.button`\n  background-color: ${({ theme }) => theme.colors.info};\n  color: ${({ theme }) => theme.colors.white};\n  border: none;\n  padding: 10px 20px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-weight: ${({ theme }) => theme.fontWeights.semibold};\n  cursor: pointer;\n  transition:\n    background-color 0.2s ease-in-out,\n    opacity 0.2s ease-in-out;\n  width: auto;\n  font-size: ${({ theme }) => theme.fontSizes.medium}; /* Giảm font-size */\n  box-shadow:\n    0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n    0px 1px 10px 0px rgba(0, 0, 0, 0.12); /* Thêm đổ bóng */\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n`;\n","// Filepath: /src/components/index.ts\nexport { default as ErrorSummary } from './ErrorSummary';\nexport { default as ErrorRenderer } from './ErrorRenderer';\n","// src/features/dynamic-form/DynamicFormProvider.tsx\nimport React, { FC, ReactNode } from 'react';\nimport { FormProvider, UseFormReturn } from 'react-hook-form';\nimport { FormValues } from './types';\n\ninterface DynamicFormProviderProps {\n  form: UseFormReturn<FormValues>;\n  children: ReactNode;\n}\n\nconst DynamicFormProvider: FC<DynamicFormProviderProps> = ({\n  form,\n  children,\n}) => {\n  return <FormProvider {...form}>{children}</FormProvider>;\n};\n\nexport default DynamicFormProvider;\n","// src/features/dynamic-form/DynamicFormProvider.tsx\nimport React, { FC, ReactNode } from 'react';\nimport { FormProvider, UseFormReturn } from 'react-hook-form';\nimport { FormValues } from './types';\n\ninterface DynamicFormProviderProps {\n  form: UseFormReturn<FormValues>;\n  children: ReactNode;\n}\n\nconst DynamicFormProvider: FC<DynamicFormProviderProps> = ({\n  form,\n  children,\n}) => {\n  return <FormProvider {...form}>{children}</FormProvider>;\n};\n\nexport default DynamicFormProvider;\n;DynamicFormProvider.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicFormProvider\",\"props\":{\"form\":{\"required\":true,\"tsType\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormReturn<FormValues>\"},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactNode\"},\"description\":\"\"}}};DynamicFormProvider.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DynamicFormProvider\",\"props\":{\"form\":{\"required\":true,\"tsType\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormReturn<FormValues>\"},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactNode\"},\"description\":\"\"}}}","// src/features/dynamic-form/hooks/index.ts\nexport { default as useDynamicForm } from './useDynamicForm';\nexport { default as useFormFields } from './useFormFields';\nexport { default as useRHFOptions } from './useRHFOptions';\n","// Filepath: /src/features/dynamic-form/hooks/useDynamicForm.ts\n// src/features/dynamic-form/hooks/useDynamicForm.ts\nimport { useEffect, useState } from 'react';\nimport { useForm, UseFormReturn, UseFormProps } from 'react-hook-form';\nimport {\n  debounce,\n  saveToLocalStorage,\n  flattenConfig,\n  loadFromLocalStorage,\n} from '../utils';\nimport { DynamicFormProps, FormValues } from '../types';\n\n/**\n * Custom hook to manage form state and behavior.\n *\n * @param props - The hook props.\n * @returns The `react-hook-form` instance.\n */\nconst useDynamicForm = (props: DynamicFormProps): UseFormReturn<FormValues> => {\n  const {\n    formOptions,\n    autoSave,\n    enableLocalStorage,\n    resetOnSubmit,\n    focusFirstError,\n    debounceOnChange,\n    onChange,\n    onFormReady,\n    config,\n  } = props;\n\n  // Flatten the config to access default values and types easily\n  const flattenedConfig = flattenConfig(config);\n\n  // Create defaultValues object from flattened config\n  const defaultValues = Object.keys(flattenedConfig).reduce((acc, key) => {\n    if (flattenedConfig[key].defaultValue !== undefined) {\n      acc[key] = flattenedConfig[key].defaultValue;\n    }\n    return acc;\n  }, {} as FormValues);\n\n  const form = useForm<FormValues>({\n    ...formOptions,\n    defaultValues: defaultValues,\n  } as UseFormProps<FormValues>);\n\n  const { formState, reset, setFocus, watch, control } = form;\n  const { isSubmitSuccessful, errors } = formState;\n\n  // @ts-expect-error\n  const [isLocalStorageLoaded, setIsLocalStorageLoaded] = useState(false);\n\n  // Auto-save\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | null = null;\n    if (autoSave) {\n      intervalId = setInterval(() => {\n        autoSave.save(watch());\n      }, autoSave.interval);\n    }\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [autoSave, watch]);\n\n  // LocalStorage - Save data\n  // @ts-expect-error\n  useEffect(() => {\n    if (enableLocalStorage) {\n      const subscription = watch((data) =>\n        saveToLocalStorage('form-data', data)\n      );\n      return () => subscription.unsubscribe();\n    }\n  }, [enableLocalStorage, watch]);\n\n  // LocalStorage - Load data\n  useEffect(() => {\n    if (enableLocalStorage) {\n      const loadedData = loadFromLocalStorage('form-data');\n      if (loadedData) {\n        const resetData: FormValues = {};\n        for (const key in flattenedConfig) {\n          const fieldConfig = flattenedConfig[key];\n          if (loadedData[key] !== undefined) {\n            if (\n              fieldConfig.type === 'radio' ||\n              fieldConfig.type === 'checkbox' ||\n              fieldConfig.type === 'switch'\n            ) {\n              // Convert string to boolean for radio, checkbox, and switch types\n              resetData[key] =\n                loadedData[key] === 'true'\n                  ? true\n                  : loadedData[key] === 'false'\n                    ? false\n                    : loadedData[key];\n\n              if (resetData[key] === undefined) {\n                resetData[key] = fieldConfig.defaultValue;\n              }\n            } else if (fieldConfig.type === 'number') {\n              // Convert string to number\n              resetData[key] =\n                loadedData[key] !== ''\n                  ? parseFloat(loadedData[key])\n                  : fieldConfig.defaultValue;\n            } else {\n              resetData[key] = loadedData[key];\n            }\n          }\n        }\n        reset(resetData);\n      }\n      setIsLocalStorageLoaded(true);\n    }\n  }, [enableLocalStorage, reset]);\n\n  // Reset on submit\n  useEffect(() => {\n    if (resetOnSubmit && isSubmitSuccessful) {\n      reset();\n    }\n  }, [resetOnSubmit, isSubmitSuccessful, reset]);\n\n  // Focus first error\n  useEffect(() => {\n    if (focusFirstError) {\n      const firstErrorKey = Object.keys(errors)[0];\n      if (firstErrorKey) {\n        setFocus(firstErrorKey);\n      }\n    }\n  }, [errors, focusFirstError, setFocus]);\n\n  // Debounce on change\n  // @ts-expect-error\n  useEffect(() => {\n    if (onChange) {\n      const debouncedOnChange = debounce(onChange, debounceOnChange || 0);\n      const subscription = watch((data) => debouncedOnChange(data));\n      return () => subscription.unsubscribe();\n    }\n  }, [watch, onChange, debounceOnChange]);\n\n  // onFormReady callback\n  useEffect(() => {\n    if (onFormReady) {\n      onFormReady(form);\n    }\n  }, [form, onFormReady]);\n\n  return {\n    ...form,\n    control,\n  };\n};\n\nexport default useDynamicForm;\n","// Filepath: /src/features/dynamic-form/hooks/useFormFields.ts\n// src/features/dynamic-form/hooks/useFormFields.ts\nimport { useMemo, useState, useEffect } from 'react';\nimport { FormField, FormConfig, Condition, FormValues } from '../types';\nimport { FormState, useWatch, Control } from 'react-hook-form';\nimport { shouldRenderField, getFields, flattenConfig } from '../utils';\n\n/**\n * Custom hook to generate form fields from data and config.\n *\n * @param config - The form configuration.\n * @param formState - The `react-hook-form` form state.\n * @param control - The `react-hook-form` control object.\n * @returns An object containing the form fields and the fields to render.\n */\nfunction useFormFields(\n  config: FormConfig,\n  formState: FormState<FormValues>,\n  control: Control<FormValues>\n): {\n  fields: FormField[];\n  fieldsToRender: string[];\n  conditionalFieldsConfig: Condition[];\n} {\n  // @ts-expect-error\n  const [update, setUpdate] = useState(false);\n\n  // Thêm useEffect để force re-render khi config thay đổi\n  useEffect(() => {\n    setUpdate((prev) => !prev);\n  }, [config]);\n\n  const flattenedConfig = useMemo(() => flattenConfig(config), [config]);\n\n  const conditionalFieldsConfig = useMemo(\n    () =>\n      Object.keys(config)\n        .filter(\n          (fieldId) =>\n            config[fieldId].conditional &&\n            typeof config[fieldId].conditional?.when === 'string'\n        )\n        .map((fieldId) => ({\n          when: config[fieldId].conditional!.when,\n          operator: config[fieldId].conditional!.operator || 'is',\n          value: config[fieldId].conditional?.value,\n          comparator: config[fieldId].conditional?.comparator,\n          fields: config[fieldId].conditional!.fields || [],\n        })),\n    [config]\n  );\n\n  const watchedValues = useWatch({\n    control,\n    name: conditionalFieldsConfig.map((condition) => condition.when),\n  });\n\n  const fieldsToRender = useMemo(\n    () =>\n      Object.keys(config).filter((fieldId) =>\n        shouldRenderField(fieldId, conditionalFieldsConfig, watchedValues)\n      ),\n    [config, conditionalFieldsConfig, watchedValues]\n  );\n\n  const fields = useMemo(\n    () => getFields(flattenedConfig, formState),\n    [flattenedConfig, formState]\n  );\n\n  return { fields, fieldsToRender, conditionalFieldsConfig };\n}\n\nexport default useFormFields;\n","// src/features/dynamic-form/hooks/useRHFOptions.ts\nimport { useMemo } from 'react';\nimport { UseFormProps } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createValidationSchema } from '../../validation';\nimport { FormConfig, FormValues } from '../types';\n\nconst useRHFOptions = (\n  config: FormConfig,\n  formOptions: UseFormProps<FormValues> | undefined,\n  validateOnSubmit: boolean,\n  validateOnChange: boolean,\n  validateOnBlur: boolean\n): UseFormProps<FormValues> => {\n  // Specify the generic type here\n  return useMemo(() => {\n    const schema = createValidationSchema(config);\n    const resolver = yupResolver(schema);\n\n    return {\n      ...formOptions,\n      mode: validateOnSubmit\n        ? 'onSubmit'\n        : validateOnChange\n          ? 'onChange'\n          : validateOnBlur\n            ? 'onBlur'\n            : 'onSubmit',\n      criteriaMode: 'all',\n      resolver,\n    } as UseFormProps<FormValues>;\n  }, [config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur]);\n};\n\nexport default useRHFOptions;\n","// Core logic and hooks for DynamicForm\nexport * from './hooks';\nexport * from './types';\nexport * from './utils';\nexport { default as DynamicFormProvider } from './DynamicFormProvider';\nexport { default as useDynamicForm } from './hooks/useDynamicForm';\n","// src/features/dynamic-form/types.ts\nimport {\n  UseFormProps,\n  UseFormReturn,\n  FieldValues,\n  SubmitHandler,\n  FieldErrors as RHFFieldErrors,\n} from 'react-hook-form';\nimport { Message, Schema } from 'yup';\nimport {\n  FormContainerProps,\n  InputWrapperProps,\n  LabelProps,\n} from '../../styles';\nimport { CommonInputProps, CustomInputProps } from '../inputs/types';\nimport { FormContentProps } from '../form-renderer';\n\n// --- Layout ---\n\n/**\n * Type alias for layout types.\n */\nexport type LayoutType = 'flex' | 'grid';\n\n// --- Form Config ---\n\n/**\n * Type alias for a map of input component types to their corresponding React component types.\n */\nexport type InputComponentMap = {\n  [key: string]: React.ComponentType<CustomInputProps>;\n};\n\n/**\n * Interface for the main DynamicForm component props.\n */\nexport interface DynamicFormProps {\n  /** The form configuration. */\n  config: FormConfig;\n  /** Optional callback function to be called when the form data changes. */\n  onChange?: (formData: FormValues) => void;\n  /** Optional callback function to be called when the form is submitted. */\n  onSubmit?: SubmitHandler<FieldValues>;\n  /** Optional options for react-hook-form's useForm hook. */\n  formOptions?: UseFormProps;\n  /** Optional Yup schema for form validation. */\n  validationSchema?: Schema<any>;\n  /** Optional header element for the form. */\n  header?: React.ReactNode;\n  /** Optional footer element for the form. */\n  footer?: React.ReactNode;\n  /** Whether the form is read-only. */\n  readOnly?: boolean;\n  /** Whether the form is disabled. */\n  disableForm?: boolean;\n  /** Whether to show the submit button. */\n  showSubmitButton?: boolean;\n  /** Optional auto-save configuration. */\n  autoSave?: {\n    interval: number;\n    save: (data: Record<string, any>) => void;\n  };\n  /** Whether to reset the form on submit. */\n  resetOnSubmit?: boolean;\n  /** Whether to focus on the first error field on submit. */\n  focusFirstError?: boolean;\n  /** The layout type for the form. */\n  layout?: LayoutType;\n  /** Optional layout configuration. */\n  layoutConfig?: any;\n  /** Whether to use horizontal labels. */\n  horizontalLabel?: boolean;\n  /** Optional label width (for horizontal labels). */\n  labelWidth?: string | number;\n  /** Whether to enable local storage for the form data. */\n  enableLocalStorage?: boolean;\n  /** Optional debounce time (in ms) for the onChange callback. */\n  debounceOnChange?: number;\n  /** Whether to disable autocomplete for the form. */\n  disableAutocomplete?: boolean;\n  /** Whether to show inline error messages. */\n  showInlineError?: boolean;\n  /** Whether to show an error summary. */\n  showErrorSummary?: boolean;\n  /** Whether to validate on blur. */\n  validateOnBlur?: boolean;\n  /** Whether to validate on change. */\n  validateOnChange?: boolean;\n  /** Whether to validate on submit. */\n  validateOnSubmit?: boolean;\n  /** Optional CSS class name for the form container. */\n  className?: string;\n  /** Optional CSS class names for form elements. */\n  formClassNameConfig?: FormClassNameConfig;\n  /** Optional inline styles for the form container. */\n  style?: React.CSSProperties;\n  /** Optional theme object. */\n  theme?: any;\n  /** Optional callback function to be called when the form is ready. */\n  onFormReady?: (form: UseFormReturn<any>) => void;\n  /** Optional custom submit button renderer. */\n  renderSubmitButton?: RenderSubmitButtonProps;\n  /** Optional custom form content renderer. */\n  renderFormContent?: RenderFormContentProps;\n  /** Optional custom form footer renderer. */\n  renderFormFooter?: RenderFormFooterProps;\n  /** Optional custom validators. */\n  customValidators?: {\n    [key: string]: (value: any, context: any) => string | undefined;\n  };\n  /** Optional custom input components. */\n  customInputs?: InputComponentMap;\n}\n\n/**\n * Type alias for form values.\n */\nexport type FormValues = Record<string, any>;\n\n/**\n * Interface for form configuration.\n */\nexport interface FormConfig {\n  [key: string]: FieldConfig;\n}\n\n/**\n * Interface for field configuration.\n */\nexport interface FieldConfig {\n  /** The input type. */\n  type?: InputType;\n  /** The label text. */\n  label?: string;\n  /** The placeholder text. */\n  placeholder?: string;\n  /** The validation configuration. */\n  validation?: ValidationConfig;\n  /** Optional custom component for the input. */\n  component?: React.ComponentType<any>;\n  /** Optional inline styles for the input. */\n  style?: React.CSSProperties;\n  /** Whether the input is read-only. */\n  readOnly?: boolean;\n  /** Whether the input is clearable. */\n  clearable?: boolean;\n  /** Whether to show a character counter for the input. */\n  showCounter?: boolean;\n  /** Whether to enable copy-to-clipboard functionality for the input. */\n  copyToClipboard?: boolean;\n  /** Optional tooltip text for the input. */\n  tooltip?: string;\n  /** Optional CSS class names for the input and its elements. */\n  classNameConfig?: FieldClassNameConfig;\n  /** Optional options for select, radio, or combobox inputs. */\n  options?: { value: string; label: string }[];\n  /** Optional conditional logic for the input. */\n  conditional?: Condition;\n  /** Nested fields (for complex inputs). */\n  fields?: FormConfig;\n  /** Optional custom validation messages. */\n  validationMessages?: ValidationMessages;\n  /** Optional default value for the input. */\n  defaultValue?: any;\n}\n\n// --- Input Types ---\n\n/**\n * Type alias for supported input types.\n */\nexport type InputType =\n  | 'text'\n  | 'number'\n  | 'checkbox'\n  | 'select'\n  | 'textarea'\n  | 'email'\n  | 'password'\n  | 'tel'\n  | 'url'\n  | 'radio'\n  | 'date'\n  | 'switch'\n  | 'time'\n  | 'datetime-local'\n  | 'combobox'\n  | 'custom';\n\n// --- Validation ---\n\n/**\n * Type alias for a custom validation function.\n *\n * @template TFieldValue - The type of the field value.\n * @template TFormValues - The type of the form values.\n *\n * @param value - The value of the field being validated.\n * @param formValues - The values of all fields in the form.\n * @returns - A string representing the error message if validation fails, or `undefined` if validation passes.\n */\nexport type CustomValidator<\n  TFieldValue = any,\n  TFormValues extends FieldValues = FormValues\n> = (\n  value: TFieldValue,\n  formValues: TFormValues\n) => string | undefined | Promise<string | undefined>;\n\n/**\n * Type alias for a validation value, which can be either a value of type T or an object with a value and a message.\n */\nexport type ValidationValue<T> =\n  | T\n  | {\n      value: T;\n      message: string;\n    };\n\n/**\n * Interface for validation configuration for a field.\n */\nexport interface ValidationConfig {\n  required?: ValidationValue<boolean>;\n  minLength?: ValidationValue<number>;\n  maxLength?: ValidationValue<number>;\n  min?: ValidationValue<number | string>;\n  max?: ValidationValue<number | string>;\n  pattern?: ValidationValue<RegExp>;\n  validate?: (\n    value: any,\n    formValues: FormValues\n  ) => string | undefined | Promise<string | undefined>;\n  requiredMessage?: string;\n}\n\n/**\n * Type alias for a custom error message template function.\n */\nexport type ErrorMessageTemplate =\n  | Message\n  | ((values: {\n      label?: string;\n      value: any;\n      error: FieldError;\n      config: FieldConfig;\n    }) => string);\n\n/**\n * Interface for validation messages for a field.\n */\nexport interface ValidationMessages {\n  [key: string]: ErrorMessageTemplate;\n}\n\n// --- Conditional Rendering ---\n\n/**\n * Type alias for comparison operators used in conditional rendering.\n */\nexport type ComparisonOperator =\n  | 'is'\n  | 'isNot'\n  | 'greaterThan'\n  | 'lessThan'\n  | 'greaterThanOrEqual'\n  | 'lessThanOrEqual'\n  | 'contains'\n  | 'startsWith'\n  | 'endsWith'\n  | 'custom';\n\n/**\n * Type alias for a comparator function used in conditional rendering.\n */\nexport type ComparatorFunction = (value: any) => boolean;\n\n/**\n * Interface for a condition used in conditional rendering.\n */\nexport interface Condition {\n  /** The field to watch for changes. */\n  when: string;\n  /** The comparison operator to use. */\n  operator: ComparisonOperator;\n  /** The value to compare against. */\n  value?: any;\n  /** Optional custom comparator function. */\n  comparator?: ComparatorFunction;\n  /** The fields to show or hide based on the condition. */\n  fields: string[];\n}\n\n// --- Field ---\n\n/**\n * Interface for a form field.\n */\nexport interface FormField {\n  label?: string;\n  id: string;\n  type: InputType;\n  error?: FieldError;\n}\n\n// --- Errors ---\n\n/**\n * Interface for a field error.\n */\nexport interface FieldError {\n  type: string;\n  message?: string;\n}\n\n/**\n * Type alias for react-hook-form field errors.\n */\nexport type FieldErrors = RHFFieldErrors<FieldValues>;\n\n// --- Class Names ---\n\n/**\n * Interface for form-level CSS class name configuration.\n */\nexport interface FormClassNameConfig {\n  formContainer?: string;\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  button?: string;\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string;\n  radioButton?: string;\n  radioLabel?: string;\n  checkboxInput?: string;\n  switchContainer?: string;\n  switchSlider?: string;\n  numberInputContainer?: string;\n  numberInputButton?: string;\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n\n/**\n * Interface for field-level CSS class name configuration.\n */\nexport interface FieldClassNameConfig {\n  inputWrapper?: string;\n  label?: string;\n  input?: string;\n  errorMessage?: string;\n  select?: string;\n  textarea?: string;\n  checkbox?: string;\n  radio?: string;\n  date?: string;\n  number?: string;\n  switch?: string;\n  time?: string;\n  dateTime?: string;\n  comboBox?: string;\n  radioGroup?: string;\n  radioButton?: string;\n  radioLabel?: string;\n  checkboxInput?: string;\n  switchContainer?: string;\n  switchSlider?: string;\n  numberInputContainer?: string;\n  numberInputButton?: string;\n  comboBoxContainer?: string;\n  comboBoxDropdownList?: string;\n  comboBoxDropdownItem?: string;\n}\n\n// --- Render Props ---\n\n/**\n * Type alias for the renderSubmitButton prop in DynamicFormProps.\n */\nexport type RenderSubmitButtonProps = (\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\n  isSubmitting: boolean\n) => React.ReactNode;\n\n/**\n * Type alias for the renderFormContent prop in FormRendererProps.\n */\nexport type RenderFormContentProps = (\n  props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n  }\n) => React.ReactNode;\n\n/**\n * Type alias for the renderInput prop in FormContentProps.\n */\nexport type RenderInputProps = (\n  field: FormField,\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Type alias for the renderLabel prop in InputWrapperProps.\n */\nexport type RenderLabelProps = (\n  fieldConfig: FieldConfig,\n  commonInputProps: CommonInputProps\n) => React.ReactNode;\n\n/**\n * Type alias for the renderErrorMessage prop in InputWrapperProps.\n */\nexport type RenderErrorMessageProps = (\n  error: FieldError | undefined,\n  formClassNameConfig: FormClassNameConfig | undefined\n) => React.ReactNode;\n\n/**\n * Type alias for the renderFormFooter prop in FormRendererProps.\n */\nexport type RenderFormFooterProps = (props: {\n  footer?: React.ReactNode;\n  showSubmitButton: boolean;\n  renderSubmitButton: RenderSubmitButtonProps;\n  isSubmitting: boolean;\n  showErrorSummary: boolean;\n  errors: FieldErrors;\n  formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode;\n\n// --- Re-exported types ---\n\nexport { FormContainerProps, InputWrapperProps, LabelProps };\n\n// --- Deprecated ---\n","// src/features/dynamic-form/hooks/conditionalRendering.ts\nimport { Condition } from '../types';\n\n/**\n * Determines if a field should be rendered based on the conditional logic.\n *\n * @param fieldId - The ID of the field to check.\n * @param conditionalFieldsConfig - The conditional fields configuration.\n * @param watchedValues - The watched values from useWatch.\n * @returns True if the field should be rendered, false otherwise.\n */\nexport const shouldRenderField = (\n  fieldId: string,\n  conditionalFieldsConfig: Condition[],\n  watchedValues: any[]\n): boolean => {\n  const isConditionalField = conditionalFieldsConfig.some((condition) =>\n    condition.fields.includes(fieldId)\n  );\n\n  if (!isConditionalField) {\n    return true;\n  }\n\n  return conditionalFieldsConfig.some((condition) => {\n    const conditionIndex = conditionalFieldsConfig.indexOf(condition);\n    const watchedValue = watchedValues[conditionIndex];\n    let conditionMet = false;\n\n    switch (condition.operator) {\n      case 'is':\n        conditionMet = watchedValue === condition.value;\n        break;\n      case 'isNot':\n        conditionMet = watchedValue !== condition.value;\n        break;\n      case 'greaterThan':\n        conditionMet = watchedValue > condition.value;\n        break;\n      case 'lessThan':\n        conditionMet = watchedValue < condition.value;\n        break;\n      case 'greaterThanOrEqual':\n        conditionMet = watchedValue >= condition.value;\n        break;\n      case 'lessThanOrEqual':\n        conditionMet = watchedValue <= condition.value;\n        break;\n      case 'contains':\n        conditionMet =\n          typeof watchedValue === 'string' &&\n          typeof condition.value === 'string' &&\n          watchedValue.includes(condition.value);\n        break;\n      case 'startsWith':\n        conditionMet =\n          typeof watchedValue === 'string' &&\n          typeof condition.value === 'string' &&\n          watchedValue.startsWith(condition.value);\n        break;\n      case 'endsWith':\n        conditionMet =\n          typeof watchedValue === 'string' &&\n          typeof condition.value === 'string' &&\n          watchedValue.endsWith(condition.value);\n        break;\n      case 'custom':\n        conditionMet = condition.comparator\n          ? condition.comparator(watchedValue)\n          : false;\n        break;\n      default:\n        console.warn(`Unknown operator: ${condition.operator}`);\n        conditionMet = false;\n    }\n\n    return condition.fields.includes(fieldId) && conditionMet;\n  });\n};\n","// src/features/dynamic-form/hooks/fieldUtils.ts\nimport { FormField, FieldError, FormValues, FieldConfig } from '../types';\nimport { getInputTypeFromValue } from '../../inputs/utils';\nimport { getErrorMessage } from './validationUtils';\nimport { get } from 'react-hook-form';\nimport { FormState } from 'react-hook-form';\n\n/**\n * Generates the form fields array based on the flattened config and form state.\n *\n * @param flattenedConfig - The flattened form configuration.\n * @param formState - The `react-hook-form` form state.\n * @returns The form fields array.\n */\nexport const getFields = (\n  flattenedConfig: any,\n  formState: FormState<FormValues>\n): FormField[] => {\n  return Object.entries(flattenedConfig).map(([key, fieldConfig]) => {\n    // Retrieve the default value from fieldConfig\n    const defaultValue = (fieldConfig as FieldConfig).defaultValue;\n\n    const inputType =\n      (fieldConfig as FieldConfig).type || getInputTypeFromValue(defaultValue);\n\n    const fieldError = get(formState.errors, key) as FieldError | undefined;\n    const errorMessage = getErrorMessage(\n      fieldConfig as FieldConfig,\n      fieldError,\n      {}\n    );\n\n    return {\n      label: (fieldConfig as FieldConfig).label,\n      id: key,\n      type: inputType,\n      error: errorMessage\n        ? {\n            ...fieldError,\n            message: errorMessage,\n            type: fieldError?.type || '',\n          } // Merge errorMessage into fieldError and ensure type is always defined\n        : fieldError, // Use the unwrapped fieldError\n    };\n  });\n};\n","// src/features/dynamic-form/utils/formUtils.ts\nimport { FieldClassNameConfig, FormClassNameConfig, FormConfig } from '../types';\n\n/**\n * Flattens a nested object into a single-level object.\n *\n * @param obj - The object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened object.\n * @returns The flattened object.\n */\nexport const flattenObject = (\n  obj: Record<string, any>,\n  parentKey = '',\n  result: Record<string, any> = {}\n): Record<string, any> => {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n        flattenObject(obj[key], newKey, result);\n      } else {\n        result[newKey] = obj[key];\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Flattens a nested config object into a single-level object.\n *\n * @param config - The config object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened config object.\n * @returns The flattened config object.\n */\nexport const flattenConfig = (\n  config: FormConfig,\n  parentKey = '',\n  result: FormConfig = {}\n): FormConfig => {\n  for (const key in config) {\n    if (Object.prototype.hasOwnProperty.call(config, key)) {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      const fieldConfig = config[key];\n      if (fieldConfig.fields) {\n        flattenConfig(fieldConfig.fields, newKey, result);\n      } else {\n        result[newKey] = fieldConfig;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Debounces a function.\n *\n * @param func - The function to debounce.\n * @param wait - The debounce time in milliseconds.\n * @returns The debounced function.\n */\nexport const debounce = (func: Function, wait: number) => {\n  let timeout: NodeJS.Timeout | null;\n  return function (...args: any[]) {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n/**\n * Saves data to localStorage.\n *\n * @param key - The key to store the data under.\n * @param data - The data to store.\n */\nexport const saveToLocalStorage = (key: string, data: any) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\n/**\n * Loads data from localStorage.\n *\n * @param key - The key to load the data from.\n * @returns The loaded data, or null if no data is found.\n */\nexport const loadFromLocalStorage = (key: string): any | null => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : null;\n};\n\n\n/**\n * Merges multiple classNameConfig objects into a single object.\n *\n * @param defaultClassNames - The default classNameConfig object.\n * @param formClassNames - The form-level classNameConfig object.\n * @param fieldClassNames - The field-level classNameConfig object.\n * @returns The merged classNameConfig object.\n */\nexport const mergeClassNames = (\n  defaultClassNames: FormClassNameConfig,\n  formClassNames?: FormClassNameConfig,\n  fieldClassNames?: FieldClassNameConfig\n): FormClassNameConfig => {\n  return {\n    ...defaultClassNames,\n    ...formClassNames,\n    ...fieldClassNames,\n  };\n};","// src/features/dynamic-form/utils/index.ts\nexport * from './formUtils';\nexport * from './validationUtils';\nexport * from './fieldUtils';\nexport * from './conditionalRendering';\n","// src/features/dynamic-form/hooks/validationUtils.ts\nimport { FieldConfig, FieldError } from '../types';\n\n/**\n * Retrieves the error message for a field based on its validation messages and error type.\n *\n * @param fieldConfig - The field configuration.\n * @param fieldError - The field error object.\n * @param values - form values\n * @returns The error message string or undefined if no error message is found.\n */\nexport const getErrorMessage = (\n  fieldConfig: FieldConfig,\n  fieldError: FieldError | undefined,\n  values: any\n): string | undefined => {\n  if (!fieldError) {\n    return undefined;\n  }\n\n  const { type } = fieldError;\n  const validationMessages = fieldConfig.validationMessages;\n\n  if (validationMessages && validationMessages[type]) {\n    const template = validationMessages[type];\n    return typeof template === 'function'\n      ? (template({\n          ...values,\n          error: fieldError,\n          config: fieldConfig,\n        }) as string)\n      : (template as string);\n  }\n\n  return fieldError.message;\n};\n","// Filepath: /src/features/form-renderer/FormRenderer.tsx\n// @ts-nocheck\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs}\n    />\n  );\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n  return (\n    <>\n      <FormLayout\n        onSubmit={handleSubmit(onSubmit)}\n        className={className}\n        formClassNameConfig={formClassNameConfig}\n        style={style}\n        layout={layout}\n        layoutConfig={layoutConfig}\n        horizontalLabel={horizontalLabel}\n        theme={theme}\n      >\n        {header}\n        {content}\n      </FormLayout>\n      {footerContent}\n    </>\n  );\n};\n\nexport default FormRenderer;\n","// Filepath: /src/features/form-renderer/FormRenderer.tsx\n// @ts-nocheck\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormValues } from '../dynamic-form';\nimport { FormLayout, FormContent, FormFooter } from './components';\nimport { FormRendererProps } from './types';\nconst FormRenderer: React.FC<FormRendererProps> = ({\n  onSubmit,\n  className,\n  formClassNameConfig = {},\n  style,\n  layout = 'grid',\n  layoutConfig,\n  horizontalLabel,\n  theme,\n  header,\n  fieldsToRender,\n  fields,\n  config,\n  footer,\n  showSubmitButton = true,\n  renderSubmitButton,\n  showErrorSummary = false,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderFormContent,\n  renderFormFooter,\n  customInputs,\n}) => {\n  const form = useFormContext<FormValues>();\n  const { formState, handleSubmit } = form;\n\n  const content = renderFormContent ? (\n    renderFormContent({\n      fieldsToRender,\n      fields,\n      config,\n      formClassNameConfig,\n      horizontalLabel,\n      labelWidth,\n      disableAutocomplete,\n      showInlineError,\n      conditionalFieldsConfig: [],\n      renderInput: (field, fieldConfig, commonInputProps) => <></>,\n    })\n  ) : (\n    <FormContent\n      fieldsToRender={fieldsToRender}\n      fields={fields}\n      config={config}\n      formClassNameConfig={formClassNameConfig}\n      horizontalLabel={horizontalLabel}\n      labelWidth={labelWidth}\n      disableAutocomplete={disableAutocomplete}\n      showInlineError={showInlineError}\n      conditionalFieldsConfig={[]}\n      customInputs={customInputs}\n    />\n  );\n  const footerContent = renderFormFooter ? (\n    renderFormFooter({\n      footer,\n      showSubmitButton,\n      renderSubmitButton: renderSubmitButton!,\n      isSubmitting: formState.isSubmitting,\n      showErrorSummary,\n      errors: formState.errors,\n      formClassNameConfig,\n    })\n  ) : (\n    <FormFooter\n      footer={footer}\n      formClassNameConfig={formClassNameConfig}\n      showSubmitButton={showSubmitButton}\n      renderSubmitButton={renderSubmitButton}\n      isSubmitting={formState.isSubmitting}\n      showErrorSummary={showErrorSummary}\n      errors={formState.errors}\n    />\n  );\n  return (\n    <>\n      <FormLayout\n        onSubmit={handleSubmit(onSubmit)}\n        className={className}\n        formClassNameConfig={formClassNameConfig}\n        style={style}\n        layout={layout}\n        layoutConfig={layoutConfig}\n        horizontalLabel={horizontalLabel}\n        theme={theme}\n      >\n        {header}\n        {content}\n      </FormLayout>\n      {footerContent}\n    </>\n  );\n};\n\nexport default FormRenderer;\n;FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"}}};FormRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormRenderer\",\"props\":{\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"onChange\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(formData: FormValues) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"formData\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"onSubmit\":{\"required\":false,\"tsType\":{\"name\":\"SubmitHandler\",\"elements\":[{\"name\":\"FieldValues\"}],\"raw\":\"SubmitHandler<FieldValues>\"},\"description\":\"\"},\"formOptions\":{\"required\":false,\"tsType\":{\"name\":\"UseFormProps\"},\"description\":\"\"},\"validationSchema\":{\"required\":false,\"tsType\":{\"name\":\"Schema\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"Schema<any>\"},\"description\":\"\"},\"header\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"readOnly\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"disableForm\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"true\",\"computed\":false}},\"autoSave\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  interval: number;\\n  save: (data: Record<string, any>) => void;\\n}\",\"signature\":{\"properties\":[{\"key\":\"interval\",\"value\":{\"name\":\"number\",\"required\":true}},{\"key\":\"save\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(data: Record<string, any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"},\"name\":\"data\"}],\"return\":{\"name\":\"void\"}},\"required\":true}}]}},\"description\":\"\"},\"resetOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"focusFirstError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"layout\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\",\"defaultValue\":{\"value\":\"'grid'\",\"computed\":false}},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"enableLocalStorage\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"debounceOnChange\":{\"required\":false,\"tsType\":{\"name\":\"number\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"validateOnBlur\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnChange\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"validateOnSubmit\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"onFormReady\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(form: UseFormReturn<any>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"UseFormReturn\",\"elements\":[{\"name\":\"any\"}],\"raw\":\"UseFormReturn<any>\"},\"name\":\"form\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormContent\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  props: Omit<FormContentProps, 'renderInput'> & {\\n    renderInput: RenderInputProps;\\n  }\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"intersection\",\"raw\":\"Omit<FormContentProps, 'renderInput'> & {\\n  renderInput: RenderInputProps;\\n}\",\"elements\":[{\"name\":\"Omit\",\"elements\":[{\"name\":\"FormContentProps\"},{\"name\":\"literal\",\"value\":\"'renderInput'\"}],\"raw\":\"Omit<FormContentProps, 'renderInput'>\"},{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  renderInput: RenderInputProps;\\n}\",\"signature\":{\"properties\":[{\"key\":\"renderInput\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}}]}}]},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderFormFooter\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(props: {\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  footer?: React.ReactNode;\\n  showSubmitButton: boolean;\\n  renderSubmitButton: RenderSubmitButtonProps;\\n  isSubmitting: boolean;\\n  showErrorSummary: boolean;\\n  errors: FieldErrors;\\n  formClassNameConfig?: FormClassNameConfig;\\n}\",\"signature\":{\"properties\":[{\"key\":\"footer\",\"value\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\",\"required\":false}},{\"key\":\"showSubmitButton\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"renderSubmitButton\",\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(e?: React.BaseSyntheticEvent) => Promise<void>\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactBaseSyntheticEvent\",\"raw\":\"React.BaseSyntheticEvent\"},\"name\":\"e\"}],\"return\":{\"name\":\"Promise\",\"elements\":[{\"name\":\"void\"}],\"raw\":\"Promise<void>\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}},\"required\":true}},{\"key\":\"isSubmitting\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"showErrorSummary\",\"value\":{\"name\":\"boolean\",\"required\":true}},{\"key\":\"errors\",\"value\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\",\"required\":true}},{\"key\":\"formClassNameConfig\",\"value\":{\"name\":\"FormClassNameConfig\",\"required\":false}}]}},\"name\":\"props\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customValidators\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: (value: any, context: any) => string | undefined;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(value: any, context: any) => string | undefined\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"any\"},\"name\":\"value\"},{\"type\":{\"name\":\"any\"},\"name\":\"context\"}],\"return\":{\"name\":\"union\",\"raw\":\"string | undefined\",\"elements\":[{\"name\":\"string\"},{\"name\":\"undefined\"}]}},\"required\":true}}]}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"}}}","// Filepath: /src/features/form-renderer/components/FormContent.tsx\nimport React, { useEffect } from 'react';\nimport { FormValues, FieldError } from '../../dynamic-form/types'; // Import FieldError\nimport { useFormContext } from 'react-hook-form';\nimport { InputWrapper } from '../../../styles';\nimport { FormContentProps } from '../types';\nimport { CommonInputProps } from '../../inputs';\nimport InputRenderer from '../../inputs/components/InputRenderer';\n\nconst FormContent: React.FC<FormContentProps> = ({\n  fieldsToRender,\n  fields,\n  config,\n  formClassNameConfig,\n  horizontalLabel,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderInput,\n  // @ts-expect-error\n  conditionalFieldsConfig,\n  // @ts-expect-error\n  customInputs,\n}) => {\n  const {\n    register,\n    unregister,\n    formState: { errors },\n  } = useFormContext<FormValues>();\n\n  useEffect(() => {\n    fields.forEach((field) => {\n      const fieldConfig = config[field.id] || {};\n      if (fieldsToRender.includes(field.id)) {\n        register(field.id, fieldConfig.validation);\n      } else {\n        unregister(field.id);\n      }\n    });\n  }, [register, unregister, config]);\n\n  return (\n    <>\n      {fields\n        .filter((field) => fieldsToRender.includes(field.id))\n        .map((field) => {\n          // Access the nested error object correctly\n          const fieldError = errors[field.id] as FieldError | undefined;\n\n          const fieldConfig = config[field.id] || {};\n          const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n          const formClassName = formClassNameConfig || {};\n\n          const commonInputProps: CommonInputProps = {\n            id: field.id,\n            fieldConfig,\n            formClassNameConfig,\n            showInlineError,\n            horizontalLabel,\n            labelWidth,\n            error: fieldError,\n            disableAutocomplete,\n          };\n\n          const inputElement = renderInput ? (\n            renderInput(field, fieldConfig, commonInputProps)\n          ) : (\n            <InputRenderer\n              field={field}\n              config={config}\n              // @ts-expect-error\n              formClassNameConfig={formClassNameConfig}\n              disableAutocomplete={disableAutocomplete}\n              showInlineError={showInlineError}\n              horizontalLabel={horizontalLabel}\n              labelWidth={labelWidth}\n              customInputs={customInputs} // Pass customInputs here\n            />\n          );\n\n          return (\n            <InputWrapper\n              key={field.id}\n              $horizontalLabel={horizontalLabel}\n              $labelWidth={labelWidth}\n              className={\n                fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n              }\n            >\n              {inputElement}\n            </InputWrapper>\n          );\n        })}\n    </>\n  );\n};\n\nexport default FormContent;\n","// Filepath: /src/features/form-renderer/components/FormContent.tsx\nimport React, { useEffect } from 'react';\nimport { FormValues, FieldError } from '../../dynamic-form/types'; // Import FieldError\nimport { useFormContext } from 'react-hook-form';\nimport { InputWrapper } from '../../../styles';\nimport { FormContentProps } from '../types';\nimport { CommonInputProps } from '../../inputs';\nimport InputRenderer from '../../inputs/components/InputRenderer';\n\nconst FormContent: React.FC<FormContentProps> = ({\n  fieldsToRender,\n  fields,\n  config,\n  formClassNameConfig,\n  horizontalLabel,\n  labelWidth,\n  disableAutocomplete,\n  showInlineError,\n  renderInput,\n  // @ts-expect-error\n  conditionalFieldsConfig,\n  // @ts-expect-error\n  customInputs,\n}) => {\n  const {\n    register,\n    unregister,\n    formState: { errors },\n  } = useFormContext<FormValues>();\n\n  useEffect(() => {\n    fields.forEach((field) => {\n      const fieldConfig = config[field.id] || {};\n      if (fieldsToRender.includes(field.id)) {\n        register(field.id, fieldConfig.validation);\n      } else {\n        unregister(field.id);\n      }\n    });\n  }, [register, unregister, config]);\n\n  return (\n    <>\n      {fields\n        .filter((field) => fieldsToRender.includes(field.id))\n        .map((field) => {\n          // Access the nested error object correctly\n          const fieldError = errors[field.id] as FieldError | undefined;\n\n          const fieldConfig = config[field.id] || {};\n          const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n          const formClassName = formClassNameConfig || {};\n\n          const commonInputProps: CommonInputProps = {\n            id: field.id,\n            fieldConfig,\n            formClassNameConfig,\n            showInlineError,\n            horizontalLabel,\n            labelWidth,\n            error: fieldError,\n            disableAutocomplete,\n          };\n\n          const inputElement = renderInput ? (\n            renderInput(field, fieldConfig, commonInputProps)\n          ) : (\n            <InputRenderer\n              field={field}\n              config={config}\n              // @ts-expect-error\n              formClassNameConfig={formClassNameConfig}\n              disableAutocomplete={disableAutocomplete}\n              showInlineError={showInlineError}\n              horizontalLabel={horizontalLabel}\n              labelWidth={labelWidth}\n              customInputs={customInputs} // Pass customInputs here\n            />\n          );\n\n          return (\n            <InputWrapper\n              key={field.id}\n              $horizontalLabel={horizontalLabel}\n              $labelWidth={labelWidth}\n              className={\n                fieldClassNameConfig.inputWrapper || formClassName.inputWrapper\n              }\n            >\n              {inputElement}\n            </InputWrapper>\n          );\n        })}\n    </>\n  );\n};\n\nexport default FormContent;\n;FormContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormContent\",\"props\":{\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"},\"renderInput\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"register\":{\"required\":true,\"tsType\":{\"name\":\"UseFormRegister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormRegister<FormValues>\"},\"description\":\"\"},\"unregister\":{\"required\":true,\"tsType\":{\"name\":\"UseFormUnregister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormUnregister<FormValues>\"},\"description\":\"\"}}};FormContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormContent\",\"props\":{\"fields\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"FormField\"}],\"raw\":\"FormField[]\"},\"description\":\"\"},\"fieldsToRender\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"string\"}],\"raw\":\"string[]\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"conditionalFieldsConfig\":{\"required\":true,\"tsType\":{\"name\":\"Array\",\"elements\":[{\"name\":\"Condition\"}],\"raw\":\"Condition[]\"},\"description\":\"\"},\"renderInput\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  field: FormField,\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FormField\"},\"name\":\"field\"},{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"register\":{\"required\":true,\"tsType\":{\"name\":\"UseFormRegister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormRegister<FormValues>\"},\"description\":\"\"},\"unregister\":{\"required\":true,\"tsType\":{\"name\":\"UseFormUnregister\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"any\"}],\"raw\":\"Record<string, any>\"}],\"raw\":\"UseFormUnregister<FormValues>\"},\"description\":\"\"}}}","// Filepath: /src/features/form-renderer/components/FormFooter.tsx\nimport React from 'react';\nimport { ErrorSummary } from '../../../components';\nimport { FormFooterProps } from '../types';\n\nconst FormFooter: React.FC<FormFooterProps> = ({\n  footer,\n  renderSubmitButton,\n  isSubmitting,\n  showErrorSummary,\n  errors,\n  formClassNameConfig,\n}) => {\n  return (\n    <>\n      {/* {showSubmitButton &&\n        (renderSubmitButton ? (\n          renderSubmitButton(() => {}, isSubmitting)\n        ) : (\n          <SubmitButton\n            type=\"submit\"\n            disabled={isSubmitting}\n            className={formClassNameConfig?.button}\n          >\n            Submit\n          </SubmitButton>\n        ))} */}\n      {footer}\n      {showErrorSummary && Object.keys(errors).length > 0 && (\n        <ErrorSummary\n          errors={errors}\n          formClassNameConfig={formClassNameConfig}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FormFooter;\n","// Filepath: /src/features/form-renderer/components/FormFooter.tsx\nimport React from 'react';\nimport { ErrorSummary } from '../../../components';\nimport { FormFooterProps } from '../types';\n\nconst FormFooter: React.FC<FormFooterProps> = ({\n  footer,\n  renderSubmitButton,\n  isSubmitting,\n  showErrorSummary,\n  errors,\n  formClassNameConfig,\n}) => {\n  return (\n    <>\n      {/* {showSubmitButton &&\n        (renderSubmitButton ? (\n          renderSubmitButton(() => {}, isSubmitting)\n        ) : (\n          <SubmitButton\n            type=\"submit\"\n            disabled={isSubmitting}\n            className={formClassNameConfig?.button}\n          >\n            Submit\n          </SubmitButton>\n        ))} */}\n      {footer}\n      {showErrorSummary && Object.keys(errors).length > 0 && (\n        <ErrorSummary\n          errors={errors}\n          formClassNameConfig={formClassNameConfig}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FormFooter;\n;FormFooter.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormFooter\",\"props\":{\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: () => void,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"() => void\",\"signature\":{\"arguments\":[],\"return\":{\"name\":\"void\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"isSubmitting\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"errors\":{\"required\":true,\"tsType\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"}}};FormFooter.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormFooter\",\"props\":{\"footer\":{\"required\":false,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"showSubmitButton\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"renderSubmitButton\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  handleSubmit: () => void,\\n  isSubmitting: boolean\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"() => void\",\"signature\":{\"arguments\":[],\"return\":{\"name\":\"void\"}}},\"name\":\"handleSubmit\"},{\"type\":{\"name\":\"boolean\"},\"name\":\"isSubmitting\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"isSubmitting\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showErrorSummary\":{\"required\":true,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"errors\":{\"required\":true,\"tsType\":{\"name\":\"Partial\",\"elements\":[{\"name\":\"Record\",\"elements\":[{\"name\":\"string\"},{\"name\":\"FieldError\"}],\"raw\":\"Record<string, FieldError>\"}],\"raw\":\"Partial<Record<string, FieldError>>\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"}}}","// Filepath: /src/features/form-renderer/components/FormLayout.tsx\nimport React, { useMemo } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { defaultTheme } from '../../../theme';\nimport { FormClassNameConfig, LayoutType } from '../../dynamic-form/types';\nimport {\n  FormContainer,\n  GridFormContainer,\n  FormContainerProps,\n  GridFormContainerProps,\n} from '../../../styles';\n\ntype LayoutComponentProps = FormContainerProps &\n  Partial<Omit<GridFormContainerProps, keyof FormContainerProps>> & {\n    children?: React.ReactNode;\n  };\n\ninterface FormLayoutProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  theme?: any;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layout: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layout,\n  layoutConfig,\n  horizontalLabel,\n  theme,\n}) => {\n  const mergedTheme = useMemo(() => {\n    return theme ? { ...defaultTheme, ...theme } : defaultTheme;\n  }, [theme]);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onSubmit(event);\n  };\n\n  const LayoutComponent: React.ComponentType<LayoutComponentProps> =\n    layout === 'grid' ? GridFormContainer : FormContainer;\n  const layoutComponentProps: LayoutComponentProps = {\n    onSubmit: handleSubmit,\n    className: `${className || ''} ${formClassNameConfig?.formContainer || ''}`,\n    style,\n    $layout: layout,\n    $layoutConfig: layoutConfig,\n    $horizontalLabel: horizontalLabel,\n    $minWidth: layoutConfig?.minWidth,\n    $gap: layoutConfig?.gap,\n    $breakpoints: layoutConfig?.breakpoints,\n    children: children,\n  };\n  return (\n    <ThemeProvider theme={mergedTheme}>\n      <LayoutComponent {...layoutComponentProps} />\n    </ThemeProvider>\n  );\n};\n\nexport default FormLayout;\n","// Filepath: /src/features/form-renderer/components/FormLayout.tsx\nimport React, { useMemo } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { defaultTheme } from '../../../theme';\nimport { FormClassNameConfig, LayoutType } from '../../dynamic-form/types';\nimport {\n  FormContainer,\n  GridFormContainer,\n  FormContainerProps,\n  GridFormContainerProps,\n} from '../../../styles';\n\ntype LayoutComponentProps = FormContainerProps &\n  Partial<Omit<GridFormContainerProps, keyof FormContainerProps>> & {\n    children?: React.ReactNode;\n  };\n\ninterface FormLayoutProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  theme?: any;\n  className?: string;\n  formClassNameConfig?: FormClassNameConfig;\n  style?: React.CSSProperties;\n  layout: LayoutType;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layout,\n  layoutConfig,\n  horizontalLabel,\n  theme,\n}) => {\n  const mergedTheme = useMemo(() => {\n    return theme ? { ...defaultTheme, ...theme } : defaultTheme;\n  }, [theme]);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onSubmit(event);\n  };\n\n  const LayoutComponent: React.ComponentType<LayoutComponentProps> =\n    layout === 'grid' ? GridFormContainer : FormContainer;\n  const layoutComponentProps: LayoutComponentProps = {\n    onSubmit: handleSubmit,\n    className: `${className || ''} ${formClassNameConfig?.formContainer || ''}`,\n    style,\n    $layout: layout,\n    $layoutConfig: layoutConfig,\n    $horizontalLabel: horizontalLabel,\n    $minWidth: layoutConfig?.minWidth,\n    $gap: layoutConfig?.gap,\n    $breakpoints: layoutConfig?.breakpoints,\n    children: children,\n  };\n  return (\n    <ThemeProvider theme={mergedTheme}>\n      <LayoutComponent {...layoutComponentProps} />\n    </ThemeProvider>\n  );\n};\n\nexport default FormLayout;\n;FormLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormLayout\",\"props\":{\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};FormLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FormLayout\",\"props\":{\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/form-renderer/components/index.ts\nexport { default as FormLayout } from './FormLayout';\nexport { default as FormContent } from './FormContent';\nexport { default as FormFooter } from './FormFooter';\n","// src/features/form-renderer/index.ts\nexport { default as FormRenderer } from './FormRenderer';\nexport * from './components';\nexport * from './types';\n","// Filepath: /src/features/inputs/components/CheckboxInput.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\n\nconst CheckboxInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 4px; /* Bo tròn */\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '✔';\n    display: block;\n    text-align: center;\n    font-size: 14px; /* Giảm kích thước icon */\n    line-height: 18px; /* Căn giữa icon */\n    color: ${({ theme }) => theme.colors.white};\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst CheckboxInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation as any,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          <CheckboxInputStyled\n            {...field}\n            className={formClassNameConfig.checkboxInput}\n            type=\"checkbox\"\n            id={id}\n            checked={!!field.value}\n          />\n          {label}\n        </Label>\n      )}\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default CheckboxInput;\n","// Filepath: /src/features/inputs/components/CheckboxInput.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\n\nconst CheckboxInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 4px; /* Bo tròn */\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '✔';\n    display: block;\n    text-align: center;\n    font-size: 14px; /* Giảm kích thước icon */\n    line-height: 18px; /* Căn giữa icon */\n    color: ${({ theme }) => theme.colors.white};\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst CheckboxInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation as any,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          <CheckboxInputStyled\n            {...field}\n            className={formClassNameConfig.checkboxInput}\n            type=\"checkbox\"\n            id={id}\n            checked={!!field.value}\n          />\n          {label}\n        </Label>\n      )}\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default CheckboxInput;\n;CheckboxInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"CheckboxInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};CheckboxInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"CheckboxInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/ComboBox.tsx\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  FieldConfig,\n  FormClassNameConfig,\n  FieldError,\n} from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst ComboBoxContainer = styled.div<{ className?: string }>`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul<{ className?: string }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 8px; /* Bo tròn */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n`;\n\nconst DropdownItem = styled.li<{ className?: string }>`\n  padding: 8px 12px; /* Giảm padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.info};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n  const filteredOptions = options\n    ? options.filter((option) =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer\n        ref={containerRef}\n        className={formClassNameConfig.comboBoxContainer}\n      >\n        <Input\n          {...field}\n          className={formClassNameConfig.comboBox}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList className={formClassNameConfig.comboBoxDropdownList}>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={`${\n                    index === highlightedIndex ? 'selected' : ''\n                  } ${formClassNameConfig.comboBoxDropdownItem}`}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem\n                className={formClassNameConfig.comboBoxDropdownItem}\n              >\n                No results found\n              </DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n","// Filepath: /src/features/inputs/components/ComboBox.tsx\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  FieldConfig,\n  FormClassNameConfig,\n  FieldError,\n} from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\nconst ComboBoxContainer = styled.div<{ className?: string }>`\n  position: relative;\n  width: 100%;\n`;\n\nconst DropdownList = styled.ul<{ className?: string }>`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 8px; /* Bo tròn */\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow:\n    0px 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n`;\n\nconst DropdownItem = styled.li<{ className?: string }>`\n  padding: 8px 12px; /* Giảm padding */\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.info};\n    color: white;\n  }\n`;\n\ninterface ComboBoxProps {\n  id: string;\n  fieldConfig: FieldConfig;\n  formClassNameConfig: FormClassNameConfig;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  error?: FieldError;\n}\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label, options } = fieldConfig;\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { control } = useFormContext();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n  });\n  useEffect(() => {\n    setInputValue(field.value || '');\n  }, [field.value]);\n  const filteredOptions = options\n    ? options.filter((option) =>\n        option.label.toLowerCase().includes(inputValue.toLowerCase())\n      )\n    : [];\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setInputValue(val);\n    field.onChange(event); // Update form state\n    if (!isOpen && val) {\n      setIsOpen(true);\n    } else if (isOpen && !val) {\n      setIsOpen(false);\n    }\n  };\n  const handleOptionClick = (value: string) => {\n    setInputValue(value);\n    field.onChange(value); // Update form state\n    setIsOpen(false);\n  };\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const closeDropdown = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        containerRef.current &&\n        !containerRef.current.contains(event.target as Node)\n      ) {\n        closeDropdown();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [closeDropdown]);\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        filteredOptions.length > 0\n          ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n          : -1\n      );\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setHighlightedIndex((prevIndex) =>\n        prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1\n      );\n    } else if (event.key === 'Enter') {\n      event.preventDefault();\n      if (highlightedIndex >= 0) {\n        const selectedValue = filteredOptions[highlightedIndex].value;\n        setInputValue(selectedValue);\n        field.onChange(selectedValue); // Update form state\n        setIsOpen(false);\n      }\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n      const item = containerRef.current.querySelector(\n        `li:nth-child(${highlightedIndex + 1})`\n      ) as HTMLLIElement;\n      if (item) {\n        item.scrollIntoView({ block: 'nearest', inline: 'start' });\n      }\n    }\n  }, [isOpen, highlightedIndex]);\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: 'red' }}>*</span>\n          )}\n        </Label>\n      )}\n      <ComboBoxContainer\n        ref={containerRef}\n        className={formClassNameConfig.comboBoxContainer}\n      >\n        <Input\n          {...field}\n          className={formClassNameConfig.comboBox}\n          id={id}\n          value={inputValue}\n          onChange={handleInputChange}\n          onClick={toggleDropdown}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n        />\n        {isOpen && (\n          <DropdownList className={formClassNameConfig.comboBoxDropdownList}>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <DropdownItem\n                  key={option.value}\n                  onClick={() => handleOptionClick(option.value)}\n                  className={`${\n                    index === highlightedIndex ? 'selected' : ''\n                  } ${formClassNameConfig.comboBoxDropdownItem}`}\n                >\n                  {option.label}\n                </DropdownItem>\n              ))\n            ) : (\n              <DropdownItem\n                className={formClassNameConfig.comboBoxDropdownItem}\n              >\n                No results found\n              </DropdownItem>\n            )}\n          </DropdownList>\n        )}\n      </ComboBoxContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default ComboBox;\n;ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}};ComboBox.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ComboBox\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"}}}","// Filepath: /src/features/inputs/components/DateInput.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst DateInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.date}\n        type=\"date\"\n        id={id}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default DateInput;\n","// Filepath: /src/features/inputs/components/DateInput.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst DateInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.date}\n        type=\"date\"\n        id={id}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default DateInput;\n;DateInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DateInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};DateInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DateInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/DateTimePicker.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst DateTimePicker: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.dateTime}\n        type=\"datetime-local\"\n        id={id}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default DateTimePicker;\n","// Filepath: /src/features/inputs/components/DateTimePicker.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst DateTimePicker: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.dateTime}\n        type=\"datetime-local\"\n        id={id}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default DateTimePicker;\n;DateTimePicker.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DateTimePicker\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};DateTimePicker.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"DateTimePicker\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/inputs/components/InputRenderer.tsx\nimport React from 'react';\nimport {\n  FormField,\n  FormConfig,\n  FormClassNameConfig,\n  RenderLabelProps,\n  RenderErrorMessageProps,\n  InputComponentMap,\n  FieldClassNameConfig,\n} from '../../dynamic-form/types';\nimport { getInputComponent } from '../registry/InputRegistry';\nimport { CommonInputProps, CustomInputProps } from '../types';\nimport { ErrorMessage } from '../../../styles';\nimport { mergeClassNames } from '../../dynamic-form/utils/formUtils'; // Import hàm mergeClassNames\n\ninterface InputRendererProps {\n  field: FormField;\n  config: FormConfig;\n  formClassNameConfig: FormClassNameConfig;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  renderLabel?: RenderLabelProps;\n  renderErrorMessage?: RenderErrorMessageProps;\n  customInputs?: InputComponentMap;\n}\n\nconst InputRenderer: React.FC<InputRendererProps> = ({\n  field,\n  config,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  renderErrorMessage,\n  customInputs,\n}) => {\n  const { id, type, error } = field;\n  const fieldConfig = config[id] || {};\n\n  // Prioritize custom input components\n  const CustomInputComponent = customInputs?.[type];\n  const RegisteredInputComponent = getInputComponent(type);\n  const InputComponent = CustomInputComponent || RegisteredInputComponent;\n\n  // Merge class names\n  const mergedFormClassNameConfig = mergeClassNames(\n    {}, // Default empty object\n    formClassNameConfig,\n    fieldConfig.classNameConfig\n  );\n\n  const commonInputProps: CommonInputProps = {\n    id,\n    fieldConfig,\n    formClassNameConfig: mergedFormClassNameConfig, // Truyền mergedFormClassNameConfig thay vì formClassNameConfig\n    showInlineError,\n    horizontalLabel,\n    labelWidth,\n    error,\n    disableAutocomplete,\n  };\n\n  // Render error message using renderErrorMessage prop or default\n  const errorMessageElement =\n    showInlineError && error && renderErrorMessage\n      ? renderErrorMessage(error, mergedFormClassNameConfig) // Sử dụng mergedFormClassNameConfig\n      : showInlineError && error\n      ? React.createElement(ErrorMessage, {\n          className: mergedFormClassNameConfig.errorMessage, // Sử dụng mergedFormClassNameConfig\n          children: error.message,\n        })\n      : null;\n\n  if (!InputComponent) {\n    console.warn(`No input component found for type: ${type}`);\n    return null;\n  }\n\n  return (\n    <>\n      {/* Cast to CustomInputProps for custom components */}\n      <InputComponent {...(commonInputProps as CustomInputProps)} />\n      {errorMessageElement}\n    </>\n  );\n};\n\nexport default InputRenderer;\n","// src/features/inputs/components/InputRenderer.tsx\nimport React from 'react';\nimport {\n  FormField,\n  FormConfig,\n  FormClassNameConfig,\n  RenderLabelProps,\n  RenderErrorMessageProps,\n  InputComponentMap,\n  FieldClassNameConfig,\n} from '../../dynamic-form/types';\nimport { getInputComponent } from '../registry/InputRegistry';\nimport { CommonInputProps, CustomInputProps } from '../types';\nimport { ErrorMessage } from '../../../styles';\nimport { mergeClassNames } from '../../dynamic-form/utils/formUtils'; // Import hàm mergeClassNames\n\ninterface InputRendererProps {\n  field: FormField;\n  config: FormConfig;\n  formClassNameConfig: FormClassNameConfig;\n  disableAutocomplete?: boolean;\n  showInlineError?: boolean;\n  horizontalLabel?: boolean;\n  labelWidth?: string | number;\n  renderLabel?: RenderLabelProps;\n  renderErrorMessage?: RenderErrorMessageProps;\n  customInputs?: InputComponentMap;\n}\n\nconst InputRenderer: React.FC<InputRendererProps> = ({\n  field,\n  config,\n  formClassNameConfig,\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  renderErrorMessage,\n  customInputs,\n}) => {\n  const { id, type, error } = field;\n  const fieldConfig = config[id] || {};\n\n  // Prioritize custom input components\n  const CustomInputComponent = customInputs?.[type];\n  const RegisteredInputComponent = getInputComponent(type);\n  const InputComponent = CustomInputComponent || RegisteredInputComponent;\n\n  // Merge class names\n  const mergedFormClassNameConfig = mergeClassNames(\n    {}, // Default empty object\n    formClassNameConfig,\n    fieldConfig.classNameConfig\n  );\n\n  const commonInputProps: CommonInputProps = {\n    id,\n    fieldConfig,\n    formClassNameConfig: mergedFormClassNameConfig, // Truyền mergedFormClassNameConfig thay vì formClassNameConfig\n    showInlineError,\n    horizontalLabel,\n    labelWidth,\n    error,\n    disableAutocomplete,\n  };\n\n  // Render error message using renderErrorMessage prop or default\n  const errorMessageElement =\n    showInlineError && error && renderErrorMessage\n      ? renderErrorMessage(error, mergedFormClassNameConfig) // Sử dụng mergedFormClassNameConfig\n      : showInlineError && error\n      ? React.createElement(ErrorMessage, {\n          className: mergedFormClassNameConfig.errorMessage, // Sử dụng mergedFormClassNameConfig\n          children: error.message,\n        })\n      : null;\n\n  if (!InputComponent) {\n    console.warn(`No input component found for type: ${type}`);\n    return null;\n  }\n\n  return (\n    <>\n      {/* Cast to CustomInputProps for custom components */}\n      <InputComponent {...(commonInputProps as CustomInputProps)} />\n      {errorMessageElement}\n    </>\n  );\n};\n\nexport default InputRenderer;\n;InputRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"InputRenderer\",\"props\":{\"field\":{\"required\":true,\"tsType\":{\"name\":\"FormField\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":true,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"renderLabel\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderErrorMessage\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  error: FieldError | undefined,\\n  formClassNameConfig: FormClassNameConfig | undefined\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"union\",\"raw\":\"FieldError | undefined\",\"elements\":[{\"name\":\"FieldError\"},{\"name\":\"undefined\"}]},\"name\":\"error\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}};InputRenderer.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"InputRenderer\",\"props\":{\"field\":{\"required\":true,\"tsType\":{\"name\":\"FormField\"},\"description\":\"\"},\"config\":{\"required\":true,\"tsType\":{\"name\":\"FormConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":true,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"renderLabel\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  fieldConfig: FieldConfig,\\n  commonInputProps: CommonInputProps\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"FieldConfig\"},\"name\":\"fieldConfig\"},{\"type\":{\"name\":\"CommonInputProps\"},\"name\":\"commonInputProps\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"renderErrorMessage\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(\\n  error: FieldError | undefined,\\n  formClassNameConfig: FormClassNameConfig | undefined\\n) => React.ReactNode\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"union\",\"raw\":\"FieldError | undefined\",\"elements\":[{\"name\":\"FieldError\"},{\"name\":\"undefined\"}]},\"name\":\"error\"},{\"type\":{\"name\":\"union\",\"raw\":\"FormClassNameConfig | undefined\",\"elements\":[{\"name\":\"FormClassNameConfig\"},{\"name\":\"undefined\"}]},\"name\":\"formClassNameConfig\"}],\"return\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"}}},\"description\":\"\"},\"customInputs\":{\"required\":false,\"tsType\":{\"name\":\"signature\",\"type\":\"object\",\"raw\":\"{\\n  [key: string]: React.ComponentType<CustomInputProps>;\\n}\",\"signature\":{\"properties\":[{\"key\":{\"name\":\"string\"},\"value\":{\"name\":\"ReactComponentType\",\"raw\":\"React.ComponentType<CustomInputProps>\",\"elements\":[{\"name\":\"CustomInputProps\"}],\"required\":true}}]}},\"description\":\"\"}}}","// Filepath: /src/features/inputs/components/NumberInput.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Input, Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\n\nconst NumberInputContainer = styled.div<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  input {\n    text-align: center;\n    padding-right: 0;\n    width: 65px; /* Giảm chiều rộng */\n  }\n`;\n\nconst SpinButton = styled.button<{ className?: string }>`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 0;\n  height: 32px; /* Giảm kích thước */\n  width: 32px; /* Giảm kích thước */\n  font-size: 18px; /* Giảm kích thước */\n  line-height: 0;\n  color: ${({ theme }) => theme.colors.text};\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &:disabled {\n    cursor: default;\n    background-color: #efefef;\n  }\n  &:first-of-type {\n    border-radius: 8px 0 0 8px; /* Bo tròn */\n    border-right: none;\n  }\n  &:last-of-type {\n    border-radius: 0 8px 8px 0; /* Bo tròn */\n    border-left: none;\n  }\n`;\n\ninterface NumberInputProps extends CommonInputProps {}\n\nconst NumberInput: React.FC<NumberInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  const [internalValue, setInternalValue] = useState<number>(+field.value || 0);\n  const clampValue = useCallback(\n    (value: number) => {\n      const { min, max } = fieldConfig.validation || {};\n      let clampedValue = value;\n      if (min !== undefined && typeof min === 'object' && value < +min.value) {\n        clampedValue = +min.value;\n      }\n      if (max !== undefined && typeof max === 'object' && value > +max.value) {\n        clampedValue = +max.value;\n      }\n      return clampedValue;\n    },\n    [fieldConfig.validation]\n  );\n  useEffect(() => {\n    setInternalValue(+field.value || 0);\n  }, [field.value]);\n  const handleIncrement = () => {\n    const newValue = clampValue(internalValue + 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  const handleDecrement = () => {\n    const newValue = clampValue(internalValue - 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <NumberInputContainer\n        className={formClassNameConfig.numberInputContainer}\n      >\n        <SpinButton\n          type=\"button\"\n          onClick={handleDecrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.min !== undefined &&\n            typeof fieldConfig.validation.min === 'object' &&\n            internalValue <= +fieldConfig.validation.min.value\n          }\n        >\n          -\n        </SpinButton>\n        <Input\n          {...field}\n          className={formClassNameConfig.number}\n          type=\"number\"\n          id={id}\n          onChange={e => {\n            field.onChange(e);\n            setInternalValue(+e.target.value);\n          }}\n          onBlur={e => {\n            field.onBlur();\n            const clampedValue = clampValue(+e.target.value);\n            setInternalValue(clampedValue);\n            field.onChange(clampedValue);\n          }}\n          value={internalValue}\n          autoComplete={disableAutocomplete ? 'off' : undefined}\n        />\n        <SpinButton\n          type=\"button\"\n          onClick={handleIncrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.max !== undefined &&\n            typeof fieldConfig.validation.max === 'object' &&\n            internalValue >= +fieldConfig.validation.max.value\n          }\n        >\n          +\n        </SpinButton>\n      </NumberInputContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default NumberInput;\n","// Filepath: /src/features/inputs/components/NumberInput.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Input, Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\n\nconst NumberInputContainer = styled.div<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  input {\n    text-align: center;\n    padding-right: 0;\n    width: 65px; /* Giảm chiều rộng */\n  }\n`;\n\nconst SpinButton = styled.button<{ className?: string }>`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 0;\n  height: 32px; /* Giảm kích thước */\n  width: 32px; /* Giảm kích thước */\n  font-size: 18px; /* Giảm kích thước */\n  line-height: 0;\n  color: ${({ theme }) => theme.colors.text};\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['light-500']};\n  }\n  &:disabled {\n    cursor: default;\n    background-color: #efefef;\n  }\n  &:first-of-type {\n    border-radius: 8px 0 0 8px; /* Bo tròn */\n    border-right: none;\n  }\n  &:last-of-type {\n    border-radius: 0 8px 8px 0; /* Bo tròn */\n    border-left: none;\n  }\n`;\n\ninterface NumberInputProps extends CommonInputProps {}\n\nconst NumberInput: React.FC<NumberInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  const [internalValue, setInternalValue] = useState<number>(+field.value || 0);\n  const clampValue = useCallback(\n    (value: number) => {\n      const { min, max } = fieldConfig.validation || {};\n      let clampedValue = value;\n      if (min !== undefined && typeof min === 'object' && value < +min.value) {\n        clampedValue = +min.value;\n      }\n      if (max !== undefined && typeof max === 'object' && value > +max.value) {\n        clampedValue = +max.value;\n      }\n      return clampedValue;\n    },\n    [fieldConfig.validation]\n  );\n  useEffect(() => {\n    setInternalValue(+field.value || 0);\n  }, [field.value]);\n  const handleIncrement = () => {\n    const newValue = clampValue(internalValue + 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  const handleDecrement = () => {\n    const newValue = clampValue(internalValue - 1);\n    setInternalValue(newValue);\n    field.onChange(newValue);\n  };\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <NumberInputContainer\n        className={formClassNameConfig.numberInputContainer}\n      >\n        <SpinButton\n          type=\"button\"\n          onClick={handleDecrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.min !== undefined &&\n            typeof fieldConfig.validation.min === 'object' &&\n            internalValue <= +fieldConfig.validation.min.value\n          }\n        >\n          -\n        </SpinButton>\n        <Input\n          {...field}\n          className={formClassNameConfig.number}\n          type=\"number\"\n          id={id}\n          onChange={e => {\n            field.onChange(e);\n            setInternalValue(+e.target.value);\n          }}\n          onBlur={e => {\n            field.onBlur();\n            const clampedValue = clampValue(+e.target.value);\n            setInternalValue(clampedValue);\n            field.onChange(clampedValue);\n          }}\n          value={internalValue}\n          autoComplete={disableAutocomplete ? 'off' : undefined}\n        />\n        <SpinButton\n          type=\"button\"\n          onClick={handleIncrement}\n          className={formClassNameConfig.numberInputButton}\n          disabled={\n            fieldConfig.validation?.max !== undefined &&\n            typeof fieldConfig.validation.max === 'object' &&\n            internalValue >= +fieldConfig.validation.max.value\n          }\n        >\n          +\n        </SpinButton>\n      </NumberInputContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default NumberInput;\n;NumberInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"NumberInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};NumberInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"NumberInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/RadioInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst RadioGroup = styled.div<{ className?: string }>`\n  display: flex;\n  gap: 16px;\n`;\n\nconst RadioLabel = styled.label<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  cursor: pointer;\n`;\n\nconst RadioInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '';\n    display: block;\n    width: 9px; /* Giảm kích thước */\n    height: 9px; /* Giảm kích thước */\n    background-color: white;\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\ninterface RadioInputProps extends CommonInputProps {}\n\nconst RadioInput: React.FC<RadioInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <RadioGroup className={formClassNameConfig.radioGroup}>\n        {options?.map(option => (\n          <RadioLabel\n            key={option.value}\n            htmlFor={`${id}-${option.value}`}\n            className={formClassNameConfig.radioLabel}\n          >\n            <RadioInputStyled\n              {...field}\n              type=\"radio\"\n              id={`${id}-${option.value}`}\n              name={id}\n              value={option.value}\n              checked={field.value === option.value}\n              className={formClassNameConfig.radioButton}\n            />\n            {option.label}\n          </RadioLabel>\n        ))}\n      </RadioGroup>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default RadioInput;\n","// Filepath: /src/features/inputs/components/RadioInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, InputWrapper, ErrorMessage } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst RadioGroup = styled.div<{ className?: string }>`\n  display: flex;\n  gap: 16px;\n`;\n\nconst RadioLabel = styled.label<{ className?: string }>`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  cursor: pointer;\n`;\n\nconst RadioInputStyled = styled.input<{ className?: string }>`\n  appearance: none;\n  width: 18px; /* Giảm kích thước */\n  height: 18px; /* Giảm kích thước */\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n  position: relative;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.info};\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:checked::after {\n    content: '';\n    display: block;\n    width: 9px; /* Giảm kích thước */\n    height: 9px; /* Giảm kích thước */\n    background-color: white;\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\ninterface RadioInputProps extends CommonInputProps {}\n\nconst RadioInput: React.FC<RadioInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <RadioGroup className={formClassNameConfig.radioGroup}>\n        {options?.map(option => (\n          <RadioLabel\n            key={option.value}\n            htmlFor={`${id}-${option.value}`}\n            className={formClassNameConfig.radioLabel}\n          >\n            <RadioInputStyled\n              {...field}\n              type=\"radio\"\n              id={`${id}-${option.value}`}\n              name={id}\n              value={option.value}\n              checked={field.value === option.value}\n              className={formClassNameConfig.radioButton}\n            />\n            {option.label}\n          </RadioLabel>\n        ))}\n      </RadioGroup>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default RadioInput;\n;RadioInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"RadioInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};RadioInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"RadioInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/SelectInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst StyledSelect = styled.select<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px 12px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-size: ${({ theme }) => theme.fontSizes.small}; /* Giảm font-size */\n  appearance: none;\n  width: 100%;\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none;\n  background: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='8'%3E%3Cpath fill='%239CA3AF' d='M1.41 0L6 4.58 10.59 0 12 1.41l-6 6-6-6z'/%3E%3C/svg%3E\")\n    no-repeat right 12px center;\n  background-size: 12px 8px;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n`;\n\n\n\ninterface SelectInputProps extends CommonInputProps {}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledSelect {...field} className={formClassNameConfig.select} id={id}>\n        {options?.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </StyledSelect>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SelectInput;\n","// Filepath: /src/features/inputs/components/SelectInput.tsx\n\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst StyledSelect = styled.select<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px 12px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-size: ${({ theme }) => theme.fontSizes.small}; /* Giảm font-size */\n  appearance: none;\n  width: 100%;\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none;\n  background: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='8'%3E%3Cpath fill='%239CA3AF' d='M1.41 0L6 4.58 10.59 0 12 1.41l-6 6-6-6z'/%3E%3C/svg%3E\")\n    no-repeat right 12px center;\n  background-size: 12px 8px;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n`;\n\n\n\ninterface SelectInputProps extends CommonInputProps {}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label, options } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledSelect {...field} className={formClassNameConfig.select} id={id}>\n        {options?.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </StyledSelect>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SelectInput;\n;SelectInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SelectInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};SelectInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SelectInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/SwitchInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\n\nconst SwitchContainer = styled.label<{ className?: string }>`\n  position: relative;\n  display: inline-block;\n  width: 40px; /* Giảm kích thước */\n  height: 20px; /* Giảm kích thước */\n  cursor: pointer;\n`;\n\nconst SwitchInputStyled = styled.input<{ className?: string }>`\n  opacity: 0;\n  width: 0;\n  height: 0;\n  &:checked + .slider {\n    background-color: ${({ theme }) => theme.colors.info};\n  }\n  &:focus + .slider {\n    box-shadow: 0 0 1px ${({ theme }) => theme.colors.info};\n  }\n  &:checked + .slider:before {\n    transform: translateX(19px); /* Chỉnh vị trí slider */\n  }\n  &:disabled + .slider {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst Slider = styled.span<{ className?: string }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.4s;\n  border-radius: 34px;\n  &:hover {\n    background-color: #979797;\n  }\n  &:before {\n    position: absolute;\n    content: '';\n    height: 16px; /* Giảm kích thước slider */\n    width: 16px; /* Giảm kích thước slider */\n    left: 2px; /* Chỉnh vị trí slider */\n    bottom: 2px; /* Chỉnh vị trí slider */\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n`;\n\ninterface SwitchInputProps extends CommonInputProps {}\n\nconst SwitchInput: React.FC<SwitchInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n        </Label>\n      )}\n      <SwitchContainer\n        htmlFor={id}\n        className={formClassNameConfig.switchContainer}\n      >\n        <SwitchInputStyled\n          {...field}\n          type=\"checkbox\"\n          id={id}\n          className={formClassNameConfig.switch}\n        />\n        <Slider className={formClassNameConfig.switchSlider} />\n      </SwitchContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SwitchInput;\n","// Filepath: /src/features/inputs/components/SwitchInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\n\n\nconst SwitchContainer = styled.label<{ className?: string }>`\n  position: relative;\n  display: inline-block;\n  width: 40px; /* Giảm kích thước */\n  height: 20px; /* Giảm kích thước */\n  cursor: pointer;\n`;\n\nconst SwitchInputStyled = styled.input<{ className?: string }>`\n  opacity: 0;\n  width: 0;\n  height: 0;\n  &:checked + .slider {\n    background-color: ${({ theme }) => theme.colors.info};\n  }\n  &:focus + .slider {\n    box-shadow: 0 0 1px ${({ theme }) => theme.colors.info};\n  }\n  &:checked + .slider:before {\n    transform: translateX(19px); /* Chỉnh vị trí slider */\n  }\n  &:disabled + .slider {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n`;\n\nconst Slider = styled.span<{ className?: string }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: 0.4s;\n  border-radius: 34px;\n  &:hover {\n    background-color: #979797;\n  }\n  &:before {\n    position: absolute;\n    content: '';\n    height: 16px; /* Giảm kích thước slider */\n    width: 16px; /* Giảm kích thước slider */\n    left: 2px; /* Chỉnh vị trí slider */\n    bottom: 2px; /* Chỉnh vị trí slider */\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n`;\n\ninterface SwitchInputProps extends CommonInputProps {}\n\nconst SwitchInput: React.FC<SwitchInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n        </Label>\n      )}\n      <SwitchContainer\n        htmlFor={id}\n        className={formClassNameConfig.switchContainer}\n      >\n        <SwitchInputStyled\n          {...field}\n          type=\"checkbox\"\n          id={id}\n          className={formClassNameConfig.switch}\n        />\n        <Slider className={formClassNameConfig.switchSlider} />\n      </SwitchContainer>\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default SwitchInput;\n;SwitchInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SwitchInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};SwitchInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"SwitchInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/TextInput.tsx\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { useTheme } from '../../../theme/ThemeProvider';\nimport { Input, Label, InputWrapper } from '../../../styles';\n\nconst TextInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  horizontalLabel,\n  labelWidth,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required &&\n            typeof fieldConfig.validation.required === 'object' && (\n              <span style={{ color: theme.colors.danger }}>*</span>\n            )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.input}\n        id={id}\n        autoComplete={disableAutocomplete ? 'off' : undefined}\n      />\n    </InputWrapper>\n  );\n};\n\nexport default TextInput;\n","// Filepath: /src/features/inputs/components/TextInput.tsx\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { useTheme } from '../../../theme/ThemeProvider';\nimport { Input, Label, InputWrapper } from '../../../styles';\n\nconst TextInput: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  horizontalLabel,\n  labelWidth,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required &&\n            typeof fieldConfig.validation.required === 'object' && (\n              <span style={{ color: theme.colors.danger }}>*</span>\n            )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.input}\n        id={id}\n        autoComplete={disableAutocomplete ? 'off' : undefined}\n      />\n    </InputWrapper>\n  );\n};\n\nexport default TextInput;\n;TextInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TextInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};TextInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TextInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// Filepath: /src/features/inputs/components/TextareaInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst StyledTextarea = styled.textarea<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px 12px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-size: ${({ theme }) => theme.fontSizes.small}; /* Giảm font-size */\n  width: 100%;\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n\n  min-height: 100px; /* Giảm chiều cao */\n`;\n\n\ninterface TextareaInputProps extends CommonInputProps {}\n\nconst TextareaInput: React.FC<TextareaInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledTextarea\n        {...field}\n        className={formClassNameConfig.textarea}\n        id={id}\n        autoComplete={disableAutocomplete ? 'off' : undefined}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default TextareaInput;\n","// Filepath: /src/features/inputs/components/TextareaInput.tsx\nimport React from 'react';\nimport { FormValues } from '../../dynamic-form';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst StyledTextarea = styled.textarea<{ className?: string }>`\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px 12px; /* Giảm padding */\n  border-radius: 8px; /* Bo tròn */\n  font-size: ${({ theme }) => theme.fontSizes.small}; /* Giảm font-size */\n  width: 100%;\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  line-height: 1.5;\n  outline: none;\n\n  &:hover {\n    border-color: ${({ theme }) => theme.colors['info-700']};\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 3px ${({ theme }) => theme.colors['info-200']}; /* Hiệu ứng focus */\n    border-color: ${({ theme }) => theme.colors.info};\n  }\n\n  &:disabled {\n    background-color: #f5f5f5;\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n\n  /* Add responsive styles using media queries */\n  @media (min-width: ${({ theme }) => theme.breakpoints.sm}) {\n    max-width: 300px;\n  }\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    max-width: 400px;\n  }\n\n  min-height: 100px; /* Giảm chiều cao */\n`;\n\n\ninterface TextareaInputProps extends CommonInputProps {}\n\nconst TextareaInput: React.FC<TextareaInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  disableAutocomplete,\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <StyledTextarea\n        {...field}\n        className={formClassNameConfig.textarea}\n        id={id}\n        autoComplete={disableAutocomplete ? 'off' : undefined}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default TextareaInput;\n;TextareaInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TextareaInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}};TextareaInput.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TextareaInput\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"The ID of the input.\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"The field configuration.\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"Optional CSS class names for form elements.\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to show inline error messages.\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to use a horizontal label.\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"Optional label width (for horizontal labels).\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"The field error (if any).\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"Whether to disable autocomplete for the input.\"}}}","// Filepath: /src/features/inputs/components/TimePicker.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst TimePicker: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.time}\n        type=\"time\"\n        id={id}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default TimePicker;\n","// Filepath: /src/features/inputs/components/TimePicker.tsx\n\nimport React from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport { CommonInputProps } from '../types';\nimport { FormValues } from '../../dynamic-form';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport { useTheme } from '../../../theme/ThemeProvider';\n\nconst TimePicker: React.FC<CommonInputProps> = ({\n  id,\n  fieldConfig,\n  formClassNameConfig = {},\n  showInlineError,\n  horizontalLabel,\n  labelWidth,\n  error,\n}) => {\n  const theme = useTheme();\n  const { label } = fieldConfig;\n  const { control } = useFormContext<FormValues>();\n  const { field } = useController({\n    name: id,\n    control,\n    rules: fieldConfig.validation,\n    defaultValue: fieldConfig.defaultValue,\n  });\n  return (\n    <InputWrapper\n      $horizontalLabel={horizontalLabel}\n      $labelWidth={labelWidth}\n      className={formClassNameConfig.inputWrapper}\n    >\n      {label && (\n        <Label\n          htmlFor={id}\n          $horizontalLabel={horizontalLabel}\n          $labelWidth={labelWidth}\n          className={formClassNameConfig.label}\n        >\n          {label}\n          {fieldConfig.validation?.required && (\n            <span style={{ color: theme.colors.danger }}>*</span>\n          )}\n        </Label>\n      )}\n      <Input\n        {...field}\n        className={formClassNameConfig.time}\n        type=\"time\"\n        id={id}\n      />\n      {showInlineError && error && (\n        <ErrorMessage className={formClassNameConfig.errorMessage}>\n          {error.message}\n        </ErrorMessage>\n      )}\n    </InputWrapper>\n  );\n};\n\nexport default TimePicker;\n;TimePicker.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TimePicker\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};TimePicker.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"TimePicker\",\"props\":{\"id\":{\"required\":true,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"fieldConfig\":{\"required\":true,\"tsType\":{\"name\":\"FieldConfig\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"FormClassNameConfig\"},\"description\":\"\",\"defaultValue\":{\"value\":\"{}\",\"computed\":false}},\"showInlineError\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"labelWidth\":{\"required\":false,\"tsType\":{\"name\":\"union\",\"raw\":\"string | number\",\"elements\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"description\":\"\"},\"error\":{\"required\":false,\"tsType\":{\"name\":\"FieldError\"},\"description\":\"\"},\"disableAutocomplete\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/inputs/components/index.ts\nexport { default as TextInput } from './TextInput';\nexport { default as TextareaInput } from './TextareaInput';\nexport { default as CheckboxInput } from './CheckboxInput';\nexport { default as SelectInput } from './SelectInput';\nexport { default as RadioInput } from './RadioInput';\nexport { default as DateInput } from './DateInput';\nexport { default as NumberInput } from './NumberInput';\nexport { default as SwitchInput } from './SwitchInput';\nexport { default as TimePicker } from './TimePicker';\nexport { default as DateTimePicker } from './DateTimePicker';\nexport { default as ComboBox } from './ComboBox';\n","// src/features/inputs/index.ts\nexport * from './components';\nexport * from './utils';\nexport * from './registry';\nexport * from './types';\n","// src/features/inputs/registry/InputRegistry.ts\nimport React from 'react';\nimport {\n  TextInput,\n  CheckboxInput,\n  TextareaInput,\n  SelectInput,\n  RadioInput,\n  DateInput,\n  NumberInput,\n  SwitchInput,\n  TimePicker,\n  DateTimePicker,\n  ComboBox,\n} from '../components';\nimport { InputType } from '../../dynamic-form/types';\n\n// Create a map of input types to components\n// @ts-expect-error\nconst inputRegistry: Record<InputType, React.ComponentType<any> | undefined> = {\n  text: TextInput,\n  email: TextInput,\n  password: TextInput,\n  tel: TextInput,\n  url: TextInput,\n  checkbox: CheckboxInput,\n  textarea: TextareaInput,\n  select: SelectInput,\n  radio: RadioInput,\n  date: DateInput,\n  number: NumberInput,\n  switch: SwitchInput,\n  time: TimePicker,\n  'datetime-local': DateTimePicker,\n  combobox: ComboBox,\n};\n\n/**\n * Registers a new input component for a given type.\n *\n * @param type - The input type to register.\n * @param component - The component to register.\n */\nexport const registerInput = (\n  type: InputType,\n  component: React.ComponentType<any>\n) => {\n  inputRegistry[type] = component;\n};\n\n/**\n * Retrieves the component registered for a given input type.\n *\n * @param type - The input type to retrieve the component for.\n * @returns The registered component, or undefined if no component is registered for the type.\n */\nexport const getInputComponent = (\n  type: InputType\n): React.ComponentType<any> | undefined => {\n  return inputRegistry[type];\n};\n","// Filepath: /src/features/core/LayoutRegistry.ts\n\nimport React from 'react';\nimport { FlexLayout } from './components/FlexLayout';\nimport { GridLayout } from './components/GridLayout';\nimport { LayoutType } from '../../dynamic-form';\n\n// Create a map of layout types to components\nconst layoutRegistry: Record<LayoutType, React.ComponentType<any> | undefined> =\n  {\n    flex: FlexLayout,\n    grid: GridLayout,\n  };\n\n/**\n * Registers a new layout component for a given type.\n *\n * @param type - The layout type to register.\n * @param component - The component to register.\n */\nexport const registerLayout = (\n  type: LayoutType,\n  component: React.ComponentType<any>\n) => {\n  layoutRegistry[type] = component;\n};\n\n/**\n * Retrieves the component registered for a given layout type.\n *\n * @param type - The layout type to retrieve the component for.\n * @returns The registered component, or undefined if no component is registered for the type.\n */\nexport const getLayoutComponent = (\n  type: LayoutType\n): React.ComponentType<any> | undefined => {\n  return layoutRegistry[type];\n};\n","// Filepath: /src/features/core/components/FlexLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface FlexLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst FlexLayout: React.FC<FlexLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${\n        formClassNameConfig?.formContainer || ''\n      }`}\n      $layout=\"flex\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { FlexLayout };\n","// Filepath: /src/features/core/components/FlexLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface FlexLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst FlexLayout: React.FC<FlexLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${\n        formClassNameConfig?.formContainer || ''\n      }`}\n      $layout=\"flex\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { FlexLayout };\n;FlexLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FlexLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};FlexLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"FlexLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// Filepath: /src/features/core/components/GridLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface GridLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst GridLayout: React.FC<GridLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${\n        formClassNameConfig?.formContainer || ''\n      }`}\n      $layout=\"grid\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { GridLayout };\n","// Filepath: /src/features/core/components/GridLayout.tsx\n\nimport React from 'react';\nimport { FormContainer, FormContainerProps } from '../../../../styles';\n\ninterface GridLayoutProps extends FormContainerProps {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  children: React.ReactNode;\n  className?: string;\n  formClassNameConfig?: any;\n  style?: React.CSSProperties;\n  layoutConfig?: any;\n  horizontalLabel?: boolean;\n}\n\nconst GridLayout: React.FC<GridLayoutProps> = ({\n  onSubmit,\n  children,\n  className,\n  formClassNameConfig,\n  style,\n  layoutConfig,\n  horizontalLabel,\n}) => {\n  return (\n    <FormContainer\n      onSubmit={onSubmit}\n      className={`${className || ''} ${\n        formClassNameConfig?.formContainer || ''\n      }`}\n      $layout=\"grid\"\n      $layoutConfig={layoutConfig}\n      $horizontalLabel={horizontalLabel}\n      data-layoutconfig={JSON.stringify(layoutConfig)}\n      data-horizontallabel={horizontalLabel ? 'true' : 'false'}\n      style={style}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\nexport { GridLayout };\n;GridLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"GridLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}};GridLayout.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"GridLayout\",\"props\":{\"$layout\":{\"required\":true,\"tsType\":{\"name\":\"union\",\"raw\":\"'flex' | 'grid'\",\"elements\":[{\"name\":\"literal\",\"value\":\"'flex'\"},{\"name\":\"literal\",\"value\":\"'grid'\"}]},\"description\":\"\"},\"$layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"$horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"},\"formClassNameConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"style\":{\"required\":false,\"tsType\":{\"name\":\"ReactCSSProperties\",\"raw\":\"React.CSSProperties\"},\"description\":\"\"},\"onSubmit\":{\"required\":true,\"tsType\":{\"name\":\"signature\",\"type\":\"function\",\"raw\":\"(event: React.FormEvent<HTMLFormElement>) => void\",\"signature\":{\"arguments\":[{\"type\":{\"name\":\"ReactFormEvent\",\"raw\":\"React.FormEvent<HTMLFormElement>\",\"elements\":[{\"name\":\"HTMLFormElement\"}]},\"name\":\"event\"}],\"return\":{\"name\":\"void\"}}},\"description\":\"\"},\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"className\":{\"required\":false,\"tsType\":{\"name\":\"string\"},\"description\":\"\"},\"layoutConfig\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"},\"horizontalLabel\":{\"required\":false,\"tsType\":{\"name\":\"boolean\"},\"description\":\"\"}}}","// src/features/inputs/registry/index.ts\nexport * from './InputRegistry';\nexport * from './LayoutRegistry';\n","// src/features/inputs/utils.ts\nimport { InputType } from '../dynamic-form/types';\n\n/**\n * Maps a value to an InputType.\n *\n * @param value - The value to map.\n * @returns The corresponding InputType.\n */\nexport const getInputTypeFromValue = (value: any): InputType => {\n  if (typeof value === 'string') {\n    return 'text';\n  }\n  if (typeof value === 'number') {\n    return 'number';\n  }\n  if (typeof value === 'boolean') {\n    return 'checkbox';\n  }\n  if (Array.isArray(value)) {\n    return 'select'; // TODO: Handle array input type\n  }\n  return 'text'; // Default\n};\n","// Filepath: /src/features/validation/ValidationSchemaRegistry.ts\n\nimport * as yup from 'yup';\nimport { InputType } from '../dynamic-form';\n\n// Create a map of input types to Yup schema\n// @ts-expect-error\nconst validationSchemaRegistry: Record<InputType, yup.AnySchema | undefined> = {\n  text: yup.string(),\n  email: yup.string().email('Invalid email format'),\n  password: yup.string(),\n  tel: yup.string(),\n  url: yup.string().url('Invalid URL format'),\n  checkbox: yup.boolean(),\n  textarea: yup.string(),\n  select: yup.string(),\n  radio: yup.boolean(),\n  date: yup.date(),\n  number: yup.number(),\n  switch: yup.boolean(),\n  time: yup.string(),\n  'datetime-local': yup.string(),\n  combobox: yup.string(),\n};\n\n/**\n * Registers a new validation schema for a given type.\n *\n * @param type - The input type to register.\n * @param schema - The Yup schema to register.\n */\nexport const registerValidationSchema = (\n  type: InputType,\n  schema: yup.AnySchema\n) => {\n  validationSchemaRegistry[type] = schema;\n};\n\n/**\n * Retrieves the validation schema registered for a given input type.\n *\n * @param type - The input type to retrieve the schema for.\n * @returns The registered schema, or undefined if no schema is registered for the type.\n */\nexport const getValidationSchema = (\n  type: InputType\n): yup.AnySchema | undefined => {\n  return validationSchemaRegistry[type];\n};\n","// src/features/validation/index.ts\nexport * from './validationSchema';\n","// Filepath: /src/features/validation/validationSchema.ts\n\nimport * as yup from 'yup';\nimport { FormConfig, CustomValidator } from '../dynamic-form';\nimport { getValidationSchema } from './ValidationSchemaRegistry';\n\n/**\n * Handles the 'required' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'required' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleRequired = (\n  fieldSchema: yup.AnySchema,\n  ruleValue: any,\n  validationMessages: any\n) => {\n  const requiredMessage =\n    typeof ruleValue === 'object'\n      ? ruleValue.message\n      : validationMessages?.required || 'This field is required';\n  return (fieldSchema as yup.StringSchema).required(requiredMessage);\n};\n\n/**\n * Handles the 'minLength' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'minLength' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMinLength = (\n  fieldSchema: yup.StringSchema,\n  ruleValue: any,\n  validationMessages: any\n) => {\n  if (\n    typeof ruleValue === 'number' ||\n    typeof ruleValue === 'string' ||\n    typeof ruleValue?.value === 'number' ||\n    typeof ruleValue?.value === 'string'\n  ) {\n    const value =\n      typeof ruleValue === 'number' || typeof ruleValue === 'string'\n        ? ruleValue\n        : ruleValue.value;\n    const message =\n      ruleValue.message ||\n      validationMessages?.minLength?.replace('{value}', value.toString()) ||\n      `minLength should be ${value}`;\n    return fieldSchema.min(value, message);\n  }\n  return fieldSchema;\n};\n\n/**\n * Handles the 'maxLength' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'maxLength' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMaxLength = (\n  fieldSchema: yup.StringSchema,\n  ruleValue: any,\n  validationMessages: any\n) => {\n  if (\n    typeof ruleValue === 'number' ||\n    typeof ruleValue === 'string' ||\n    typeof ruleValue?.value === 'number' ||\n    typeof ruleValue?.value === 'string'\n  ) {\n    const value =\n      typeof ruleValue === 'number' || typeof ruleValue === 'string'\n        ? ruleValue\n        : ruleValue.value;\n    const message =\n      ruleValue.message ||\n      validationMessages?.maxLength?.replace('{value}', value.toString()) ||\n      `maxLength should be ${value}`;\n    return fieldSchema.max(value, message);\n  }\n  return fieldSchema;\n};\n\n/**\n * Handles the 'min' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'min' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMin = (\n  fieldSchema: yup.NumberSchema,\n  ruleValue: any,\n  validationMessages: any\n) => {\n  if (\n    typeof ruleValue === 'number' ||\n    typeof ruleValue === 'string' ||\n    typeof ruleValue?.value === 'number' ||\n    typeof ruleValue?.value === 'string'\n  ) {\n    const value =\n      typeof ruleValue === 'number' || typeof ruleValue === 'string'\n        ? ruleValue\n        : ruleValue.value;\n    const message =\n      ruleValue.message ||\n      validationMessages?.min?.replace('{value}', value.toString()) ||\n      `min should be ${value}`;\n    return fieldSchema.min(value, message);\n  }\n  return fieldSchema;\n};\n\n/**\n * Handles the 'max' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'max' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMax = (\n  fieldSchema: yup.NumberSchema,\n  ruleValue: any,\n  validationMessages: any\n) => {\n  if (\n    typeof ruleValue === 'number' ||\n    typeof ruleValue === 'string' ||\n    typeof ruleValue?.value === 'number' ||\n    typeof ruleValue?.value === 'string'\n  ) {\n    const value =\n      typeof ruleValue === 'number' || typeof ruleValue === 'string'\n        ? ruleValue\n        : ruleValue.value;\n    const message =\n      ruleValue.message ||\n      validationMessages?.max?.replace('{value}', value.toString()) ||\n      `max should be ${value}`;\n    return fieldSchema.max(value, message);\n  }\n  return fieldSchema;\n};\n\n/**\n * Handles the 'pattern' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'pattern' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handlePattern = (\n  fieldSchema: yup.StringSchema,\n  ruleValue: any,\n  validationMessages: any\n) => {\n  const regex =\n    ruleValue instanceof RegExp ? ruleValue : new RegExp(ruleValue.value);\n  const message =\n    ruleValue.message || validationMessages?.pattern || 'Invalid format';\n  return fieldSchema.matches(regex, { message, excludeEmptyString: true });\n};\n\n/**\n * Applies a custom validation function to the field schema.\n *\n * @param fieldSchema - The current field schema.\n * @param validate - The custom validation function.\n * @returns The updated field schema.\n */\nconst applyCustomValidation = (\n  fieldSchema: yup.AnySchema,\n  validate: CustomValidator\n) => {\n  return fieldSchema.test(\n    'custom-validation',\n    'Custom validation failed',\n    async (value, context) => {\n      const result = await validate(value, context.parent);\n      if (typeof result === 'string') {\n        return context.createError({\n          path: context.path,\n          message: result,\n        });\n      }\n      return result !== false;\n    }\n  );\n};\n\n/**\n * Creates a Yup validation schema based on the provided form configuration.\n *\n * @param config - The form configuration.\n * @returns The Yup schema.\n */\nexport const createValidationSchema = (config: FormConfig) => {\n  const shape: { [key: string]: yup.AnySchema } = {};\n\n  const validationHandlers: {\n    [key: string]: (\n      fieldSchema: yup.AnySchema,\n      ruleValue: any,\n      validationMessages: any\n    ) => yup.AnySchema;\n  } = {\n    required: handleRequired,\n    minLength: (fieldSchema, ruleValue, validationMessages) =>\n      handleMinLength(\n        fieldSchema as yup.StringSchema,\n        ruleValue,\n        validationMessages\n      ),\n    maxLength: (fieldSchema, ruleValue, validationMessages) =>\n      handleMaxLength(\n        fieldSchema as yup.StringSchema,\n        ruleValue,\n        validationMessages\n      ),\n    min: (fieldSchema, ruleValue, validationMessages) =>\n      handleMin(fieldSchema as yup.NumberSchema, ruleValue, validationMessages),\n    max: (fieldSchema, ruleValue, validationMessages) =>\n      handleMax(fieldSchema as yup.NumberSchema, ruleValue, validationMessages),\n    pattern: (fieldSchema, ruleValue, validationMessages) =>\n      handlePattern(\n        fieldSchema as yup.StringSchema,\n        ruleValue,\n        validationMessages\n      ),\n  };\n\n  for (const fieldId in config) {\n    const fieldConfig = config[fieldId];\n    const { validation, type, validationMessages } = fieldConfig;\n\n    if (type === undefined) {\n      console.warn(`Field type is undefined for field: ${fieldId}`);\n    }\n\n    let fieldSchema: yup.AnySchema = getValidationSchema(type!) || yup.mixed();\n\n    if (validation) {\n      const { validate, ...otherValidations } = validation;\n\n      for (const rule in otherValidations) {\n        if (otherValidations.hasOwnProperty(rule)) {\n          const ruleValue = validation[\n            rule as keyof typeof otherValidations\n          ] as any;\n          const handler = validationHandlers[rule];\n          if (handler) {\n            fieldSchema = handler(fieldSchema, ruleValue, validationMessages);\n          }\n        }\n      }\n\n      if (typeof validate === 'function') {\n        fieldSchema = applyCustomValidation(fieldSchema, validate);\n      }\n    }\n\n    shape[fieldId] = fieldSchema;\n  }\n\n  return yup.object().shape(shape);\n};\n","// src/index.tsx\nexport * from './features/dynamic-form';\nexport * from './features/form-renderer';\nexport * from './features/inputs';\nexport * from './components';\nexport * from './theme';\nexport { default as DynamicForm } from './DynamicForm';\n","// Filepath: /src/styles.ts\nexport * from './components/FormContainer';\nexport * from './components/GridFormContainer';\nexport * from './components/Input';\nexport * from './components/Label';\nexport * from './components/InputWrapper';\nexport * from './components/SubmitButton';\nexport * from './components/ErrorMessage';\n","// Filepath: /src/theme/ThemeProvider.tsx\nimport React, { FC, createContext, useContext } from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\nimport { defaultTheme } from './index';\n\n/**\n * The theme context.\n */\nexport const AppThemeContext = createContext(defaultTheme);\n\n/**\n * Custom hook to access the theme context.\n *\n * @returns The theme object.\n */\nexport const useTheme = () => useContext(AppThemeContext);\n\n/**\n * Theme provider component.\n */\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  theme?: any;\n}\n\nconst ThemeProvider: FC<ThemeProviderProps> = ({ children, theme }) => {\n  const mergedTheme = theme ? { ...defaultTheme, ...theme } : defaultTheme;\n\n  return (\n    <AppThemeContext.Provider value={mergedTheme}>\n      <StyledThemeProvider theme={mergedTheme}>{children}</StyledThemeProvider>\n    </AppThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","// Filepath: /src/theme/ThemeProvider.tsx\nimport React, { FC, createContext, useContext } from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\nimport { defaultTheme } from './index';\n\n/**\n * The theme context.\n */\nexport const AppThemeContext = createContext(defaultTheme);\n\n/**\n * Custom hook to access the theme context.\n *\n * @returns The theme object.\n */\nexport const useTheme = () => useContext(AppThemeContext);\n\n/**\n * Theme provider component.\n */\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  theme?: any;\n}\n\nconst ThemeProvider: FC<ThemeProviderProps> = ({ children, theme }) => {\n  const mergedTheme = theme ? { ...defaultTheme, ...theme } : defaultTheme;\n\n  return (\n    <AppThemeContext.Provider value={mergedTheme}>\n      <StyledThemeProvider theme={mergedTheme}>{children}</StyledThemeProvider>\n    </AppThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n;ThemeProvider.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ThemeProvider\",\"props\":{\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"}}};ThemeProvider.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"ThemeProvider\",\"props\":{\"children\":{\"required\":true,\"tsType\":{\"name\":\"ReactReactNode\",\"raw\":\"React.ReactNode\"},\"description\":\"\"},\"theme\":{\"required\":false,\"tsType\":{\"name\":\"any\"},\"description\":\"\"}}}","// Filepath: /src/theme/index.ts\nimport { DefaultTheme } from 'styled-components';\n\n/**\n * Default theme for the form.\n */\nexport const defaultTheme: DefaultTheme = {\n  colors: {\n    primary: '#FF902F',\n    'primary-hover': '#e5791e',\n    secondary: '#212529',\n    'secondary-hover': '#0d0f10',\n    success: '#55CE63',\n    'success-hover': '#39b248',\n    info: '#009EFB',\n    'info-hover': '#0075c7',\n    warning: '#FFBC34',\n    'warning-hover': '#e5a62a',\n    danger: '#FC133D',\n    'danger-hover': '#e51037',\n    blue: '#00c5fb',\n    'blue-hover': '#0097c7',\n    maroon: '#f43b48',\n    'maroon-hover': '#dc2734',\n    violet: '#667eea',\n    'violet-hover': '#5063c9',\n    dark: '#29344a',\n    light: '#D5D8DA',\n    white: '#FFF',\n    black: '#000',\n    purple: '#9368E9',\n    pink: '#FC6075',\n    teal: '#02a8b5',\n    cyan: '#299cdb',\n    green: '#35BA67',\n    orange: '#fbc418',\n    indigo: '#4d5ddb',\n    yellow: '#ffd200',\n    'primary-100': '#FFF5EC',\n    'primary-200': '#FFEBDA',\n    'primary-300': '#FFE1C7',\n    'primary-400': '#FFD7B4',\n    'primary-500': '#FFCDA2',\n    'primary-600': '#FFC38F',\n    'primary-700': '#FFB97C',\n    'primary-800': '#FFAF69',\n    'primary-900': '#FF8012',\n    'primary-1000': '#FF801F',\n    'secondary-100': '#E9E9EA',\n    'secondary-200': '#D3D3D4',\n    'secondary-300': '#BCBEBF',\n    'secondary-400': '#A6A8A9',\n    'secondary-500': '#909294',\n    'secondary-600': '#7A7C7F',\n    'secondary-700': '#646669',\n    'secondary-800': '#4D5154',\n    'secondary-900': '#373B3E',\n    'light-100': '#FCFCFC',\n    'light-200': '#F9F9F9',\n    'light-300': '#F5F6F7',\n    'light-400': '#F2F3F4',\n    'light-500': '#EFF0F1',\n    'light-600': '#ECEDEE',\n    'light-700': '#E9EAEB',\n    'light-800': '#E5E7E9',\n    'light-900': '#E2E4E6',\n    'success-100': '#EEFAEF',\n    'success-200': '#DDF5E0',\n    'success-300': '#CCF0D0',\n    'success-400': '#BBEBC1',\n    'success-500': '#AAE7B1',\n    'success-600': '#99E2A1',\n    'success-700': '#88DD92',\n    'success-800': '#77D882',\n    'success-900': '#66D373',\n    'danger-100': '#FEEAEE',\n    'danger-200': '#FDD5DC',\n    'danger-300': '#FCC0CB',\n    'danger-400': '#FBABB9',\n    'danger-500': '#FB96A8',\n    'danger-600': '#FA8197',\n    'danger-700': '#F96C85',\n    'danger-800': '#F85774',\n    'danger-900': '#F74262',\n    'info-100': '#E6F5FF',\n    'info-200': '#CCECFE',\n    'info-300': '#B3E2FE',\n    'info-400': '#99D8FD',\n    'info-500': '#80CFFD',\n    'info-600': '#66C5FD',\n    'info-700': '#4DBBFC',\n    'info-800': '#33B1FC',\n    'info-900': '#1AA8FB',\n    'warning-100': '#FFF8EB',\n    'warning-200': '#FFF2D6',\n    'warning-300': '#FFEBC2',\n    'warning-400': '#FFE4AE',\n    'warning-500': '#FFDE9A',\n    'warning-600': '#FFD785',\n    'warning-700': '#FFD071',\n    'warning-800': '#FFC95D',\n    'warning-900': '#FFC348',\n    'purple-100': '#F4F0FD',\n    'purple-200': '#E9E1FB',\n    'purple-300': '#DFD2F8',\n    'purple-400': '#D4C3F6',\n    'purple-500': '#C9B4F4',\n    'purple-600': '#BEA4F2',\n    'purple-700': '#B395F0',\n    'purple-800': '#A986ED',\n    'purple-900': '#9E77EB',\n    'pink-100': '#FFEFF1',\n    'pink-200': '#FEDFE3',\n    'pink-300': '#FECFD6',\n    'pink-400': '#FEBFC8',\n    'pink-500': '#FEB0BA',\n    'pink-600': '#FDA0AC',\n    'pink-700': '#FD909E',\n    'pink-800': '#FD8091',\n    'pink-900': '#FF445D',\n    text: '#5B6670',\n    'title-color': '#373B3E',\n    'sub-title': '#4D5154',\n    background: '#f7f7f7',\n    'body-dark-bg': '#263238',\n    'wrapper-bg': '#f1f5f6',\n    'text-muted': '#9595b5',\n    'black-bg': '#16191c',\n    'theme-title': '#97A2D2',\n    'input-bg': '#2c2c50',\n    'form-control-bg': '#FFF',\n    'default-background': '#f7f8f9',\n    // Social Icons Colors\n    facebook: '#3B5998',\n    twitter: '#00ACEE',\n    google: '#DD4B39',\n    telegram: '#0088CC',\n    linkedin: '#0E76A8',\n    youtube: '#C4302B',\n    instagram: '#3F729B',\n    reddit: '#C6C6C6',\n    pinterest: '#cc2127',\n    vk: '#2B587A',\n    rss: '#EE802F',\n    skype: '#00AFF0',\n    xing: '#126567',\n    tumblr: '#34526F',\n    email: '#6567A5',\n    delicious: '#205CC0',\n    stumbleupon: '#F74425',\n    digg: '#191919',\n    blogger: '#FC4F08',\n    flickr: '#FF0084',\n    vimeo: '#86C9EF',\n    yahoo: '#720E9E',\n    gplus: '#DD4B39',\n    appstore: '#000',\n    // Gradient Variables\n    'primary-gradient':\n      'linear-gradient(90.31deg, #FF902F -1.02%, #FF2D3D 132.59%)',\n    'blue-gradient': 'linear-gradient(to right, #00c5fb 0%, #0253cc 100%)',\n    'maroon-gradient': 'linear-gradient(to right, #f43b48 0%, #453a94 100%)',\n    'violet-gradient': 'linear-gradient(to right, #667eea 0%, #764ba2 100%)',\n    border: '#D3D3D4',\n    'default-border': '#A6A8A9',\n    'dark-border': '#2e3840',\n    'input-border': '#e9edf6',\n    error: '#dc3545',\n  },\n  space: {\n    xs: '2px',\n    sm: '4px',\n    md: '6.5px',\n    lg: '12px',\n    xl: '16px',\n    '2xl': '24px',\n    '3xl': '32px',\n    '4xl': '40px',\n    '5xl': '48px',\n    '6xl': '52px',\n    '7xl': '64px',\n    '8xl': '72px',\n    '9xl': '80px',\n  },\n  fontSizes: {\n    '8': '8px',\n    '9': '9px',\n    '10': '10px',\n    '11': '11px',\n    '12': '12px',\n    '13': '13px',\n    '14': '14px',\n    small: '13px',\n    medium: '15px',\n    '17': '17px',\n    '18': '18px',\n    '19': '19px',\n    large: '20px',\n    '22': '22px',\n    '23': '23px',\n    '24': '24px',\n    '26': '26px',\n    '28': '28px',\n    '30': '30px',\n    '32': '32px',\n    '34': '34px',\n    '36': '36px',\n    '40': '40px',\n    '42': '42px',\n    '48': '48px',\n    '50': '50px',\n    '54': '54px',\n    '60': '60px',\n    h1: '2rem',\n    h2: '1.75rem',\n    h3: '1.5rem',\n    h4: '1.25rem',\n    h5: '1.15rem',\n    h6: '1rem',\n  },\n  fontWeights: {\n    lighter: 'lighter',\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    bold: 700,\n    bolder: 'bolder',\n  },\n  radii: {\n    sm: '3px',\n    md: '4px',\n    lg: '5px',\n    xl: '8px',\n    '2xl': '12px',\n    rounded: '50%',\n    pill: '1.5rem',\n  },\n  breakpoints: {\n    sm: '576px',\n    md: '768px',\n    lg: '992px',\n    xl: '1200px',\n  },\n  shadows: {\n    sm: '0px 4px 8px 0px rgba(255, 255, 255, 0.15)',\n    md: '0px 4px 16px 0px rgba(255, 255, 255, 0.7)',\n    lg: '0px 4px 24px 0px #BCBCBC40',\n  },\n};\n\n/**\n * Create a custom theme by extending the default theme.\n *\n * @param customTheme - The custom theme object.\n * @returns The merged theme object.\n */\nexport const createTheme = (customTheme: any): DefaultTheme => {\n  return {\n    ...defaultTheme,\n    ...customTheme,\n    colors: {\n      ...defaultTheme.colors,\n      ...(customTheme.colors || {}),\n    },\n    space: {\n      ...defaultTheme.space,\n      ...(customTheme.space || {}),\n    },\n    fontSizes: {\n      ...defaultTheme.fontSizes,\n      ...(customTheme.fontSizes || {}),\n    },\n    fontWeights: {\n      ...defaultTheme.fontWeights,\n      ...(customTheme.fontWeights || {}),\n    },\n    radii: {\n      ...defaultTheme.radii,\n      ...(customTheme.radii || {}),\n    },\n    breakpoints: {\n      ...defaultTheme.breakpoints,\n      ...(customTheme.breakpoints || {}),\n    },\n  };\n};\n"],"names":[],"sourceRoot":""}
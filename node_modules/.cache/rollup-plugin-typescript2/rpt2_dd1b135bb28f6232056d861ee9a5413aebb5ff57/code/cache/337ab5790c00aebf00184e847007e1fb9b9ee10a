{"code":"// Filepath: /src/features/validation/ValidationSchemaRegistry.ts\nimport * as yup from 'yup';\n// Create a map of input types to Yup schema\n// @ts-expect-error\nconst validationSchemaRegistry = {\n    text: yup.string(),\n    email: yup.string().email('Invalid email format'),\n    password: yup.string(),\n    tel: yup.string(),\n    url: yup.string().url('Invalid URL format'),\n    checkbox: yup.boolean(),\n    textarea: yup.string(),\n    select: yup.string(),\n    radio: yup.boolean(),\n    date: yup.date(),\n    number: yup.number(),\n    switch: yup.boolean(),\n    time: yup.string(),\n    'datetime-local': yup.string(),\n    combobox: yup.string(),\n};\n/**\n * Registers a new validation schema for a given type.\n *\n * @param type - The input type to register.\n * @param schema - The Yup schema to register.\n */\nexport const registerValidationSchema = (type, schema) => {\n    validationSchemaRegistry[type] = schema;\n};\n/**\n * Retrieves the validation schema registered for a given input type.\n *\n * @param type - The input type to retrieve the schema for.\n * @returns The registered schema, or undefined if no schema is registered for the type.\n */\nexport const getValidationSchema = (type) => {\n    return validationSchemaRegistry[type];\n};\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/yup/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts"]}

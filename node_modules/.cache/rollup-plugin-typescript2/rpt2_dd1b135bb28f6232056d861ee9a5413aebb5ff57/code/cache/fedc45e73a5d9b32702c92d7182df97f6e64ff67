{"code":"// Filepath: /src/DynamicForm.tsx\nimport React from 'react';\nimport { useDynamicForm, useRHFOptions, useFormFields, DynamicFormProvider, } from './features/dynamic-form';\nimport { FormRenderer } from './features/form-renderer';\nimport ThemeProvider from './theme/ThemeProvider';\nconst DynamicForm = ({ config = {}, onChange, onSubmit, formOptions, header, footer, readOnly = false, disableForm = false, showSubmitButton = true, autoSave, resetOnSubmit = false, focusFirstError = false, className, formClassNameConfig = {}, style, layout = 'flex', layoutConfig = { gap: '10px', columns: 2 }, horizontalLabel = false, labelWidth, enableLocalStorage = false, debounceOnChange = 0, disableAutocomplete = false, showInlineError = true, showErrorSummary = false, validateOnBlur = false, validateOnChange = true, validateOnSubmit = true, theme, customInputs, onFormReady, renderSubmitButton, }) => {\n    const mergedFormOptions = useRHFOptions(config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur);\n    const form = useDynamicForm({\n        config,\n        formOptions: mergedFormOptions,\n        autoSave,\n        enableLocalStorage,\n        resetOnSubmit,\n        focusFirstError,\n        debounceOnChange,\n        onChange,\n        onFormReady,\n    });\n    const { formState, control, handleSubmit } = form;\n    const { fields, fieldsToRender, conditionalFieldsConfig } = useFormFields(config, // Pass config instead of data\n    formState, control);\n    const onSubmitHandler = () => {\n        handleSubmit((data) => {\n            if (onSubmit) {\n                onSubmit(data);\n            }\n        })();\n    };\n    return (React.createElement(ThemeProvider, { theme: theme || {} },\n        React.createElement(DynamicFormProvider, { form: form },\n            React.createElement(FormRenderer, { onSubmit: onSubmitHandler, className: className, formClassNameConfig: formClassNameConfig, style: style, layout: layout, layoutConfig: layoutConfig, horizontalLabel: horizontalLabel, theme: theme, header: header, fieldsToRender: fieldsToRender, fields: fields, config: config, footer: footer, readOnly: readOnly, disableForm: disableForm, showSubmitButton: showSubmitButton, renderSubmitButton: renderSubmitButton, formOptions: formOptions, showErrorSummary: showErrorSummary, labelWidth: labelWidth, disableAutocomplete: disableAutocomplete, showInlineError: showInlineError, conditionalFieldsConfig: conditionalFieldsConfig, customInputs: customInputs }))));\n};\nexport default DynamicForm;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/form-renderer/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/theme/ThemeProvider.tsx","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/styled-components/dist/index.d.ts"]}

{"code":"/**\n * Determines if a field should be rendered based on the conditional logic.\n *\n * @param fieldId - The ID of the field to check.\n * @param conditionalFieldsConfig - The conditional fields configuration.\n * @param watchedValues - The watched values from useWatch.\n * @returns True if the field should be rendered, false otherwise.\n */\nexport const shouldRenderField = (fieldId, conditionalFieldsConfig, watchedValues) => {\n    const isConditionalField = conditionalFieldsConfig.some((condition) => condition.fields.includes(fieldId));\n    if (!isConditionalField) {\n        return true;\n    }\n    return conditionalFieldsConfig.some((condition) => {\n        const conditionIndex = conditionalFieldsConfig.indexOf(condition);\n        const watchedValue = watchedValues[conditionIndex];\n        let conditionMet = false;\n        switch (condition.operator) {\n            case 'is':\n                conditionMet = watchedValue === condition.value;\n                break;\n            case 'isNot':\n                conditionMet = watchedValue !== condition.value;\n                break;\n            case 'greaterThan':\n                conditionMet = watchedValue > condition.value;\n                break;\n            case 'lessThan':\n                conditionMet = watchedValue < condition.value;\n                break;\n            case 'greaterThanOrEqual':\n                conditionMet = watchedValue >= condition.value;\n                break;\n            case 'lessThanOrEqual':\n                conditionMet = watchedValue <= condition.value;\n                break;\n            case 'contains':\n                conditionMet =\n                    typeof watchedValue === 'string' &&\n                        typeof condition.value === 'string' &&\n                        watchedValue.includes(condition.value);\n                break;\n            case 'startsWith':\n                conditionMet =\n                    typeof watchedValue === 'string' &&\n                        typeof condition.value === 'string' &&\n                        watchedValue.startsWith(condition.value);\n                break;\n            case 'endsWith':\n                conditionMet =\n                    typeof watchedValue === 'string' &&\n                        typeof condition.value === 'string' &&\n                        watchedValue.endsWith(condition.value);\n                break;\n            case 'custom':\n                conditionMet = condition.comparator\n                    ? condition.comparator(watchedValue)\n                    : false;\n                break;\n            default:\n                console.warn(`Unknown operator: ${condition.operator}`);\n                conditionMet = false;\n        }\n        return condition.fields.includes(fieldId) && conditionMet;\n    });\n};\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/types.ts"]}

{"code":"// Filepath: /src/features/dynamic-form/hooks/useDynamicForm.ts\n// src/features/dynamic-form/hooks/useDynamicForm.ts\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { debounce, saveToLocalStorage, flattenConfig, loadFromLocalStorage, } from '../utils';\n/**\n * Custom hook to manage form state and behavior.\n *\n * @param props - The hook props.\n * @returns The `react-hook-form` instance.\n */\nconst useDynamicForm = (props) => {\n    const { formOptions, autoSave, enableLocalStorage, resetOnSubmit, focusFirstError, debounceOnChange, onChange, onFormReady, config, } = props;\n    // Flatten the config to access default values and types easily\n    const flattenedConfig = flattenConfig(config);\n    // Create defaultValues object from flattened config\n    const defaultValues = Object.keys(flattenedConfig).reduce((acc, key) => {\n        if (flattenedConfig[key].defaultValue !== undefined) {\n            acc[key] = flattenedConfig[key].defaultValue;\n        }\n        return acc;\n    }, {});\n    const form = useForm({\n        ...formOptions,\n        defaultValues: defaultValues,\n    });\n    const { formState, reset, setFocus, watch, control } = form;\n    const { isSubmitSuccessful, errors } = formState;\n    // @ts-expect-error\n    const [isLocalStorageLoaded, setIsLocalStorageLoaded] = useState(false);\n    // Auto-save\n    useEffect(() => {\n        let intervalId = null;\n        if (autoSave) {\n            intervalId = setInterval(() => {\n                autoSave.save(watch());\n            }, autoSave.interval);\n        }\n        return () => {\n            if (intervalId)\n                clearInterval(intervalId);\n        };\n    }, [autoSave, watch]);\n    // LocalStorage - Save data\n    // @ts-expect-error\n    useEffect(() => {\n        if (enableLocalStorage) {\n            const subscription = watch((data) => saveToLocalStorage('form-data', data));\n            return () => subscription.unsubscribe();\n        }\n    }, [enableLocalStorage, watch]);\n    // LocalStorage - Load data\n    useEffect(() => {\n        if (enableLocalStorage) {\n            const loadedData = loadFromLocalStorage('form-data');\n            if (loadedData) {\n                const resetData = {};\n                for (const key in flattenedConfig) {\n                    const fieldConfig = flattenedConfig[key];\n                    if (loadedData[key] !== undefined) {\n                        if (fieldConfig.type === 'radio' ||\n                            fieldConfig.type === 'checkbox' ||\n                            fieldConfig.type === 'switch') {\n                            // Convert string to boolean for radio, checkbox, and switch types\n                            resetData[key] =\n                                loadedData[key] === 'true'\n                                    ? true\n                                    : loadedData[key] === 'false'\n                                        ? false\n                                        : loadedData[key];\n                            if (resetData[key] === undefined) {\n                                resetData[key] = fieldConfig.defaultValue;\n                            }\n                        }\n                        else if (fieldConfig.type === 'number') {\n                            // Convert string to number\n                            resetData[key] =\n                                loadedData[key] !== ''\n                                    ? parseFloat(loadedData[key])\n                                    : fieldConfig.defaultValue;\n                        }\n                        else {\n                            resetData[key] = loadedData[key];\n                        }\n                    }\n                }\n                reset(resetData);\n            }\n            setIsLocalStorageLoaded(true);\n        }\n    }, [enableLocalStorage, reset]);\n    // Reset on submit\n    useEffect(() => {\n        if (resetOnSubmit && isSubmitSuccessful) {\n            reset();\n        }\n    }, [resetOnSubmit, isSubmitSuccessful, reset]);\n    // Focus first error\n    useEffect(() => {\n        if (focusFirstError) {\n            const firstErrorKey = Object.keys(errors)[0];\n            if (firstErrorKey) {\n                setFocus(firstErrorKey);\n            }\n        }\n    }, [errors, focusFirstError, setFocus]);\n    // Debounce on change\n    // @ts-expect-error\n    useEffect(() => {\n        if (onChange) {\n            const debouncedOnChange = debounce(onChange, debounceOnChange || 0);\n            const subscription = watch((data) => debouncedOnChange(data));\n            return () => subscription.unsubscribe();\n        }\n    }, [watch, onChange, debounceOnChange]);\n    // onFormReady callback\n    useEffect(() => {\n        if (onFormReady) {\n            onFormReady(form);\n        }\n    }, [form, onFormReady]);\n    return {\n        ...form,\n        control,\n    };\n};\nexport default useDynamicForm;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/utils/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/types.ts"]}

{"code":"// Filepath: /src/features/inputs/components/RadioInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nconst RadioGroup = styled.div `\n  display: flex;\n  gap: 16px;\n`;\nconst RadioLabel = styled.label `\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  cursor: pointer;\n`;\nconst RadioInputStyled = styled.input `\n  appearance: none;\n  width: 16px;\n  height: 16px;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 50%;\n  cursor: pointer;\n  transition:\n    background-color 0.2s,\n    border-color 0.2s;\n\n  &:checked {\n    background-color: ${({ theme }) => theme.colors.primary};\n    border-color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:checked::after {\n    content: '';\n    display: block;\n    width: 8px;\n    height: 8px;\n    background-color: white;\n    border-radius: 50%;\n    margin: 3px auto;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.primary};\n  }\n`;\nconst RadioInput = ({ id, fieldConfig, formClassNameConfig, showInlineError, horizontalLabel, labelWidth, error, }) => {\n    const { label, options } = fieldConfig;\n    const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n    const formClassName = formClassNameConfig || {};\n    const { control } = useFormContext();\n    const { field } = useController({\n        name: id,\n        control,\n        rules: fieldConfig.validation,\n        defaultValue: fieldConfig.defaultValue,\n    });\n    return (React.createElement(InputWrapper, { \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.inputWrapper || formClassName.inputWrapper },\n        label && (React.createElement(Label, { \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.label || formClassName.label },\n            label,\n            fieldConfig.validation?.required && (React.createElement(\"span\", { style: { color: 'red' } }, \"*\")))),\n        React.createElement(RadioGroup, null, options?.map((option) => (React.createElement(RadioLabel, { key: option.value, htmlFor: `${id}-${option.value}` },\n            React.createElement(RadioInputStyled, { ...field, type: \"radio\", id: `${id}-${option.value}`, name: id, value: option.value, checked: field.value === option.value }),\n            option.label)))),\n        showInlineError && error && (React.createElement(ErrorMessage, { className: fieldClassNameConfig.errorMessage || formClassName.errorMessage }, error.message))));\n};\nexport default RadioInput;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/styles.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/styled-components/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/inputs/types.ts"]}

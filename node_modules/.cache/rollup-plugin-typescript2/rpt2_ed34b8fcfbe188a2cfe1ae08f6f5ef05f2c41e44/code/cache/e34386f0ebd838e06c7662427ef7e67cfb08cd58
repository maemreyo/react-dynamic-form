{"code":"/**\n * Flattens a nested object into a single-level object.\n *\n * @param obj - The object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened object.\n * @returns The flattened object.\n */\nexport const flattenObject = (obj, parentKey = '', result = {}) => {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            const newKey = parentKey ? `${parentKey}.${key}` : key;\n            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n                flattenObject(obj[key], newKey, result);\n            }\n            else {\n                result[newKey] = obj[key];\n            }\n        }\n    }\n    return result;\n};\n/**\n * Flattens a nested config object into a single-level object.\n *\n * @param config - The config object to flatten.\n * @param parentKey - The parent key (used for recursion).\n * @param result - The resulting flattened config object.\n * @returns The flattened config object.\n */\nexport const flattenConfig = (config, parentKey = '', result = {}) => {\n    for (const key in config) {\n        if (Object.prototype.hasOwnProperty.call(config, key)) {\n            const newKey = parentKey ? `${parentKey}.${key}` : key;\n            const fieldConfig = config[key];\n            if (fieldConfig.fields) {\n                flattenConfig(fieldConfig.fields, newKey, result);\n            }\n            else {\n                result[newKey] = fieldConfig;\n            }\n        }\n    }\n    return result;\n};\n/**\n * Debounces a function.\n *\n * @param func - The function to debounce.\n * @param wait - The debounce time in milliseconds.\n * @returns The debounced function.\n */\nexport const debounce = (func, wait) => {\n    let timeout;\n    return function (...args) {\n        const later = () => {\n            timeout = null;\n            func(...args);\n        };\n        if (timeout)\n            clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n};\n/**\n * Saves data to localStorage.\n *\n * @param key - The key to store the data under.\n * @param data - The data to store.\n */\nexport const saveToLocalStorage = (key, data) => {\n    localStorage.setItem(key, JSON.stringify(data));\n};\n/**\n * Loads data from localStorage.\n *\n * @param key - The key to load the data from.\n * @returns The loaded data, or null if no data is found.\n */\nexport const loadFromLocalStorage = (key) => {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n};\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/types.ts"]}

{"code":"// src/features/dynamic-form/hooks/useRHFOptions.ts\nimport { useMemo } from 'react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { createValidationSchema } from '../../validation';\nconst useRHFOptions = (config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur) => {\n    // Specify the generic type here\n    return useMemo(() => {\n        const schema = createValidationSchema(config);\n        const resolver = yupResolver(schema);\n        return {\n            ...formOptions,\n            mode: validateOnSubmit\n                ? 'onSubmit'\n                : validateOnChange\n                    ? 'onChange'\n                    : validateOnBlur\n                        ? 'onBlur'\n                        : 'onSubmit',\n            criteriaMode: 'all',\n            resolver,\n        };\n    }, [config, formOptions, validateOnSubmit, validateOnChange, validateOnBlur]);\n};\nexport default useRHFOptions;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@hookform/resolvers/yup/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/validation/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/types.ts"]}

{"code":"// Filepath: /src/features/validation/ValidationSchemaRegistry.ts\nimport * as yup from 'yup';\n// Create a map of input types to Yup schema\n// @ts-expect-error\nconst validationSchemaRegistry = {\n    text: yup.string(),\n    email: yup.string().email('Invalid email format'),\n    password: yup.string(),\n    tel: yup.string(),\n    url: yup.string().url('Invalid URL format'),\n    checkbox: yup.boolean(),\n    textarea: yup.string(),\n    select: yup.string(),\n    radio: yup.boolean(),\n    date: yup.date(),\n    number: yup.number(),\n    switch: yup.boolean(),\n    time: yup.string(),\n    'datetime-local': yup.string(),\n    combobox: yup.string(),\n};\n/**\n * Registers a new validation schema for a given type.\n *\n * @param type - The input type to register.\n * @param schema - The Yup schema to register.\n */\nexport const registerValidationSchema = (type, schema) => {\n    validationSchemaRegistry[type] = schema;\n};\n/**\n * Retrieves the validation schema registered for a given input type.\n *\n * @param type - The input type to retrieve the schema for.\n * @returns The registered schema, or undefined if no schema is registered for the type.\n */\nexport const getValidationSchema = (type) => {\n    return validationSchemaRegistry[type];\n};\n//# sourceMappingURL=ValidationSchemaRegistry.js.map","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/yup/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts"],"map":"{\"version\":3,\"file\":\"ValidationSchemaRegistry.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/features/validation/ValidationSchemaRegistry.ts\"],\"names\":[],\"mappings\":\"AAAA,iEAAiE;AAEjE,OAAO,KAAK,GAAG,MAAM,KAAK,CAAC;AAG3B,4CAA4C;AAC5C,mBAAmB;AACnB,MAAM,wBAAwB,GAAiD;IAC7E,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE;IAClB,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC;IACjD,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE;IACtB,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE;IACjB,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,oBAAoB,CAAC;IAC3C,QAAQ,EAAE,GAAG,CAAC,OAAO,EAAE;IACvB,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE;IACtB,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;IACpB,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE;IACpB,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE;IAChB,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;IACpB,MAAM,EAAE,GAAG,CAAC,OAAO,EAAE;IACrB,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE;IAClB,gBAAgB,EAAE,GAAG,CAAC,MAAM,EAAE;IAC9B,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE;CACvB,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,IAAe,EACf,MAAqB,EACrB,EAAE;IACF,wBAAwB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAC1C,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,IAAe,EACY,EAAE;IAC7B,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAC;AACxC,CAAC,CAAC\"}","dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/validation/ValidationSchemaRegistry.d.ts","writeByteOrderMark":false,"text":"import * as yup from 'yup';\nimport { InputType } from '../dynamic-form';\n/**\n * Registers a new validation schema for a given type.\n *\n * @param type - The input type to register.\n * @param schema - The Yup schema to register.\n */\nexport declare const registerValidationSchema: (type: InputType, schema: yup.AnySchema) => void;\n/**\n * Retrieves the validation schema registered for a given input type.\n *\n * @param type - The input type to retrieve the schema for.\n * @returns The registered schema, or undefined if no schema is registered for the type.\n */\nexport declare const getValidationSchema: (type: InputType) => yup.AnySchema | undefined;\n"}}

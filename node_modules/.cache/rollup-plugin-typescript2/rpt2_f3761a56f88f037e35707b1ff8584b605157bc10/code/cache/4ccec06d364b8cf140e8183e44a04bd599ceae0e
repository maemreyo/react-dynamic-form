{"code":"// Filepath: /src/features/validation/validationSchema.ts\nimport * as yup from 'yup';\nimport { getValidationSchema } from './ValidationSchemaRegistry';\n/**\n * Handles the 'required' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'required' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleRequired = (fieldSchema, ruleValue, validationMessages) => {\n    const requiredMessage = typeof ruleValue === 'object'\n        ? ruleValue.message\n        : validationMessages?.required || 'This field is required';\n    return fieldSchema.required(requiredMessage);\n};\n/**\n * Handles the 'minLength' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'minLength' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMinLength = (fieldSchema, ruleValue, validationMessages) => {\n    if (typeof ruleValue === 'number' ||\n        typeof ruleValue === 'string' ||\n        typeof ruleValue?.value === 'number' ||\n        typeof ruleValue?.value === 'string') {\n        const value = typeof ruleValue === 'number' || typeof ruleValue === 'string'\n            ? ruleValue\n            : ruleValue.value;\n        const message = ruleValue.message ||\n            validationMessages?.minLength?.replace('{value}', value.toString()) ||\n            `minLength should be ${value}`;\n        return fieldSchema.min(value, message);\n    }\n    return fieldSchema;\n};\n/**\n * Handles the 'maxLength' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'maxLength' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMaxLength = (fieldSchema, ruleValue, validationMessages) => {\n    if (typeof ruleValue === 'number' ||\n        typeof ruleValue === 'string' ||\n        typeof ruleValue?.value === 'number' ||\n        typeof ruleValue?.value === 'string') {\n        const value = typeof ruleValue === 'number' || typeof ruleValue === 'string'\n            ? ruleValue\n            : ruleValue.value;\n        const message = ruleValue.message ||\n            validationMessages?.maxLength?.replace('{value}', value.toString()) ||\n            `maxLength should be ${value}`;\n        return fieldSchema.max(value, message);\n    }\n    return fieldSchema;\n};\n/**\n * Handles the 'min' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'min' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMin = (fieldSchema, ruleValue, validationMessages) => {\n    if (typeof ruleValue === 'number' ||\n        typeof ruleValue === 'string' ||\n        typeof ruleValue?.value === 'number' ||\n        typeof ruleValue?.value === 'string') {\n        const value = typeof ruleValue === 'number' || typeof ruleValue === 'string'\n            ? ruleValue\n            : ruleValue.value;\n        const message = ruleValue.message ||\n            validationMessages?.min?.replace('{value}', value.toString()) ||\n            `min should be ${value}`;\n        return fieldSchema.min(value, message);\n    }\n    return fieldSchema;\n};\n/**\n * Handles the 'max' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'max' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handleMax = (fieldSchema, ruleValue, validationMessages) => {\n    if (typeof ruleValue === 'number' ||\n        typeof ruleValue === 'string' ||\n        typeof ruleValue?.value === 'number' ||\n        typeof ruleValue?.value === 'string') {\n        const value = typeof ruleValue === 'number' || typeof ruleValue === 'string'\n            ? ruleValue\n            : ruleValue.value;\n        const message = ruleValue.message ||\n            validationMessages?.max?.replace('{value}', value.toString()) ||\n            `max should be ${value}`;\n        return fieldSchema.max(value, message);\n    }\n    return fieldSchema;\n};\n/**\n * Handles the 'pattern' validation rule.\n *\n * @param fieldSchema - The current field schema.\n * @param ruleValue - The value of the 'pattern' rule.\n * @param validationMessages - The validation messages.\n * @returns The updated field schema.\n */\nconst handlePattern = (fieldSchema, ruleValue, validationMessages) => {\n    const regex = ruleValue instanceof RegExp ? ruleValue : new RegExp(ruleValue.value);\n    const message = ruleValue.message || validationMessages?.pattern || 'Invalid format';\n    return fieldSchema.matches(regex, { message, excludeEmptyString: true });\n};\n/**\n * Applies a custom validation function to the field schema.\n *\n * @param fieldSchema - The current field schema.\n * @param validate - The custom validation function.\n * @returns The updated field schema.\n */\nconst applyCustomValidation = (fieldSchema, validate) => {\n    return fieldSchema.test('custom-validation', 'Custom validation failed', async (value, context) => {\n        const result = await validate(value, context.parent);\n        if (typeof result === 'string') {\n            return context.createError({\n                path: context.path,\n                message: result,\n            });\n        }\n        return result !== false;\n    });\n};\n/**\n * Creates a Yup validation schema based on the provided form configuration.\n *\n * @param config - The form configuration.\n * @returns The Yup schema.\n */\nexport const createValidationSchema = (config) => {\n    const shape = {};\n    const validationHandlers = {\n        required: handleRequired,\n        minLength: (fieldSchema, ruleValue, validationMessages) => handleMinLength(fieldSchema, ruleValue, validationMessages),\n        maxLength: (fieldSchema, ruleValue, validationMessages) => handleMaxLength(fieldSchema, ruleValue, validationMessages),\n        min: (fieldSchema, ruleValue, validationMessages) => handleMin(fieldSchema, ruleValue, validationMessages),\n        max: (fieldSchema, ruleValue, validationMessages) => handleMax(fieldSchema, ruleValue, validationMessages),\n        pattern: (fieldSchema, ruleValue, validationMessages) => handlePattern(fieldSchema, ruleValue, validationMessages),\n    };\n    for (const fieldId in config) {\n        const fieldConfig = config[fieldId];\n        const { validation, type, validationMessages } = fieldConfig;\n        if (type === undefined) {\n            console.warn(`Field type is undefined for field: ${fieldId}`);\n        }\n        let fieldSchema = getValidationSchema(type) || yup.mixed();\n        if (validation) {\n            const { validate, ...otherValidations } = validation;\n            for (const rule in otherValidations) {\n                if (otherValidations.hasOwnProperty(rule)) {\n                    const ruleValue = validation[rule];\n                    const handler = validationHandlers[rule];\n                    if (handler) {\n                        fieldSchema = handler(fieldSchema, ruleValue, validationMessages);\n                    }\n                }\n            }\n            if (typeof validate === 'function') {\n                fieldSchema = applyCustomValidation(fieldSchema, validate);\n            }\n        }\n        shape[fieldId] = fieldSchema;\n    }\n    return yup.object().shape(shape);\n};\n//# sourceMappingURL=validationSchema.js.map","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/yup/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/validation/ValidationSchemaRegistry.ts"],"map":"{\"version\":3,\"file\":\"validationSchema.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/features/validation/validationSchema.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/validation/validationSchema.d.ts","writeByteOrderMark":false,"text":"import * as yup from 'yup';\nimport { FormConfig } from '../dynamic-form';\n/**\n * Creates a Yup validation schema based on the provided form configuration.\n *\n * @param config - The form configuration.\n * @returns The Yup schema.\n */\nexport declare const createValidationSchema: (config: FormConfig) => yup.ObjectSchema<{\n    [x: string]: never;\n}, yup.AnyObject, {\n    [x: string]: any;\n}, \"\">;\n"}}

{"code":"import React from 'react';\nimport styled from 'styled-components';\nconst ErrorMessage = styled.div `\n  color: ${({ theme }) => theme.colors.error};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  margin-top: ${({ theme }) => theme.space.xs};\n`;\nconst ErrorRenderer = ({ error, formClassNameConfig, fieldConfig, // Receive fieldConfig\n }) => {\n    let message = error.message || '';\n    // Use validationMessages from fieldConfig if available\n    if (fieldConfig && fieldConfig.validationMessages) {\n        const template = fieldConfig.validationMessages[error.type];\n        const values = {\n            label: fieldConfig.label,\n            value: error,\n            error: error,\n            config: fieldConfig,\n        };\n        if (typeof template === 'function') {\n            message = template(values);\n        }\n        else if (typeof template === 'string') {\n            message = template;\n        }\n    }\n    return (React.createElement(ErrorMessage, { className: formClassNameConfig?.errorMessage }, message));\n};\nexport default ErrorRenderer;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/styled-components/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/components/ErrorRenderer.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { FieldError, FieldConfig } from '../features/dynamic-form';\ninterface ErrorRendererProps {\n    error: FieldError;\n    formClassNameConfig?: any;\n    fieldConfig?: FieldConfig;\n}\ndeclare const ErrorRenderer: React.FC<ErrorRendererProps>;\nexport default ErrorRenderer;\n"}}

{"code":"// src/features/inputs/components/NumberInput.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nconst NumberInputContainer = styled.div `\n  display: flex;\n  align-items: center;\n  width: fit-content;\n\n  input {\n    text-align: center;\n    padding-right: 0;\n    width: 100px;\n  }\n`;\nconst SpinButton = styled.button `\n  background: none;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 0 8px;\n  height: 100%;\n  font-size: 1rem;\n  line-height: 0;\n  color: ${({ theme }) => theme.colors.text};\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n  }\n  &:disabled {\n    cursor: default;\n    background-color: #efefef;\n  }\n  &:first-of-type {\n    border-radius: 4px 0 0 4px;\n    border-right: none;\n  }\n\n  &:last-of-type {\n    border-radius: 0 4px 4px 0;\n    border-left: none;\n  }\n`;\nconst NumberInput = ({ id, fieldConfig, formClassNameConfig, disableAutocomplete, showInlineError, horizontalLabel, labelWidth, error, }) => {\n    const { label } = fieldConfig;\n    const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n    const formClassName = formClassNameConfig || {};\n    const { control } = useFormContext();\n    const { field } = useController({\n        name: id,\n        control,\n        rules: fieldConfig.validation,\n        defaultValue: fieldConfig.defaultValue,\n    });\n    const [internalValue, setInternalValue] = useState(+field.value || 0);\n    const clampValue = useCallback((value) => {\n        const { min, max } = fieldConfig.validation || {};\n        let clampedValue = value;\n        if (min !== undefined && typeof min === 'object' && value < +min.value) {\n            clampedValue = +min.value;\n        }\n        if (max !== undefined && typeof max === 'object' && value > +max.value) {\n            clampedValue = +max.value;\n        }\n        return clampedValue;\n    }, [fieldConfig.validation]);\n    useEffect(() => {\n        setInternalValue(+field.value || 0);\n    }, [field.value]);\n    const handleIncrement = () => {\n        const newValue = clampValue(internalValue + 1);\n        setInternalValue(newValue);\n        field.onChange(newValue);\n    };\n    const handleDecrement = () => {\n        const newValue = clampValue(internalValue - 1);\n        setInternalValue(newValue);\n        field.onChange(newValue);\n    };\n    return (React.createElement(InputWrapper, { \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.inputWrapper || formClassName.inputWrapper },\n        label && (React.createElement(Label, { htmlFor: id, \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.label || formClassName.label },\n            label,\n            fieldConfig.validation?.required && (React.createElement(\"span\", { style: { color: 'red' } }, \"*\")))),\n        React.createElement(NumberInputContainer, null,\n            React.createElement(SpinButton, { type: \"button\", onClick: handleDecrement, disabled: fieldConfig.validation?.min !== undefined &&\n                    typeof fieldConfig.validation.min === 'object' &&\n                    internalValue <= +fieldConfig.validation.min.value }, \"-\"),\n            React.createElement(Input, { ...field, className: fieldClassNameConfig.input || formClassName.input, type: \"number\", id: id, onChange: (e) => {\n                    field.onChange(e);\n                    setInternalValue(+e.target.value);\n                }, onBlur: (e) => {\n                    field.onBlur();\n                    const clampedValue = clampValue(+e.target.value);\n                    setInternalValue(clampedValue);\n                    field.onChange(clampedValue);\n                }, value: internalValue, autoComplete: disableAutocomplete ? 'off' : undefined }),\n            React.createElement(SpinButton, { type: \"button\", onClick: handleIncrement, disabled: fieldConfig.validation?.max !== undefined &&\n                    typeof fieldConfig.validation.max === 'object' &&\n                    internalValue >= +fieldConfig.validation.max.value }, \"+\")),\n        showInlineError && error && (React.createElement(ErrorMessage, { className: fieldClassNameConfig.errorMessage || formClassName.errorMessage }, error.message))));\n};\nexport default NumberInput;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/styles.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/styled-components/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/inputs/types.ts"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/inputs/components/NumberInput.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { CommonInputProps } from '../types';\ninterface NumberInputProps extends CommonInputProps {\n}\ndeclare const NumberInput: React.FC<NumberInputProps>;\nexport default NumberInput;\n"}}

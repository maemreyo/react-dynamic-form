{"code":"// Filepath: /src/features/form-renderer/components/FormContent.tsx\nimport React, { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { InputWrapper } from '../../../styles';\nimport InputRenderer from '../../inputs/components/InputRenderer';\nconst FormContent = ({ fieldsToRender, fields, config, formClassNameConfig, horizontalLabel, labelWidth, disableAutocomplete, showInlineError, renderInput, \n// @ts-expect-error\nconditionalFieldsConfig, \n// @ts-expect-error\ncustomInputs, }) => {\n    const { register, unregister, formState: { errors }, } = useFormContext();\n    useEffect(() => {\n        fields.forEach((field) => {\n            const fieldConfig = config[field.id] || {};\n            if (fieldsToRender.includes(field.id)) {\n                register(field.id, fieldConfig.validation);\n            }\n            else {\n                unregister(field.id);\n            }\n        });\n    }, [register, unregister, config]);\n    return (React.createElement(React.Fragment, null, fields\n        .filter((field) => fieldsToRender.includes(field.id))\n        .map((field) => {\n        // Access the nested error object correctly\n        const fieldError = errors[field.id];\n        const fieldConfig = config[field.id] || {};\n        const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n        const formClassName = formClassNameConfig || {};\n        const commonInputProps = {\n            id: field.id,\n            fieldConfig,\n            formClassNameConfig,\n            showInlineError,\n            horizontalLabel,\n            labelWidth,\n            error: fieldError,\n            disableAutocomplete,\n        };\n        const inputElement = renderInput ? (renderInput(field, fieldConfig, commonInputProps)) : (React.createElement(InputRenderer, { field: field, config: config, \n            // @ts-expect-error\n            formClassNameConfig: formClassNameConfig, disableAutocomplete: disableAutocomplete, showInlineError: showInlineError, horizontalLabel: horizontalLabel, labelWidth: labelWidth, customInputs: customInputs }));\n        return (React.createElement(InputWrapper, { key: field.id, \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.inputWrapper || formClassName.inputWrapper }, inputElement));\n    })));\n};\nexport default FormContent;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/types.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/styles.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/form-renderer/types.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/inputs/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/inputs/components/InputRenderer.tsx"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/form-renderer/components/FormContent.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { FormContentProps } from '../types';\ndeclare const FormContent: React.FC<FormContentProps>;\nexport default FormContent;\n"}}

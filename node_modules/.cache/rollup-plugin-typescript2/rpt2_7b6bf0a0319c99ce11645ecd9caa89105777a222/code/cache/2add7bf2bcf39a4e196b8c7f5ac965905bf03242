{"code":"export {};\n/**\n * Extended DynamicFormProps with render props.\n */\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/yup/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/styles.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/inputs/types.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/form-renderer/index.ts"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/dynamic-form/types.d.ts","writeByteOrderMark":false,"text":"import { UseFormProps, UseFormReturn, FieldValues, RegisterOptions, FieldPath, SubmitHandler } from 'react-hook-form';\nimport { Message, Schema } from 'yup';\nimport { FormContainerProps, InputWrapperProps, LabelProps } from '../../styles';\nimport { CommonInputProps, CustomInputProps } from '../inputs/types';\nimport { FormContentProps } from '../form-renderer';\nexport type LayoutType = 'flex' | 'grid';\nexport type InputComponentMap = {\n    [key: string]: React.ComponentType<CustomInputProps>;\n};\nexport interface DynamicFormProps {\n    config: FormConfig;\n    onChange?: (formData: FormValues) => void;\n    onSubmit?: SubmitHandler<FieldValues>;\n    formOptions?: UseFormProps;\n    validationSchema?: Schema<any>;\n    header?: React.ReactNode;\n    footer?: React.ReactNode;\n    readOnly?: boolean;\n    disableForm?: boolean;\n    showSubmitButton?: boolean;\n    autoSave?: {\n        interval: number;\n        save: (data: Record<string, any>) => void;\n    };\n    resetOnSubmit?: boolean;\n    focusFirstError?: boolean;\n    layout?: LayoutType;\n    layoutConfig?: any;\n    horizontalLabel?: boolean;\n    labelWidth?: string | number;\n    enableLocalStorage?: boolean;\n    debounceOnChange?: number;\n    disableAutocomplete?: boolean;\n    showInlineError?: boolean;\n    showErrorSummary?: boolean;\n    validateOnBlur?: boolean;\n    validateOnChange?: boolean;\n    validateOnSubmit?: boolean;\n    className?: string;\n    formClassNameConfig?: FormClassNameConfig;\n    style?: React.CSSProperties;\n    theme?: any;\n    onFormReady?: (form: UseFormReturn<any>) => void;\n    renderSubmitButton?: RenderSubmitButtonProps;\n    renderFormContent?: RenderFormContentProps;\n    renderFormFooter?: RenderFormFooterProps;\n    customValidators?: {\n        [key: string]: (value: any, context: any) => string | undefined;\n    };\n    customInputs?: InputComponentMap;\n}\nexport interface FormClassNameConfig {\n    formContainer?: string;\n    inputWrapper?: string;\n    label?: string;\n    input?: string;\n    button?: string;\n    errorMessage?: string;\n}\nexport interface FieldClassNameConfig {\n    inputWrapper?: string;\n    label?: string;\n    input?: string;\n    errorMessage?: string;\n}\nexport interface FormConfig {\n    [key: string]: FieldConfig;\n}\n/**\n * Represents a custom validation function.\n *\n * @template TFieldValue - The type of the field value.\n * @template TFormValues - The type of the form values.\n *\n * @param value - The value of the field being validated.\n * @param formValues - The values of all fields in the form.\n * @returns - A string representing the error message if validation fails, or `undefined` if validation passes.\n */\nexport type CustomValidator<TFieldValue = any, TFormValues extends FieldValues = FormValues> = (value: TFieldValue, formValues: TFormValues) => string | undefined | Promise<string | undefined>;\n/**\n * Validation configuration for a field.\n */\nexport type ValidationValue<T> = T | {\n    value: T;\n    message: string;\n};\nexport interface ValidationConfig {\n    required?: ValidationValue<boolean>;\n    minLength?: ValidationValue<number>;\n    maxLength?: ValidationValue<number>;\n    min?: ValidationValue<number | string>;\n    max?: ValidationValue<number | string>;\n    pattern?: ValidationValue<RegExp>;\n    validate?: (value: any, formValues: FormValues) => string | undefined | Promise<string | undefined>;\n    requiredMessage?: string;\n}\n/**\n * Custom error message template\n */\nexport type ErrorMessageTemplate = Message | ((values: {\n    label?: string;\n    value: any;\n    error: FieldError;\n    config: FieldConfig;\n}) => string);\n/**\n * Validation messages for a field.\n */\nexport interface ValidationMessages {\n    [key: string]: ErrorMessageTemplate;\n}\nexport interface FieldConfig {\n    type?: InputType;\n    label?: string;\n    placeholder?: string;\n    validation?: ValidationConfig;\n    component?: React.ComponentType<any>;\n    style?: React.CSSProperties;\n    readOnly?: boolean;\n    clearable?: boolean;\n    showCounter?: boolean;\n    copyToClipboard?: boolean;\n    tooltip?: string;\n    classNameConfig?: FieldClassNameConfig;\n    options?: {\n        value: string;\n        label: string;\n    }[];\n    conditional?: Condition;\n    fields?: FormConfig;\n    validationMessages?: ValidationMessages;\n    defaultValue?: any;\n}\nexport type InputType = 'text' | 'number' | 'checkbox' | 'select' | 'textarea' | 'email' | 'password' | 'tel' | 'url' | 'radio' | 'date' | 'switch' | 'time' | 'datetime-local' | 'combobox' | 'custom';\nexport type UseFormRegister<TFieldValues extends FieldValues = FieldValues> = (name: FieldPath<TFieldValues>, options?: RegisterOptions<TFieldValues, FieldPath<TFieldValues>>) => any;\nexport interface FormField {\n    label?: string;\n    id: string;\n    type: InputType;\n    error?: FieldError;\n}\nexport interface FieldError {\n    type: string;\n    message?: string;\n}\nexport type FormValues = Record<string, any>;\nexport { FormContainerProps, InputWrapperProps, LabelProps };\n/**\n * Represents a comparison operator used in conditional rendering.\n */\nexport type ComparisonOperator = 'is' | 'isNot' | 'greaterThan' | 'lessThan' | 'greaterThanOrEqual' | 'lessThanOrEqual' | 'contains' | 'startsWith' | 'endsWith' | 'custom';\n/**\n * Represents a function that takes a value and returns a boolean indicating whether the condition is met.\n */\nexport type ComparatorFunction = (value: any) => boolean;\n/**\n * Represents a condition for conditional rendering.\n */\nexport interface Condition {\n    when: string;\n    operator: ComparisonOperator;\n    value?: any;\n    comparator?: ComparatorFunction;\n    fields: string[];\n}\n/**\n * Props for renderSubmitButton in DynamicFormProps.\n */\nexport type RenderSubmitButtonProps = (handleSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>, isSubmitting: boolean) => React.ReactNode;\n/**\n * Props for renderFormContent in FormRendererProps.\n */\nexport type RenderFormContentProps = (props: Omit<FormContentProps, 'renderInput'> & {\n    renderInput: RenderInputProps;\n}) => React.ReactNode;\n/**\n * Props for renderInput in FormContentProps.\n */\nexport type RenderInputProps = (field: FormField, fieldConfig: FieldConfig, commonInputProps: CommonInputProps) => React.ReactNode;\n/**\n * Props for renderLabel in InputWrapperProps.\n */\nexport type RenderLabelProps = (fieldConfig: FieldConfig, commonInputProps: CommonInputProps) => React.ReactNode;\n/**\n * Props for renderErrorMessage in InputWrapperProps.\n */\nexport type RenderErrorMessageProps = (error: FieldError | undefined, formClassNameConfig: FormClassNameConfig | undefined) => React.ReactNode;\n/**\n * Type for field errors.\n */\nexport type FieldErrors = Partial<Record<string, FieldError>>;\n/**\n * Props for renderFormFooter in FormRendererProps.\n */\nexport type RenderFormFooterProps = (props: {\n    footer?: React.ReactNode;\n    showSubmitButton: boolean;\n    renderSubmitButton: RenderSubmitButtonProps;\n    isSubmitting: boolean;\n    showErrorSummary: boolean;\n    errors: FieldErrors;\n    formClassNameConfig?: FormClassNameConfig;\n}) => React.ReactNode;\n/**\n * Extended DynamicFormProps with render props.\n */\n"}}

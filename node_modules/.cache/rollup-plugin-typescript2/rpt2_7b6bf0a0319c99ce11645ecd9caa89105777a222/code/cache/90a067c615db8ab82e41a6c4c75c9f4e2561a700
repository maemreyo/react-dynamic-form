{"code":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Input, Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nconst ComboBoxContainer = styled.div `\n  position: relative;\n  width: 100%;\n`;\nconst DropdownList = styled.ul `\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 4px;\n  background-color: white;\n  z-index: 10;\n  list-style: none;\n  padding: 0;\n  margin: 4px 0 0 0;\n  max-height: 200px;\n  overflow-y: auto;\n`;\nconst DropdownItem = styled.li `\n  padding: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n  }\n\n  &.selected {\n    background-color: ${({ theme }) => theme.colors.primary};\n    color: white;\n  }\n`;\nconst ComboBox = ({ id, fieldConfig, formClassNameConfig, showInlineError, horizontalLabel, labelWidth, error, }) => {\n    const { label, options } = fieldConfig;\n    const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n    const formClassName = formClassNameConfig || {};\n    const [isOpen, setIsOpen] = useState(false);\n    const [inputValue, setInputValue] = useState('');\n    const [highlightedIndex, setHighlightedIndex] = useState(-1);\n    const containerRef = useRef(null);\n    const { control } = useFormContext();\n    const { field } = useController({\n        name: id,\n        control,\n        rules: fieldConfig.validation,\n    });\n    useEffect(() => {\n        setInputValue(field.value || '');\n    }, [field.value]);\n    const filteredOptions = options\n        ? options.filter((option) => option.label.toLowerCase().includes(inputValue.toLowerCase()))\n        : [];\n    const handleInputChange = (event) => {\n        const val = event.target.value;\n        setInputValue(val);\n        field.onChange(event); // Update form state\n        if (!isOpen && val) {\n            setIsOpen(true);\n        }\n        else if (isOpen && !val) {\n            setIsOpen(false);\n        }\n    };\n    const handleOptionClick = (value) => {\n        setInputValue(value);\n        field.onChange(value); // Update form state\n        setIsOpen(false);\n    };\n    const toggleDropdown = () => {\n        setIsOpen(!isOpen);\n    };\n    const closeDropdown = useCallback(() => {\n        setIsOpen(false);\n    }, []);\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (containerRef.current &&\n                !containerRef.current.contains(event.target)) {\n                closeDropdown();\n            }\n        };\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    }, [closeDropdown]);\n    const handleKeyDown = (event) => {\n        if (event.key === 'ArrowDown') {\n            event.preventDefault();\n            setHighlightedIndex((prevIndex) => filteredOptions.length > 0\n                ? Math.min(prevIndex + 1, filteredOptions.length - 1)\n                : -1);\n        }\n        else if (event.key === 'ArrowUp') {\n            event.preventDefault();\n            setHighlightedIndex((prevIndex) => prevIndex > 0 ? prevIndex - 1 : filteredOptions.length - 1);\n        }\n        else if (event.key === 'Enter') {\n            event.preventDefault();\n            if (highlightedIndex >= 0) {\n                const selectedValue = filteredOptions[highlightedIndex].value;\n                setInputValue(selectedValue);\n                field.onChange(selectedValue); // Update form state\n                setIsOpen(false);\n            }\n        }\n        else if (event.key === 'Escape') {\n            event.preventDefault();\n            setIsOpen(false);\n        }\n    };\n    useEffect(() => {\n        if (isOpen && highlightedIndex >= 0 && containerRef.current) {\n            const item = containerRef.current.querySelector(`li:nth-child(${highlightedIndex + 1})`);\n            if (item) {\n                item.scrollIntoView({ block: 'nearest', inline: 'start' });\n            }\n        }\n    }, [isOpen, highlightedIndex]);\n    return (React.createElement(InputWrapper, { \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.inputWrapper || formClassName.inputWrapper },\n        label && (React.createElement(Label, { htmlFor: id, \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.label || formClassName.label },\n            label,\n            fieldConfig.validation?.required && (React.createElement(\"span\", { style: { color: 'red' } }, \"*\")))),\n        React.createElement(ComboBoxContainer, { ref: containerRef },\n            React.createElement(Input, { ...field, className: fieldClassNameConfig.input || formClassName.input, id: id, value: inputValue, onChange: handleInputChange, onClick: toggleDropdown, onKeyDown: handleKeyDown, autoComplete: \"off\" }),\n            isOpen && (React.createElement(DropdownList, null, filteredOptions.length > 0 ? (filteredOptions.map((option, index) => (React.createElement(DropdownItem, { key: option.value, onClick: () => handleOptionClick(option.value), className: index === highlightedIndex ? 'selected' : '' }, option.label)))) : (React.createElement(DropdownItem, null, \"No results found\"))))),\n        showInlineError && error && (React.createElement(ErrorMessage, { className: fieldClassNameConfig.errorMessage || formClassName.errorMessage }, error.message))));\n};\nexport default ComboBox;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/styles.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/styled-components/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/inputs/components/ComboBox.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { FieldConfig, FormClassNameConfig, FieldError } from '../../dynamic-form';\ninterface ComboBoxProps {\n    id: string;\n    fieldConfig: FieldConfig;\n    formClassNameConfig?: FormClassNameConfig;\n    showInlineError?: boolean;\n    horizontalLabel?: boolean;\n    labelWidth?: string | number;\n    error?: FieldError;\n}\ndeclare const ComboBox: React.FC<ComboBoxProps>;\nexport default ComboBox;\n"}}

{"code":"import { getInputTypeFromValue } from '../../inputs/utils';\nimport { getErrorMessage } from './validationUtils';\nimport { get } from 'react-hook-form';\n/**\n * Generates the form fields array based on the flattened config and form state.\n *\n * @param flattenedConfig - The flattened form configuration.\n * @param formState - The `react-hook-form` form state.\n * @returns The form fields array.\n */\nexport const getFields = (flattenedConfig, formState) => {\n    return Object.entries(flattenedConfig).map(([key, fieldConfig]) => {\n        // Retrieve the default value from fieldConfig\n        const defaultValue = fieldConfig.defaultValue;\n        const inputType = fieldConfig.type || getInputTypeFromValue(defaultValue);\n        const fieldError = get(formState.errors, key);\n        const errorMessage = getErrorMessage(fieldConfig, fieldError, {});\n        return {\n            label: fieldConfig.label,\n            id: key,\n            type: inputType,\n            error: errorMessage\n                ? {\n                    ...fieldError,\n                    message: errorMessage,\n                    type: fieldError?.type || '',\n                } // Merge errorMessage into fieldError and ensure type is always defined\n                : fieldError, // Use the unwrapped fieldError\n        };\n    });\n};\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/types.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/inputs/utils.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/utils/validationUtils.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/dynamic-form/utils/fieldUtils.d.ts","writeByteOrderMark":false,"text":"import { FormField, FormValues } from '../types';\nimport { FormState } from 'react-hook-form';\n/**\n * Generates the form fields array based on the flattened config and form state.\n *\n * @param flattenedConfig - The flattened form configuration.\n * @param formState - The `react-hook-form` form state.\n * @returns The form fields array.\n */\nexport declare const getFields: (flattenedConfig: any, formState: FormState<FormValues>) => FormField[];\n"}}

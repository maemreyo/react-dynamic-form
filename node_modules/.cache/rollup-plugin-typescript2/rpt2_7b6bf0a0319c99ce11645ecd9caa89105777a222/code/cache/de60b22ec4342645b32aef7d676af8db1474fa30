{"code":"// src/features/inputs/components/TextareaInput.tsx\nimport React from 'react';\nimport { Label, ErrorMessage, InputWrapper } from '../../../styles';\nimport styled from 'styled-components';\nimport { useFormContext, useController } from 'react-hook-form';\nconst StyledTextarea = styled.textarea `\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  padding: 8px;\n  border-radius: 4px;\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.primary};\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text};\n    opacity: 0.6;\n  }\n  width: 100%;\n  min-height: 100px;\n`;\nconst TextareaInput = ({ id, fieldConfig, formClassNameConfig, disableAutocomplete, showInlineError, horizontalLabel, labelWidth, error, }) => {\n    const { label } = fieldConfig;\n    const fieldClassNameConfig = fieldConfig.classNameConfig || {};\n    const formClassName = formClassNameConfig || {};\n    const { control } = useFormContext();\n    const { field } = useController({\n        name: id,\n        control,\n        rules: fieldConfig.validation,\n        defaultValue: fieldConfig.defaultValue,\n    });\n    return (React.createElement(InputWrapper, { \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.inputWrapper || formClassName.inputWrapper },\n        label && (React.createElement(Label, { htmlFor: id, \"$horizontalLabel\": horizontalLabel, \"$labelWidth\": labelWidth, className: fieldClassNameConfig.label || formClassName.label },\n            label,\n            fieldConfig.validation?.required && (React.createElement(\"span\", { style: { color: 'red' } }, \"*\")))),\n        React.createElement(StyledTextarea, { ...field, className: fieldClassNameConfig.input || formClassName.input, id: id, autoComplete: disableAutocomplete ? 'off' : undefined }),\n        showInlineError && error && (React.createElement(ErrorMessage, { className: fieldClassNameConfig.errorMessage || formClassName.errorMessage }, error.message))));\n};\nexport default TextareaInput;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/styles.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/index.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/styled-components/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/inputs/types.ts"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/inputs/components/TextareaInput.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { CommonInputProps } from '../types';\ninterface TextareaInputProps extends CommonInputProps {\n}\ndeclare const TextareaInput: React.FC<TextareaInputProps>;\nexport default TextareaInput;\n"}}

{"code":"// Filepath: /src/features/dynamic-form/hooks/useFormFields.ts\n// src/features/dynamic-form/hooks/useFormFields.ts\nimport { useMemo, useState, useEffect } from 'react';\nimport { useWatch } from 'react-hook-form';\nimport { shouldRenderField, getFields, flattenConfig } from '../utils';\n/**\n * Custom hook to generate form fields from data and config.\n *\n * @param config - The form configuration.\n * @param formState - The `react-hook-form` form state.\n * @param control - The `react-hook-form` control object.\n * @returns An object containing the form fields and the fields to render.\n */\nfunction useFormFields(config, formState, control) {\n    // @ts-expect-error\n    const [update, setUpdate] = useState(false);\n    // Thêm useEffect để force re-render khi config thay đổi\n    useEffect(() => {\n        setUpdate((prev) => !prev);\n    }, [config]);\n    const flattenedConfig = useMemo(() => flattenConfig(config), [config]);\n    const conditionalFieldsConfig = useMemo(() => Object.keys(config)\n        .filter((fieldId) => config[fieldId].conditional &&\n        typeof config[fieldId].conditional?.when === 'string')\n        .map((fieldId) => ({\n        when: config[fieldId].conditional.when,\n        operator: config[fieldId].conditional.operator || 'is',\n        value: config[fieldId].conditional?.value,\n        comparator: config[fieldId].conditional?.comparator,\n        fields: config[fieldId].conditional.fields || [],\n    })), [config]);\n    const watchedValues = useWatch({\n        control,\n        name: conditionalFieldsConfig.map((condition) => condition.when),\n    });\n    const fieldsToRender = useMemo(() => Object.keys(config).filter((fieldId) => shouldRenderField(fieldId, conditionalFieldsConfig, watchedValues)), [config, conditionalFieldsConfig, watchedValues]);\n    const fields = useMemo(() => getFields(flattenedConfig, formState), [flattenedConfig, formState]);\n    return { fields, fieldsToRender, conditionalFieldsConfig };\n}\nexport default useFormFields;\n","references":["/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/@types/react/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/types.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/node_modules/react-hook-form/dist/index.d.ts","/Users/matthewngo/Documents/dev/projects/react-dynamic-form/src/features/dynamic-form/utils/index.ts"],"dts":{"name":"/Users/matthewngo/Documents/dev/projects/react-dynamic-form/features/dynamic-form/hooks/useFormFields.d.ts","writeByteOrderMark":false,"text":"import { FormField, FormConfig, Condition, FormValues } from '../types';\nimport { FormState, Control } from 'react-hook-form';\n/**\n * Custom hook to generate form fields from data and config.\n *\n * @param config - The form configuration.\n * @param formState - The `react-hook-form` form state.\n * @param control - The `react-hook-form` control object.\n * @returns An object containing the form fields and the fields to render.\n */\ndeclare function useFormFields(config: FormConfig, formState: FormState<FormValues>, control: Control<FormValues>): {\n    fields: FormField[];\n    fieldsToRender: string[];\n    conditionalFieldsConfig: Condition[];\n};\nexport default useFormFields;\n"}}
